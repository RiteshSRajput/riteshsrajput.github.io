/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface DxpAccordion {
    /**
    * sets the accordion heading
    */
    'heading': string;
    /**
    * sets whether header is required
    */
    'isHeaderRequired': boolean;
    /**
    * sets the accordion items to be display
    */
    'items': any;
  }
  interface DxpAccordionItem {
    /**
    * sets the description
    */
    'itemDescription': string;
    /**
    * sets the sub-title
    */
    'itemSubtitle': string;
    /**
    * sets the title
    */
    'itemTitle': string;
    /**
    * checkbox to expand the accordion item description
    */
    'showExpanded': boolean;
  }
  interface DxpAudio {
    /**
    * aria-label for mute unmute button for accessibility.
    */
    'ariaLabelMuteUnmute': string;
    /**
    * aria-label for pay pause button for accessibility.
    */
    'ariaLabelPlayPause': string;
    /**
    * audio auto play property
    */
    'autoplay': boolean;
    /**
    * audio default control property
    */
    'defaultControls': boolean;
    /**
    * hide audio play pause control
    */
    'hidePlayPauseControl': boolean;
    /**
    * holds boolean value of looping audio
    */
    'loop': boolean;
    /**
    * audio mute unmute control property
    */
    'muted': boolean;
    /**
    * holds position for audio player
    */
    'position': 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    /**
    * audio preload property
    */
    'preload': 'auto' | 'none' | 'metadata';
    /**
    * holds source for audio file
    */
    'src': string;
    /**
    * holds type of audio format
    */
    'type': 'mpeg' | 'ogg' | 'wav';
  }
  interface DxpAutowriter {
    /**
    * method to clear intervals
    */
    'clearAutoWriterIntervals': () => Promise<void>;
    /**
    * custom css class name if needed to be applied to display text
    */
    'customStyleClass': '';
    /**
    * to fix the cursor position at the start
    */
    'fixCursor': boolean;
    /**
    * speed in milliseconds for interval to display next character
    */
    'speed': number;
    /**
    * array text that needs to be displayed
    */
    'textList': any[];
  }
  interface DxpBanner {
    /**
    * add circle design over banner
    */
    'addCircle': boolean;
    /**
    * alt Text
    */
    'alt': string;
    /**
    * animation for overlay content and CTA
    */
    'animation': boolean;
    /**
    * Auto play video
    */
    'autoPlay': boolean;
    /**
    * background type for regular hero and banner
    */
    'backgroundType': string;
    /**
    * banner size
    */
    'bannerSize': string;
    /**
    * banner type
    */
    'bannerType': string;
    /**
    * slide background color
    */
    'cardColor': string;
    /**
    * category
    */
    'categoryTag': string;
    /**
    * Enable disable out of the box padding & margin around component
    */
    'containerFluid': boolean;
    /**
    * cta attributes
    */
    'cta': any;
    /**
    * to give custom id to banner
    */
    'customId': string;
    /**
    * custom mute button in case of disabled controls for HTML5 video
    */
    'customMuteButton': boolean;
    /**
    * custom mute button position
    */
    'customMuteButtonPosition': 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    /**
    * disable video controls
    */
    'disableControls': boolean;
    /**
    * enable overlay
    */
    'enableOverlay': string;
    /**
    * eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * focal Points
    */
    'focalPoint': any;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * image Href
    */
    'href': string;
    /**
    * video play icon type e.g light, dark
    */
    'iconType': string;
    /**
    * overlay for Image
    */
    'imageEnableOverlay': string;
    /**
    * image Title
    */
    'imageTitle': string;
    /**
    * Video mute option
    */
    'muted': boolean;
    /**
    * Open in new tab
    */
    'openInNewTab': string;
    /**
    * overlay Position
    */
    'overlayPosition': string;
    /**
    * Web page scroll with this button. Listen on bottom side of banner
    */
    'pageScrollDownArrow': string;
    /**
    * position Of Image
    */
    'positionOfImage': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * key of the query that is to be sent to results page
    */
    'searchParamKey': string;
    /**
    * placeholder for search in in-page-search banner
    */
    'searchPlaceholder': string;
    /**
    * extension of search result page for in page search banner
    */
    'searchResultPageExtension': string;
    /**
    * result page URL for in page search banner
    */
    'searchResultPageUrl': string;
    /**
    * show/hide text contents over image overlay banner
    */
    'showContentSm': boolean;
    /**
    * image source
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
    /**
    * poster link Of video
    */
    'srcPoster': string;
    /**
    * source Of video
    */
    'srcVideo': string;
    /**
    * image of video play
    */
    'srcVideoPlayImage': string;
    /**
    * subtitle
    */
    'subTitle': string;
    /**
    * slide text color
    */
    'textColor': string;
    /**
    * title text
    */
    'titleText': string;
    /**
    * description of video
    */
    'videoDescription': string;
    /**
    * name of video
    */
    'videoName': string;
    /**
    * video type like youtube, youku, akamai etc
    */
    'videoType': string;
    /**
    * video first published date
    */
    'videoUploadDate': string;
  }
  interface DxpBannerBenefitsHero {
    /**
    * alt Text
    */
    'alt': string;
    /**
    * banner size
    */
    'bannerSize': string;
    /**
    * banner type
    */
    'bannerType': string;
    /**
    * slide background color
    */
    'cardColor': string;
    /**
    * cta attributes
    */
    'cta': any;
    /**
    * to give custom id to banner
    */
    'customId': string;
    /**
    * eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * focal Point
    */
    'focalPoint': any;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * image Href
    */
    'href': string;
    /**
    * position Of Image
    */
    'imageEnableOverlay': string;
    /**
    * image Title
    */
    'imageTitle': string;
    /**
    * Open in new tab
    */
    'openInNewTab': string;
    /**
    * position Of Image
    */
    'positionOfImage': string;
    /**
    * image position as per dir attribute (if any)
    */
    'positionOfImageClass': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * image source
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
    /**
    * subtitle
    */
    'subTitle': string;
    /**
    * slide text color
    */
    'textColor': string;
    /**
    * title text
    */
    'titleText': string;
  }
  interface DxpBannerCarousel {
    /**
    * This is property for autoplay of carousel
    */
    'autoPlay': boolean;
    /**
    * This is property to set the position of badge/dots
    */
    'badgeAlignment': boolean;
    /**
    * This is property to set indicator color in b2b carousel
    */
    'indicatorColor': string;
    /**
    * Check this to set indicator position to left in b2b carousel
    */
    'indicatorToLeft': boolean;
    /**
    * If banner type is benefits hero then set this to true
    */
    'isBenefitsHero': boolean;
    /**
    * This defines the speed of carousel
    */
    'pauseDuration': number;
    /**
    * check this to show arrows for carousel
    */
    'showArrows': boolean;
    /**
    * check this property to show thumbnails of banner
    */
    'showProgressbar': boolean;
    /**
    * check this property to show thumbnails of banner
    */
    'showThumbnails': boolean;
    /**
    * slide data for script elements
    */
    'slides': any;
  }
  interface DxpBannerCta {
    /**
    * button style for cta
    */
    'bannerSize': string;
    /**
    * banner type for cta
    */
    'bannerType': string;
    /**
    * button style for cta
    */
    'buttonStyle': string;
    /**
    * download file name for cta
    */
    'downloadFile': string;
    /**
    * email body for cta
    */
    'emailBody': string;
    /**
    * email id for cta type email
    */
    'emailId': string;
    /**
    * email subject for cta
    */
    'emailSubject': string;
    /**
    * prop value is true when overlay is enabled on 'image banner'
    */
    'enableOverlay': string;
    /**
    * link text for cta
    */
    'linkText': string;
    /**
    * link type for cta
    */
    'linkType': string;
    /**
    * link url for cta
    */
    'linkUrl': string;
    /**
    * open link in new tab for cta
    */
    'openInNewTab': 'false';
    /**
    * Text for visually impaired for cta
    */
    'visuallyImpairedText': string;
  }
  interface DxpBannerImageOverlay {
    /**
    * add circle design over banner
    */
    'addCircle': boolean;
    /**
    * alt Text
    */
    'alt': string;
    /**
    * animation for overlay content and CTA
    */
    'animation': boolean;
    /**
    * auto play video
    */
    'autoPlay': boolean;
    /**
    * background type of Hero Banner like Image, Video, Solid
    */
    'backgroundType': string;
    /**
    * banner size
    */
    'bannerSize': string;
    /**
    * banner type
    */
    'bannerType': string;
    /**
    * category
    */
    'categoryTag': string;
    /**
    * cta attributes
    */
    'cta': any;
    /**
    * custom mute button in case of disabled controls for HTML5 video
    */
    'customMuteButton': boolean;
    /**
    * custom mute button position
    */
    'customMuteButtonPosition': 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    /**
    * disable video controls
    */
    'disableControls': boolean;
    /**
    * enable overlay
    */
    'enableOverlay': string;
    /**
    * eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * focal Point
    */
    'focalPoint': any;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * image Href
    */
    'href': string;
    /**
    * video play icon type e.g light, dark
    */
    'iconType': string;
    /**
    * position Of Image
    */
    'imageEnableOverlay': string;
    /**
    * image Title
    */
    'imageTitle': string;
    /**
    * Video mute option
    */
    'muted': boolean;
    /**
    * Open in new tab
    */
    'openInNewTab': string;
    /**
    * overlay Position
    */
    'overlayPosition': string;
    /**
    * Web page scroll down
    */
    'pageScrollDownArrow': boolean;
    /**
    * position Of Image
    */
    'positionOfImage': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * show/hide text contents over image overlay banner
    */
    'showContentSm': boolean;
    /**
    * image source
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
    /**
    * poster link Of video
    */
    'srcPoster': string;
    /**
    * source Of video
    */
    'srcVideo': string;
    /**
    * video play image icon
    */
    'srcVideoPlayImage': string;
    /**
    * subtitle
    */
    'subTitle': string;
    /**
    * title text
    */
    'titleText': string;
    /**
    * description of video
    */
    'videoDescription': string;
    /**
    * name of video
    */
    'videoName': string;
    /**
    * video type like youtube, youku, akamai etc
    */
    'videoType': string;
    /**
    * video first published date
    */
    'videoUploadDate': string;
  }
  interface DxpBannerRegular {
    /**
    * add circle design over banner
    */
    'addCircle': boolean;
    /**
    * alt Text
    */
    'alt': string;
    /**
    * animation for overlay content and CTA
    */
    'animation': boolean;
    /**
    * auto play video
    */
    'autoPlay': boolean;
    /**
    * background type for regular banner
    */
    'backgroundType': string;
    /**
    * banner type
    */
    'bannerType': string;
    /**
    * cta attributes
    */
    'cta': any;
    /**
    * custom mute button in case of disabled controls for HTML5 video
    */
    'customMuteButton': boolean;
    /**
    * custom mute button position
    */
    'customMuteButtonPosition': 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    /**
    * disable video controls
    */
    'disableControls': boolean;
    /**
    * eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * focal Points
    */
    'focalPoint': string;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * image Title
    */
    'imageTitle': string;
    /**
    * overlay text content position
    */
    'overlayPosition': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * image source
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
    /**
    * poster link Of video
    */
    'srcPoster': string;
    /**
    * source Of video
    */
    'srcVideo': string;
    /**
    * subtitle
    */
    'subTitle': string;
    /**
    * title text
    */
    'titleText': string;
    /**
    * description of video
    */
    'videoDescription': string;
    /**
    * name of video
    */
    'videoName': string;
    /**
    * video type like youtube, youku, akamai etc
    */
    'videoType': string;
    /**
    * video first published date
    */
    'videoUploadDate': string;
  }
  interface DxpBannerSmallImage {
    /**
    * alt Text
    */
    'alt': string;
    /**
    * banner type
    */
    'bannerType': string;
    /**
    * slide text color
    */
    'cardColor': string;
    /**
    * cta attributes
    */
    'cta': any;
    /**
    * to give custom id to banner
    */
    'customId': string;
    /**
    * eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * Focal point of XL images
    */
    'focalPoint': any;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * image Href
    */
    'href': string;
    /**
    * position Of Image
    */
    'imageEnableOverlay': string;
    /**
    * image Title
    */
    'imageTitle': string;
    /**
    * Open in new tab
    */
    'openInNewTab': string;
    /**
    * position Of Image
    */
    'positionOfImage': string;
    /**
    * image position as per dir attribute (if any)
    */
    'positionOfImageClass': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * image source
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
    /**
    * subtitle
    */
    'subTitle': string;
    /**
    * slide text color
    */
    'textColor': string;
    /**
    * title text
    */
    'titleText': string;
  }
  interface DxpBannerSolidBackground {
    /**
    * banner size
    */
    'bannerSize': string;
    /**
    * banner type
    */
    'bannerType': string;
    /**
    * cta attributes
    */
    'cta': any;
    /**
    * eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * overlay Position
    */
    'overlayPosition': string;
    /**
    * subtitle
    */
    'subTitle': string;
    /**
    * title text
    */
    'titleText': string;
  }
  interface DxpBreadcrumb {
    /**
    * api url
    */
    'apiUrl': string;
    /**
    * define for which site/application sitemap is required
    */
    'applicationName': string;
    /**
    * checkboxes items data
    */
    'breadcrumbItemsData': any;
    /**
    * hides the current item in breadcrumb
    */
    'hideCurrentPage': boolean;
    /**
    * define the navigation start level
    */
    'navStartLevel': number;
    /**
    * refresh Breadcrumb Items
    */
    'refreshBreadcrumbItems': () => Promise<void>;
    /**
    * define the navigation root site path for sitemap service to fetch data
    */
    'rootSitePath': string;
    /**
    * show hidden navigation items which are marked as hidden
    */
    'showHiddenNavItems': boolean;
  }
  interface DxpBreadcrumbItem {
    /**
    * accessibility text of the breadcrumb items
    */
    'accessibilityText': string;
    /**
    * hides the current item in breadcrumb
    */
    'hideCurrentPage': boolean;
    /**
    * to set the z-index value
    */
    'indexVal': number;
    /**
    * define for current page in breadcrumb
    */
    'isCurrentPage': boolean;
    /**
    * link of the breadcrumb item
    */
    'link': string;
    /**
    * title of the breadcrumb items
    */
    'linkTitle': string;
  }
  interface DxpCalendar {
    /**
    * calendar ID
    */
    'calendarId': string;
    /**
    * default date
    */
    'defaultDate': string;
    /**
    * list of dates that will be disabled in dd/mm/yyyy format (not zero based on month)
    */
    'disabledDates': any;
    /**
    * list of dates that will be enabled in dd/mm/yyyy format (not zero based on month) - all dates outside range to be disabled
    */
    'enabledDates': any;
    /**
    * it will be the starting year available in calendar year dropdown
    */
    'fromYear': number;
    /**
    * just a configuration if consumer wants to disable the future date ( will be useful in currency converter)
    */
    'futureDate': boolean;
    /**
    * label for date
    */
    'label': string;
    /**
    * row with message available at footer of calendar overlay
    */
    'message': string;
    /**
    * This attribute specifies that an input field must be filled out before submitting the form
    */
    'required': boolean;
    /**
    * it will be the ending year available in calendar year dropdown
    */
    'throughYear': number;
  }
  interface DxpCell {
    /**
    * content inside cell of table
    */
    'content': string;
  }
  interface DxpChart {
    /**
    * api url for chart
    */
    'apiUrl': string;
    /**
    * holds chart category
    */
    'chart': 'bar' | 'pie';
    /**
    * holds chart title
    */
    'chartTitle': '';
    /**
    * holds sub type of chart
    */
    'chartType': 'basic' | 'doughnut' | 'stacked' | 'group';
    /**
    * contains chart data array
    */
    'data': any;
    /**
    * holds height of chart
    */
    'height': number;
    /**
    * holds legend direction
    */
    'legendDirection': 'vertical' | 'horizontal';
    /**
    * holds legend orientation
    */
    'legendOrient': 'top' | 'bottom' | 'left' | 'right';
    /**
    * holds legend title
    */
    'legendTitle': '';
    /**
    * Chart orientation
    */
    'orientation': 'vertical' | 'horizontal';
    /**
    * holds legend visibility
    */
    'showLegend': true | false;
    /**
    * holds tool tip
    */
    'showTooltip': true | false;
    /**
    * holds width of chart
    */
    'width': number;
    /**
    * holds x axis label
    */
    'xAxis': '';
    /**
    * holds y axis label
    */
    'yAxis': '';
  }
  interface DxpCheckbox {
    /**
    * set alignment
    */
    'alignment': 'horizontal' | 'vertical';
    /**
    * checkbox id
    */
    'checkboxId': string;
    /**
    * checkbox checked
    */
    'checked': boolean;
    /**
    * checkbox disabled
    */
    'disabled': boolean;
    /**
    * Emit the checkbox value on selection the checkbox
    */
    'emitData': (target: any) => Promise<void>;
    /**
    * actions to be performed prior to component loading
    */
    'name': any;
    /**
    * require property
    */
    'required': boolean;
    /**
    * this reSet method is for the parent hosting element to reset the dxp-checkbox to unchecked status
    */
    'reset': () => Promise<void>;
    /**
    * setChecked method is for other element to check or uncheck this dxp-checkbox
    */
    'setChecked': (isChecked: boolean) => Promise<void>;
    /**
    * validation message
    */
    'validationMessage': string;
    /**
    * add the value in checkbox value attribute
    */
    'value': any;
  }
  interface DxpCheckboxGroup {
    /**
    * layout of check-box. Author can set the alignment of check-boxes horizontally / vertically
    */
    'alignment': 'horizontal' | 'vertical';
    /**
    * This is heading of checkbox items
    */
    'caption': string;
    /**
    * checkbox items data
    */
    'checkboxItemsData': any;
    /**
    * More and less will be shown and hidden based on the number of incoming items
    */
    'initialItemsCount': number;
    /**
    * Defines if the field is required
    */
    'required': boolean;
    /**
    * Select-all checkbox button will be present if the author set it to true
    */
    'selectAll': boolean;
    /**
    * separator will be shown and hidden if the property is set to true and false respectively
    */
    'separatorRequired': boolean;
    /**
    * Error message will appear if none of checkbox is checked
    */
    'validationMessage': string;
  }
  interface DxpCheckboxTree {
    /**
    * checkbox-tree object
    */
    'dataSource': any;
    /**
    * serchtext to filter data
    */
    'searchText': any;
    /**
    * show only selected checkbox nodes
    */
    'showSelected': boolean;
  }
  interface DxpComments {
    /**
    * holds api end point path
    */
    'apiUrl': string;
    /**
    * prop holds application Id
    */
    'appId': any;
    /**
    * prop Holds comments cancel button text
    */
    'cancelText': string;
    /**
    * Holds comments content id
    */
    'commentContentId': string;
    /**
    * comment value in the text area
    */
    'commentText': any;
    /**
    * Limit to show comments
    */
    'commentsLimit': number;
    /**
    * max-length for comment textarea
    */
    'maxCharacters': number;
    /**
    * mock comment json url
    */
    'mockcommentUrl': string;
    /**
    * prop holds needs of moderation value
    */
    'needsModeration': boolean;
    /**
    * Limit to show replies
    */
    'repliesLimit': number;
    /**
    * prop holds comments submit button text
    */
    'submitText': string;
    /**
    * prop holds comment textarea placeholder text
    */
    'textareaPlaceholder': string;
    /**
    * prop holds get user id from
    */
    'userDataContainer': 'COOKIE' | 'SESSION' | 'OTHER';
    /**
    * prop holds stored user info key name
    */
    'useridKey': any;
  }
  interface DxpCommentsItem {
    /**
    * comment-obj
    */
    'commentObj': any;
    /**
    * set action menu is click
    */
    'isActionMenuActive': boolean;
    /**
    * Flag to identify textarea opened for edit reply
    */
    'isOpenedForEditReply': boolean;
    /**
    * Flag to identify textarea opened for reply to comment
    */
    'isOpenedForReply': boolean;
    /**
    * Flag to identify comment or reply
    */
    'isReply': boolean;
    /**
    * set reply link is active on click
    */
    'isReplyLinkActive': boolean;
    /**
    * max-length for comment textarea
    */
    'maxCharacters': number;
    /**
    * prop holds get user id from
    */
    'userDataContainer': 'COOKIE' | 'SESSION' | 'OTHER';
    /**
    * prop holds stored user info key name
    */
    'useridKey': any;
  }
  interface DxpCommentsWithReply {
    /**
    * comment-obj
    */
    'commentObj': any;
    /**
    * max-length for comment textarea
    */
    'maxCharacters': number;
    /**
    * Limit to show replies
    */
    'repliesLimit': number;
    /**
    * prop holds get user id from
    */
    'userDataContainer': 'COOKIE' | 'SESSION' | 'OTHER';
    /**
    * prop holds stored user info key name
    */
    'useridKey': any;
  }
  interface DxpContainer {
    /**
    * prop to uniquely identify a container
    */
    'containerId': string;
    /**
    * url to fetch CMS content from
    */
    'src': string;
  }
  interface DxpContentItem {
    /**
    * More action button list
    */
    'actionList': any[];
    /**
    * alt text for header image
    */
    'alt': string;
    /**
    * content item animation
    */
    'animation': 'slide-right' | 'slide-left' | 'slide-up' | 'slide-down' | 'none';
    /**
    * content item animation
    */
    'animationDuration': number;
    /**
    * title badge background color
    */
    'badgeBackgroundColor': string;
    /**
    * text for badge
    */
    'badgeText': string;
    /**
    * text color for badge
    */
    'badgeTextColor': string;
    /**
    * CTA one display as link or button
    */
    'buttonOneDisplayAs': 'link' | 'button';
    /**
    * CTA one link/button text
    */
    'buttonOneLinkText': string;
    /**
    * to open in new tab or not when CTA one is clicked
    */
    'buttonOneOpenInNewTab': boolean;
    /**
    * link to destination
    */
    'buttonOneUrl': string;
    /**
    * CTA two display as link or button
    */
    'buttonTwoDisplayAs': 'link' | 'button';
    /**
    * CTA two link/button text
    */
    'buttonTwoLinkText': string;
    /**
    * to open in new tab or not when CTA two is clicked
    */
    'buttonTwoOpenInNewTab': boolean;
    /**
    * link to destination
    */
    'buttonTwoUrl': string;
    /**
    * show card more button or not
    */
    'cardMoreButton': boolean;
    /**
    * category label for dxp-content-item
    */
    'categoryLabel': string;
    /**
    * category tag for dxp-content-item
    */
    'categoryTag': string;
    /**
    * category text target for dxp-content-item
    */
    'categoryTarget': false;
    /**
    * category text for dxp-content-item
    */
    'categoryText': string;
    /**
    * title url for dxp-content-item
    */
    'contentItemTitle': string;
    /**
    * title url for dxp-content-item
    */
    'contentItemTitleTarget': true;
    /**
    * title url for dxp-content-item
    */
    'contentItemTitleUrl': string;
    /**
    * type of dxp-content-item; can be either media-on-top, title-on-top
    */
    'contentItemType': 'media-on-top' | 'eyebrow-on-top' | 'title-on-top' | 'description-on-top';
    /**
    * Content type of dxp-content-item.
    */
    'contentType': 'content-image-text' | 'content-small-image' | 'content-logo';
    /**
    * count of the Content item
    */
    'count': string;
    /**
    * cta data for child components
    */
    'ctaData': any;
    /**
    * custom mute button in case of disabled controls for HTML5 video
    */
    'customMuteButton': boolean;
    /**
    * custom mute button position
    */
    'customMuteButtonPosition': 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    /**
    * defines theme for child components
    */
    'dataTheme': string;
    /**
    * date string of the Content Item
    */
    'date': string;
    /**
    * description for dxp-content-item
    */
    'description': string;
    /**
    * description target for dxp-content-item
    */
    'descriptionTarget': boolean;
    /**
    * Device height
    */
    'deviceHeight': string;
    /**
    * disable video controls
    */
    'disableControls': boolean;
    /**
    * set overlay to true or false on header image
    */
    'enableOverlay': boolean;
    /**
    * eyebrow text for dxp-content-item
    */
    'eyebrowText': string;
    /**
    * focal point for header image
    */
    'focalPoints': any;
    /**
    * Left Head icon of the Content item
    */
    'headerIconLeft': string;
    /**
    * Right Head icon of the Content item
    */
    'headerIconRight': string;
    /**
    * Header text of the Content Item
    */
    'headerText': string;
    /**
    * header type of dxp-content-item. Can be either image or none
    */
    'headerType': 'image' | 'none' | 'video' | 'card';
    /**
    * whether borderline should use
    */
    'headerline': boolean;
    /**
    * header type of dxp-content-item. Can be either image or none
    */
    'heightType': 'small' | 'large';
    /**
    * link to destination from header
    */
    'href': string;
    /**
    * icon type for header video
    */
    'iconType': 'light' | 'dark';
    /**
    * title for header image
    */
    'imageTitle': string;
    /**
    * whether content indentation should use
    */
    'indentation': boolean;
    /**
    * header link open in new tab or not
    */
    'openInNewTab': boolean;
    /**
    * orientation of dxp-content-item
    */
    'orientation': 'horizontal' | 'vertical';
    /**
    * to align play icon on bottom left side
    */
    'playIconBottomLeft': boolean;
    /**
    * position Of image/video
    */
    'positionOfMedia': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * type of the application
    */
    'ribbonType': string;
    /**
    * path of image if the header type is set to image
    */
    'src': string;
    /**
    * poster url that will be shown on video if headerType is video
    */
    'srcPoster': string;
    /**
    * src-video of video
    */
    'srcVideo': string;
    /**
    * Status of the application
    */
    'status': string;
    /**
    * Status url of the application
    */
    'statusUrl': string;
    /**
    * Status url of the application
    */
    'statusUrlOpenInNewTab': boolean;
    /**
    * type of video. can be either youtube, vimeo etc
    */
    'type': string;
    /**
    * description of video
    */
    'videoDescription': string;
    /**
    * name of video
    */
    'videoName': string;
    /**
    * video upload date
    */
    'videoUploadDate': string;
  }
  interface DxpContentItemGrid {
    /**
    * and text
    */
    'andText': string;
    /**
    * api url for content items data
    */
    'apiEndpoint': string;
    /**
    * number of columns in the grid
    */
    'column': number;
    /**
    * content data for child components
    */
    'contentData': any;
    /**
    * cta data for child components
    */
    'cta': any;
    /**
    * boolean to enable pagination on grid
    */
    'enablePagination': boolean;
    /**
    * first button label
    */
    'firstButtonLabel': string;
    /**
    * description to be shown in the header of Grid
    */
    'gridDescription': string;
    /**
    * eyebrow text to be shown in the header of Grid
    */
    'gridEyebrowText': string;
    /**
    * Title to be shown in the header of Grid
    */
    'gridTitle': string;
    /**
    * Link to destination for title
    */
    'gridTitleUrl': string;
    /**
    * class to be applied for header alignment
    */
    'headerAlignment': 'left' | 'right' | 'center';
    /**
    * boolean to hide pagination when only single page is present in pagination
    */
    'hidePaginationWhenSingle': boolean;
    /**
    * highlight the first column
    */
    'highlightFirstContentItem': boolean;
    /**
    * number of content items visible in one page of pagination
    */
    'itemsPerPage': number;
    /**
    * last button label
    */
    'lastButtonLabel': string;
    /**
    * next button label
    */
    'nextButtonLabel': string;
    /**
    * of text
    */
    'ofText': string;
    /**
    * Accessibility text for pagination input
    */
    'pageInputAccessibilityText': string;
    /**
    * page text
    */
    'pageText': string;
    /**
    * align pagination
    */
    'paginationAlignment': 'left' | 'right' | 'center';
    /**
    * pagination display caption text
    */
    'paginationDisplayText': string;
    /**
    * Pagination input validation message
    */
    'paginationValidationMessage': string;
    /**
    * previous button label
    */
    'previousButtonLabel': string;
    /**
    * Link to destination for title
    */
    'titleTarget': boolean;
  }
  interface DxpContentList {
    /**
    * content title accessibility data
    */
    'ariaLabel': string;
    /**
    * object to hold multiple content list items blocks that can be passed as json array
    */
    'contentListItems': any;
    /**
    * content header size
    */
    'headerSize': string;
    /**
    * content href
    */
    'href': string;
    /**
    * list item alignment
    */
    'orientation': 'vertical' | 'horizontal';
    /**
    * content target
    */
    'target': boolean;
    /**
    * content title text
    */
    'titleText': string;
  }
  interface DxpContentListItem {
    /**
    * content title accessibility
    */
    'ariaLabel': string;
    /**
    * content href
    */
    'href': string;
    /**
    * content sub title
    */
    'subTitle': string;
    /**
    * content target
    */
    'target': boolean;
  }
  interface DxpCookieConsent {
    /**
    * declare content cid
    */
    'cid': number;
    /**
    * declare content pid
    */
    'pid': number;
  }
  interface DxpCopyright {
    /**
    * Prop for the copyright text
    */
    'text': string;
  }
  interface DxpCountryItem {
    /**
    * country name
    */
    'name': string;
  }
  interface DxpCountryLanguageSelector {
    /**
    * contains country language response
    */
    'countryLanguageData': any;
    /**
    * END POINT URL
    */
    'endPointUrl': string;
    /**
    * targetUrl
    */
    'targetUrl': any;
  }
  interface DxpCta {
    /**
    * add custom color
    */
    'accentColor': string;
    /**
    * Alternative text for icon image
    */
    'alt': string;
    /**
    * btn-with-text
    */
    'ariaLabel': string;
    /**
    * full width button
    */
    'blockButton': boolean;
    /**
    * size of button
    */
    'buttonSize': 'xs' | 'sm' | 'md' | 'lg';
    /**
    * type of button
    */
    'buttonType': 'primary' | 'secondary' | 'branded';
    /**
    * state of button
    */
    'disabled': boolean;
    /**
    * title of cta needed for analytics
    */
    'dtmCtaTitle': string;
    /**
    * Cta link
    */
    'href': string;
    /**
    * Icon url of button
    */
    'iconAlign': 'left' | 'right';
    /**
    * to add icon badge
    */
    'iconBadge': string;
    /**
    * link type
    */
    'linkType': 'dxp-btn-video-link' | 'dxp-btn-download-link' | 'dxp-btn-external-link' | 'dxp-btn-internal-link' |
    'dxp-cta-link' | 'dxp-btn-custom-link' | 'dxp-cta-normal-link';
    /**
    * Link target.  Set to true to open in an new window.
    */
    'openInNewTab': boolean;
    /**
    * Icon url of button
    */
    'src': string;
    /**
    * btn-with-text
    */
    'text': string;
    /**
    * type of cta
    */
    'type': 'icon' | 'link' | 'button';
  }
  interface DxpCtaList {
    /**
    * object to hold multiple CTA blocks that can be passed as json array
    */
    'ctaList': any;
    /**
    * orientation of icons list (horizontal/ vertical)
    */
    'orientation': 'horizontal' | 'vertical';
    /**
    * title style property
    */
    'titleStyle': string;
    /**
    * title text property
    */
    'titleText': string;
  }
  interface DxpDataGrid {
    /**
    * api url for data of grid
    */
    'apiUrl': string;
    /**
    * page data attribute
    */
    'data': any;
    /**
    * configuaration  to enable export function
    */
    'enableExport': boolean;
    /**
    * enableFilter - flag to enable/disable filter dialog
    */
    'enableFilter': boolean;
    /**
    * flag to show/hide pagination
    */
    'enablePagination': boolean;
    /**
    * configuaration  to enable row selction
    */
    'enableRowSelection': boolean;
    /**
    * configuaration  to enable search data function
    */
    'enableSearch': boolean;
    /**
    * page stackheaders bgcolor attribute
    */
    'enableStackheaderBgcolor': boolean;
    /**
    * page headers attribute
    */
    'headerUrl': string;
    /**
    * page headers attribute
    */
    'headers': any;
    /**
    * grid height
    */
    'height': string;
    /**
    * max number of columns that can be pinned
    */
    'maxColumnPins': number;
    /**
    * grid no of rows
    */
    'rowsperpage': number;
    /**
    * grid selection type
    */
    'selectionType': 'page' | 'grid';
    /**
    * page stackheaders attribute
    */
    'stackHeaders': any;
    /**
    * sticky header: boolean
    */
    'stickyHeader': boolean;
    /**
    * grid width
    */
    'width': string;
  }
  interface DxpDataGridCell {
    /**
    * cell key
    */
    'cellKey': string;
    /**
    * sort and filter options
    */
    'cellOptions': any;
    /**
    * Cell type
    */
    'cellType': 'text' | 'cta' | 'checkbox';
    /**
    * content inside cell of grid
    */
    'content': string;
    /**
    * cell data
    */
    'data': any;
    /**
    * enableFilter - flag to enable/disable filter dialog
    */
    'enableFilter': boolean;
    /**
    * header false
    */
    'isHeader': boolean;
    /**
    * showFilters - flag to show/hide filter dialog
    */
    'showFilters': boolean;
    /**
    * cell width
    */
    'width': string;
  }
  interface DxpDataGridFilter {
    /**
    * filter data
    */
    'cellKey': any;
    /**
    * cell options
    */
    'cellOptions': any;
  }
  interface DxpDataGridRow {
    /**
    * attribute to pass row data
    */
    'data': any;
    /**
    * attribute to check row and head row
    */
    'isHeader': boolean;
    /**
    * attribute to check stackheader
    */
    'isStackHeader': boolean;
    /**
    * attribute to check color of stackhead
    */
    'stackHeaderColor': boolean;
  }
  interface DxpFacetedFilter {
    /**
    * sets the api-endpoint for filter properties
    */
    'apiEndpoint': string;
    /**
    * sets the close window for search filter
    */
    'closeWindow': string;
    /**
    * holds the content to be used to create individual filter
    */
    'filterItems': any;
    /**
    * holds the content data used to create filter
    */
    'filterItemsJson': any;
    /**
    * sets the content data used to create filter
    */
    'filterJson': any;
    /**
    * sets the type of filter to be created
    */
    'filterType': any;
    /**
    * sets the search-filter heading
    */
    'heading': string;
    /**
    * sets whether header is required
    */
    'isHeaderRequired': boolean;
    /**
    * sets whether filter has a subcategory
    */
    'isSubCategory': string;
  }
  interface DxpFacetedFilterItem {
    /**
    * checkbox to expand the filter item description
    */
    'isSubCategory': boolean;
    /**
    * sets the description
    */
    'itemDescription': string;
    /**
    * sets the sub-title
    */
    'itemSubtitle': string;
    /**
    * sets the title
    */
    'itemTitle': string;
    /**
    * checkbox to expand the filter item description
    */
    'showExpanded': boolean;
  }
  interface DxpFeedback {
    /**
    * prop holds api url
    */
    'apiUrl': string;
    /**
    * prop holds app id
    */
    'appId': string;
    /**
    * prop holds content id
    */
    'contentId': string;
    /**
    * feedbackAdditionalText for text area
    */
    'feedbackAdditionalText': string;
    /**
    * feedbackAdditionalTextPlaceholder for text area
    */
    'feedbackAdditionalTextPlaceholder': string;
    /**
    * prop for inject feedback item list
    */
    'feedbackItemList': any[];
    /**
    * prop for feedback-title
    */
    'feedbackTitle': string;
    /**
    * prop to hold the value to show textarea
    */
    'isAdditionalCommentRequired': boolean;
    /**
    * prop holds number of reviews to load more reviews
    */
    'reviewsLimit': number;
    /**
    * prop holds additional comment value
    */
    'textAreaLabel': string;
    /**
    * prop holds username key
    */
    'usernameKey': string;
    /**
    * prop holds username key
    */
    'usernameKeyLocation': 'COOKIE' | 'SESSION' | 'OTHER';
  }
  interface DxpFeedbackDisplay {
    /**
    * prop holds fetch path value for API
    */
    'displayUserName': string;
    /**
    * prop holds additional comment
    */
    'feedbackAdditionalText': string;
    /**
    * prop holds feedback value
    */
    'feedbackValue': any;
    /**
    * prop holds cta value
    */
    'starCount': number;
    /**
    * prop holds timestamp value
    */
    'timeStamp': any;
  }
  interface DxpFeedbackItem {
    /**
    * prop to hold feedback object values
    */
    'configData': any;
    /**
    * display feedback as
    */
    'displayAs': 'star' | 'dropdown' | 'radio';
    /**
    * holds the individual feedback id
    */
    'feedbackId': string;
    /**
    * prop to hold feedback individual title
    */
    'feedbackRatingTitle': any;
    /**
    * dropdown placeholder
    */
    'placeholder': string;
    /**
    * prop to hold star length
    */
    'starCount': number;
  }
  interface DxpFlexLayout {
    /**
    * borderStyle
    */
    'borderStyle': string;
    /**
    * reverse columns for small devices
    */
    'columnReverse': boolean;
  }
  interface DxpFlexLayoutItem {
    /**
    * background image path
    */
    'bgImage': string;
    /**
    * borderStyle
    */
    'borderStyle': string;
    /**
    * column width for small laptops - screens equal to or greater than 992px wide
    */
    'columnWidthLg': 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * column width for tablets - screens equal to or greater than 768px wide
    */
    'columnWidthMd': 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * column width for phablets - screens less than 768px wide
    */
    'columnWidthSm': 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * column width for laptops and desktops - screens equal to or greater than 1200px wide
    */
    'columnWidthXl': 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * padding style for large devices
    */
    'paddingStyleLg': string;
    /**
    * padding style for Medium devices
    */
    'paddingStyleMd': string;
    /**
    * padding style for Small devices
    */
    'paddingStyleSm': string;
    /**
    * padding style for Xl devices
    */
    'paddingStyleXl': string;
  }
  interface DxpFlipbox {
    /**
    * background color for back part
    */
    'backgroundColorBack': string;
    /**
    * background color for front part
    */
    'backgroundColorFront': string;
    /**
    * css styling for border of back part
    */
    'borderStyleBack': string;
    /**
    * css styling for border of front part
    */
    'borderStyleFront': string;
    /**
    * css styling for border of front part
    */
    'customStyleClass': string;
    /**
    * flipping direction
    */
    'flipDirection': 'horizontal' | 'vertical';
    /**
    * heading for back part
    */
    'headingBack': string;
    /**
    * heading for front part
    */
    'headingFront': string;
    /**
    * height of the box
    */
    'height': string;
    /**
    * width of the box
    */
    'width': string;
  }
  interface DxpFooter {
    /**
    * contentListData - utilized by DXP footer script support
    */
    'contentListData': any;
    /**
    * copyrightData - utilized by DXP footer script support
    */
    'copyrightData': any;
    /**
    * countryLanguageData - utilized by DXP footer script support
    */
    'countryLanguageData': any;
    /**
    * ctaListData - utilized by DXP footer script support
    */
    'ctaListData': any;
    /**
    * isContentList Present
    */
    'enableContentlist': boolean;
    /**
    * is Copyright Present
    */
    'enableCopyright': boolean;
    /**
    * is Country Language Selector Present
    */
    'enableCountrylanguageselectors': boolean;
    /**
    * is QuickLink Present
    */
    'enableFooterlink': boolean;
    /**
    * isLogo Present
    */
    'enableLogo': boolean;
    /**
    * isCTA Present
    */
    'enableQuicklink': boolean;
    /**
    * is Social Follow Present
    */
    'enableSociallinks': boolean;
    /**
    * footer object which contains data for all elements
    */
    'footerData': any;
    /**
    * footerlinkData - utilized by DXP footer script support
    */
    'footerlinkData': any;
    /**
    * logoData - utilized by DXP footer script support
    */
    'logoData': any;
    /**
    * socialFollowData - utilized by DXP footer script support
    */
    'socialFollowData': any;
  }
  interface DxpForm {
    /**
    * holds api end point path
    */
    'apiUrl': string;
    /**
    * button position
    */
    'buttonPosition': 'left' | 'right' | 'center';
    /**
    * btn-with-text
    */
    'buttonText': string;
    /**
    * type of button
    */
    'buttonType': 'primary' | 'secondary' | 'branded';
    /**
    * formId - to get the form JSON using formID
    */
    'formId': string;
    /**
    * formJson - to pass json and render form based on the json data
    */
    'formJson': any;
  }
  interface DxpGridPagination {
    /**
    * Index of currently showing page
    */
    'currentPageIndex': number;
    /**
    * flag to show/hide pagination
    */
    'showPaginationSection': boolean;
    /**
    * Total Number of records in data grid
    */
    'totalRows': number;
    /**
    * Total number of records per page
    */
    'totalRowsPerPage': number;
    /**
    * Pagination width
    */
    'width': string;
  }
  interface DxpHead {
    /**
    * content inside head-cell of table
    */
    'content': string;
  }
  interface DxpHeader {
    /**
    * Enable disable out of the box padding & margin around component
    */
    'containerFluid': boolean;
  }
  interface DxpHeaderRich {
    /**
    * Prop to display header background either transparent or solid
    */
    'backgroundType': 'transparent' | 'solid';
    /**
    * Prop to display fixed header
    */
    'isHeaderSticky': boolean;
  }
  interface DxpImage {
    /**
    * Alt/title text for image. Also for SEO.
    */
    'alt': string;
    /**
    * aria-label for image link. Also for accessibility.
    */
    'ariaLabel': string;
    /**
    * eyebrow of caption to be shown over the image
    */
    'captionEyebrow': string;
    /**
    * position of the caption on image
    */
    'captionPosition': 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'centered';
    /**
    * subtitle of caption to be shown over the image
    */
    'captionSubtitle': string;
    /**
    * title of caption to be shown over the image
    */
    'captionTitle': string;
    /**
    * Device height
    */
    'deviceHeight': string;
    /**
    * Enables overlay on the image if set to true
    */
    'enableOverlay': boolean;
    /**
    * Focal point of XL images
    */
    'focalPoint': any;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * Link destination when clicked.
    */
    'href': string;
    /**
    * Text to be shown on overlay
    */
    'imageTitle': string;
    /**
    * imgSrc
    */
    'imgSrc': string;
    /**
    * Link target.  Set to true to open in an new window.
    */
    'openInNewTab': boolean;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * Path for the image to display
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
  }
  interface DxpImageCarousel {
    /**
    * This is property for autoplay of carousel
    */
    'autoplay': boolean;
    /**
    * carousel data
    */
    'carouselData': any;
    /**
    * This defines the speed of carousel
    */
    'pauseDuration': number;
    /**
    * Caption of slide
    */
    'slideCaption': string;
  }
  interface DxpImageGrid {
    /**
    * content data for child components
    */
    'imageContentData': any;
    /**
    * layout options to select image ordering placement
    */
    'layoutOption': string;
  }
  interface DxpImageSlide {
    /**
    * altternative text
    */
    'alt': string;
    /**
    * Eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * image-title
    */
    'imageTitle': string;
    /**
    * Caption of slide
    */
    'slideCaption': string;
    /**
    * Path for the image to display
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
    /**
    * Sub title
    */
    'subTitle': string;
  }
  interface DxpInLanguage {
    /**
    * redirection link
    */
    'link': string;
    /**
    * name
    */
    'name': string;
  }
  interface DxpInPageNav {
    /**
    * inPageNavItemsData
    */
    'inPageNavItemsData': any;
  }
  interface DxpInPageNavItem {
    /**
    * set to true when item is active
    */
    'active': boolean;
    /**
    * function to get active status of an item
    */
    'getActive': () => Promise<boolean>;
    /**
    * function to get href of an item
    */
    'getHref': () => Promise<string>;
    /**
    * link to destination or id of section
    */
    'href': string;
    /**
    * function to get active status of an item
    */
    'setActive': () => Promise<void>;
    /**
    * text to be displayed in nav-bar
    */
    'text': string;
  }
  interface DxpInput {
    /**
    * define the Accessibility Text
    * @type {*}
    * @memberof Input
    */
    'accessibilityText': any;
    /**
    * validate Aria Valid or not
    * @type {boolean}
    * @memberof Input
    */
    'ariaInvalid': boolean;
    /**
    * Define Aria required or not
    * @type {boolean}
    * @memberof Input
    */
    'ariaRequired': boolean;
    /**
    * This attribute specifies that the input field should automatically get focus when the page loads
    * @memberof Input
    */
    'autoFocus': boolean;
    /**
    * To set unique identifier to the selector
    * @requires
    * @type {*}
    * @memberof Input
    */
    'contentId': any;
    /**
    * define the css classes used for this tag
    * @type {*}
    * @memberof Input
    */
    'cssClass': any;
    /**
    * It specifies that the input field is disabled
    * @memberof Input
    */
    'disabled': boolean;
    /**
    * This attribute specifies whether a form or input field should have auto complete on or off
    * @memberof Input
    */
    'enableAutocomplete': string;
    /**
    * this method called on any change in input field it validates the field information
    * @param event
    * @memberof Input
    */
    'handleChange': (event: any) => Promise<void>;
    /**
    * The height attributes specify the height of an input type image element
    * @type {*}
    * @memberof Input
    */
    'height': any;
    /**
    * This attribute specifies that an input field must be optional before submitting the form
    * @ignore
    * @memberof Input
    */
    'isOptional': boolean;
    /**
    * This attribute specifies that an input field must be filled out before submitting the form
    * @ignore
    * @memberof Input
    */
    'isRequired': boolean;
    /**
    * To set label of the dxp-input
    * @requires
    * @type {*}
    * @memberof Input
    */
    'label': any;
    /**
    * The min attribute specify the maximum value for an input element (number, range)
    * @memberof Input
    */
    'max': string;
    /**
    * To allow maximum character in the dxp-input, default value is 100
    * @memberof Input
    */
    'maxLength': number;
    /**
    * The min attribute specify the minimum value for an input element (number, range)
    * @memberof Input
    */
    'min': string;
    /**
    * To allow minimum character in the dxp-input, default value is 0
    * @memberof Input
    */
    'minLength': number;
    /**
    * Name of the field
    * @type {*}
    * @memberof Input
    */
    'name': any;
    /**
    * To allow regular expression that the input element's value is checked
    * @type {*}
    * @memberof Input
    */
    'pattern': any;
    /**
    * This attribute specifies a hint that describes the expected value of an input field (a sample value or a short description of the format).
    * @type {*}
    * @memberof Input
    */
    'placeholder': any;
    /**
    * It specifies that the input field is read only
    * @memberof Input
    */
    'readonly': boolean;
    /**
    * define spell check required or not
    * @type {boolean}
    * @memberof Input
    */
    'spellcheckRequired': boolean;
    /**
    * This attribute specifies the legal number intervals for an input element
    * @memberof Input
    */
    'step': string;
    /**
    * To set the type of dxp-input
    * @requires
    * @type {*}
    * @memberof Input
    */
    'type': any;
    /**
    * this method will be used to update isValid flag to show/hide validation message
    * @param isValid
    */
    'updateValidationState': (isValid: boolean) => Promise<void>;
    /**
    * To define the validation message if dxp-input is set to required
    * @memberof Input
    */
    'validationMessage': string;
    /**
    * To set default value of the dxp-input
    * @type {*}
    * @memberof Input
    */
    'value': any;
    /**
    * The width attributes specify the width of an input type image element
    * @memberof Input
    */
    'width': string;
  }
  interface DxpInputPassword {
    /**
    * define the Accessibility Text
    * @requires
    * @type {*}
    * @memberof Input-password
    */
    'accessibilityText': any;
    /**
    * This attribute specifies that the input field should automatically get focus when the page loads
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'autoFocus': boolean;
    /**
    * To set unique identifier to the selector
    * @requires
    * @type {*}
    * @memberof Input-password
    */
    'contentId': any;
    /**
    * It specifies that the input field is disabled
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'disabled': boolean;
    /**
    * To define the accessibility text when foucs is on error icon
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'errorIconAccessibilityText': string;
    /**
    * To show the tooltip text on error icon click
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'errorIconText': string;
    /**
    * To Specifie the color if password strength is good
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'goodPasswordColor': string;
    /**
    * this method called on any change in input field it validates the field information
    * @param event
    * @memberof Input-password
    */
    'handleChange': (event: any) => Promise<void>;
    /**
    * To define the accessibility text when foucs is on help icon
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'helpIconAccessibilityText': string;
    /**
    * To show the tooltip text on help icon click
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'helpIconText': string;
    /**
    * This attribute specifies that an input field need the icon or not
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'iconType': 'error' | 'help' | 'success' | 'none';
    /**
    * To store icon type value for further use
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'iconTypeInfo': string;
    /**
    * To define the support text for password criterias to make more understandable
    * @requires
    * @ignore
    * @memberof Input-input
    */
    'instructionText': string;
    /**
    * This attribute specifies that an input field is optional
    * @requires
    * @ignore
    * @memberof Input-input
    */
    'isOptional': boolean;
    /**
    * This attribute specifies that an input field must be filled out before submitting the form
    * @requires
    * @ignore
    * @memberof Input-input
    */
    'isRequired': boolean;
    /**
    * To set label of the dxp-input
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'label': any;
    /**
    * To Specifie the color if password strength is medium
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'mediumPasswordColor': string;
    /**
    * To allow the regular expression of medium password
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'mediumPasswordPattern': any;
    /**
    * To allow minimum character in the dxp-input-password, default value is 0
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'minLength': number;
    /**
    * To allow regular expression for the password criteria
    * @requires
    * @type {*}
    * @memberof Input-password
    */
    'passwordCriteria': any;
    /**
    * It specifies that strength of the password
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'passwordStrength': string;
    /**
    * This attribute specifies a hint that describes the expected value of an input field (a sample value or a short description of the format).
    * @required
    * @type {*}
    * @memberof Input-password
    */
    'placeholder': any;
    /**
    * It specifies that whether need to show progress bar or not
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'progressBar': boolean;
    /**
    * It specifies that whether need to show progress bar or not
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'showCriteria': boolean;
    /**
    * It specifies the  tooltip visibility(show or hide)
    * @memberof Input-password
    */
    'showTooltip': boolean;
    /**
    * color code for password strength
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'statusColor': string;
    /**
    * To allow the regular expression of strong password
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'strongPasswordPattern': any;
    /**
    * To define the accessibility text when foucs is on success icon
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'successIconAccessibilityText': string;
    /**
    * To define the validation message if dxp-input is set to required
    * @requires
    * @type {*}
    * @memberof Input-password
    */
    'unmaskValue': boolean;
    /**
    * valid count of the password criteria
    * @requires ignore
    * @memberof Input-password
    */
    'validCount': number;
    /**
    * To unmask password value in dxp-input
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'validationMessage': string;
    /**
    * Value of the password
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'value': string;
    /**
    * To Specifie the color if password strength is weak
    * @requires
    * @ignore
    * @memberof Input-password
    */
    'weakPasswordColor': string;
  }
  interface DxpLanguageItem {
    /**
    * Accessibility text
    */
    'accessibilityText': any;
    /**
    * change of language
    */
    'handleChange': () => Promise<void>;
    /**
    * display language
    */
    'inLanguage': any;
    /**
    * language in plain English
    */
    'language': any;
    /**
    * URL for particular language
    */
    'link': any;
    /**
    * locale for the language
    */
    'locale': any;
    /**
    * selected language
    */
    'selectedLanguage': boolean;
  }
  interface DxpLanguageSelector {
    /**
    * url for language json
    */
    'apiUrl': any;
    /**
    * object to hold language locales passed as json array
    */
    'languageLocales': any;
  }
  interface DxpLine {
    /**
    * Prop for backgroundColor
    */
    'backgroundColor': string;
    /**
    * Prop for borderColor
    */
    'borderColor': string;
    /**
    * Prop for borderWidth
    */
    'borderWidth': number;
    /**
    * Prop for customClass
    */
    'customClass': string;
    /**
    * height for line
    */
    'height': number;
    /**
    * Prop for height for lg device
    */
    'heightLg': number;
    /**
    * Prop for height md device
    */
    'heightMd': number;
    /**
    * Prop for height for sm device
    */
    'heightSm': number;
    /**
    * Prop for height for xl device
    */
    'heightXl': number;
    /**
    * Prop for line-type
    */
    'type': string;
  }
  interface DxpLocationSearchBanner {
    /**
    * Alt/title text for image. Also for SEO.
    */
    'alt': string;
    /**
    * api-key for url to search offer
    */
    'apiKey': any;
    /**
    * aria-label for image link. Also for accessibility.
    */
    'ariaLabel': string;
    /**
    * Location search banner data for script support
    */
    'bannerData': any;
    /**
    * bannerText
    */
    'bannerTitle': string;
    /**
    * description
    */
    'descriptionText': string;
    /**
    * Eyeborw title
    */
    'eyebrowTitle': string;
    /**
    * Focal point of XL images
    */
    'focalPoint': any;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * placeholder text for search box
    */
    'placeholder': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * text to show in the CTA
    */
    'searchBtnText': string;
    /**
    * CTA type to show the link OR button
    */
    'searchBtnType': any;
    /**
    * CTA input field type
    */
    'searchInputType': any;
    /**
    * searchType for search offer by cities,region ex
    */
    'searchType': any;
    /**
    * Image path to display the banner image
    */
    'src': string;
  }
  interface DxpLocationSelector {
    /**
    * api-key for url to search offer
    */
    'apiKey': any;
    /**
    * Method to clear the searchbox value
    */
    'clearSearchBox': () => Promise<void>;
    /**
    * placeholder text for search box
    */
    'placeholder': string;
    /**
    * search location data for script support
    */
    'searchLocationData': any;
    /**
    * searchType for search offer by cities,region ex
    */
    'searchType': any;
  }
  interface DxpLogo {
    /**
    * alt text for logo
    */
    'alt': string;
    /**
    * accessibility text for logo
    */
    'ariaLabel': string;
    /**
    * url to link to when logo clicked
    */
    'href': string;
    /**
    * title text for logo
    */
    'logoTitle': string;
    /**
    * schema type for SEO
    */
    'schemaType': string;
    /**
    * logo img src
    */
    'src': string;
    /**
    * logo img src when small viewport
    */
    'srcSm': string;
    /**
    * window to target for link
    */
    'target': boolean;
  }
  interface DxpMessage {
    /**
    * show/hide close botton flag
    */
    'hideCloseBtn': boolean;
    /**
    * object to hold multiple message texts that can be passed as json array
    */
    'messageTexts': any;
    /**
    * severity of the message - warn, info, error, success, general
    */
    'severity': 'warn' | 'info' | 'error' | 'success' | 'general';
  }
  interface DxpMessageList {
    /**
    * object to hold multiple message blocks that can be passed as json array
    */
    'messages': any;
  }
  interface DxpMessageText {
    /**
    * summary text of the message displayed in bold
    */
    'text': string;
  }
  interface DxpModal {
    /**
    * accessibility text for primary footer button
    */
    'accessibilityTextFooterPrimary': string;
    /**
    * accessibility text for secondary footer button
    */
    'accessibilityTextFooterSecondary': string;
    /**
    * button position
    */
    'buttonPosition': 'left' | 'right' | 'center';
    /**
    * Method to close modal
    */
    'closeModal': () => Promise<void>;
    /**
    * close modal on Esc keypress
    */
    'closeOnEscKey': boolean;
    /**
    * close modal on click outside of modal
    */
    'closeOnOutsideClick': boolean;
    /**
    * to show demo for modal
    */
    'demo': boolean;
    /**
    * to determine footer type of modal
    */
    'footerType': string;
    /**
    * header logo configurations for modal
    */
    'headerLogo': any;
    /**
    * configurable property for cancel button
    */
    'isCancelButtonRequire': boolean;
    /**
    * configurable property for close button
    */
    'isCloseButtonRequired': boolean;
    /**
    * make modal work as a sidebar
    */
    'isSidebar': boolean;
    /**
    * title for footer primary button
    */
    'linkTitleFooterPrimary': string;
    /**
    * title for footer secondary button
    */
    'linkTitleFooterSecondary': string;
    /**
    * link to target when footer primary button is clicked
    */
    'linkUrlFooterPrimary': string;
    /**
    * link to target when footer secondary button is clicked
    */
    'linkUrlFooterSecondary': string;
    /**
    * description text of modal
    */
    'modalDescription': string;
    /**
    * Subtitle text of modal
    */
    'modalSubtitle': string;
    /**
    * Title text of modal
    */
    'modalTitle': string;
    /**
    * flag to determine url to be open in new tab for primary footer button
    */
    'openInNewTabFooterPrimary': boolean;
    /**
    * flag to determine url to be open in new tab for primary footer button
    */
    'openInNewTabFooterSecondary': boolean;
    /**
    * Method to open modal
    */
    'openModal': () => Promise<void>;
    /**
    * Footer primary button text
    */
    'primaryButtonText': string;
    /**
    * to set modal's right space
    */
    'right': number;
    /**
    * Footer secondary button text
    */
    'secondaryButtonText': string;
    /**
    * configure sidebar position
    */
    'sidebarPosition': 'left' | 'right';
    /**
    * to set modal's top space
    */
    'top': number;
    /**
    * to set modal width
    */
    'width': number;
  }
  interface DxpNav {
    /**
    * api url for navigation
    */
    'apiUrl': string;
    /**
    * the child element
    */
    'currentChild': HTMLElement;
    /**
    * identify currentNav from menu container
    */
    'currentNav': HTMLElement;
    /**
    * Listener that looks for navigation item object to be assigned/changed externally
    */
    'navData': any;
    /**
    * background image for menu container
    */
    'overlayBgImage': string;
  }
  interface DxpNavGroup {
    /**
    * Accessibility. Screen readers will red this.
    */
    'accessibilityText': string;
    /**
    * Listener that looks for content list items object to be assigned/changed externally
    */
    'child': any;
    /**
    * set active link manually (for angular route)
    */
    'isActive': boolean;
    /**
    * Is nested menu items
    */
    'isNestedMenu': boolean;
    /**
    * Link title (Display on mouse hover)
    */
    'linkTitle': string;
    /**
    * link url
    */
    'menuRouteLink': string;
    /**
    * Navigation text will display in browser
    */
    'navigationTitle': string;
  }
  interface DxpNavItem {
    /**
    * Accessibility. Screen readers will red this.
    */
    'accessibilityText': string;
    /**
    * Alternative text for menu icon image
    */
    'altText': string;
    /**
    * Nav sub items
    */
    'child': any;
    /**
    * Is nested menu items
    */
    'isNestedMenu': boolean;
    /**
    * Link title (Display on mouse hover)
    */
    'linkTitle': string;
    /**
    * link url
    */
    'menuRouteLink': string;
    /**
    * Navigation text will display in browser
    */
    'navigationTitle': string;
    /**
    * url of menu icon image
    */
    'src': string;
  }
  interface DxpNavItemContent {
    /**
    * description from API
    */
    'description': string;
    /**
    * description while authoring
    */
    'descriptionText': string;
    /**
    * link title properties
    */
    'linkTitle': string;
    /**
    * menu route link properties
    */
    'menuRouteLink': string;
    /**
    * navigation title properties
    */
    'navigationTitle': string;
    /**
    * prop to configure link target
    */
    'openInNewTab': boolean;
  }
  interface DxpNavMenu {
    /**
    * Accessibility. Screen readers will read this.
    */
    'accessibilityText': string;
    /**
    * group container(secondary navigation)
    */
    'child': any;
    /**
    * title will display in browser
    */
    'linkTitle': string;
    /**
    * title will display in browser
    */
    'navigationTitle': string;
    /**
    * background image for menu container
    */
    'overlayBgImage': string;
    /**
    * Listener that looks for quick link items object to be assigned/changed externally
    */
    'quickLinks': any;
  }
  interface DxpNavSubItem {
    /**
    * Accessibility. Screen readers will red this.
    */
    'accessibilityText': string;
    /**
    * Link title (Display on mouse hover)
    */
    'linkTitle': string;
    /**
    * url of menu icon image
    */
    'menuIcon': string;
    /**
    * link url
    */
    'menuRouteLink': string;
    /**
    * Navigation text will display in browser
    */
    'navigationTitle': string;
  }
  interface DxpNavigation {
    /**
    * api url for navigation
    */
    'apiUrl': string;
    /**
    * Navigation items
    */
    'navData': any;
  }
  interface DxpNavigationBanner {
    /**
    * apply default indentation for navigation banner
    */
    'applyIndentation': boolean;
    /**
    * cta data for child components
    */
    'ctaData': any;
    /**
    * dropdown data
    */
    'dropDownData': any;
    /**
    * eyebrow title
    */
    'eyebrowTitle': string;
    /**
    * navigation title
    */
    'navTitle': string;
    /**
    * dropdown placeholder
    */
    'placeholder': string;
    /**
    * navigation sub title
    */
    'subTitle': string;
    /**
    * navigation banner class for half width
    */
    'verticalContentBanner': boolean;
  }
  interface DxpOverlay {
    /**
    * to show demo for modal
    */
    'demo': boolean;
    /**
    * to switch the state of overlay
    */
    'toggleState': (state: boolean) => Promise<void>;
  }
  interface DxpPageHeader {
    /**
    * More action button list
    */
    'appMenuItemsList': any[];
    /**
    * More actions items slot
    */
    'hasActionItems': boolean;
    /**
    * App menu available or not
    */
    'hasAppMenu': boolean;
    /**
    * Search box slot
    */
    'hasSearchBox': boolean;
    /**
    * Page title
    */
    'pageTitle': string;
  }
  interface DxpPagination {
    /**
    * and text
    */
    'andText': string;
    /**
    * Index of currently showing page
    */
    'currentPageIndex': number;
    /**
    * display caption text
    */
    'displayText': string;
    /**
    * first button label
    */
    'firstButtonLabel': string;
    /**
    * Flag to hide pagination if single page present
    */
    'hideWhenSinglePage': boolean;
    /**
    * Accessibility text for pagination input
    */
    'inputAccessibilityText': string;
    /**
    * last button label
    */
    'lastButtonLabel': string;
    /**
    * next button label
    */
    'nextButtonLabel': string;
    /**
    * of text
    */
    'ofText': string;
    /**
    * page text
    */
    'pageText': string;
    /**
    * Pagination position
    */
    'position': 'left' | 'center' | 'right';
    /**
    * previous button label
    */
    'previousButtonLabel': string;
    /**
    * Total number of records
    */
    'totalUnits': number;
    /**
    * Number of records per page
    */
    'unitsPerPage': number;
    /**
    * Pagination input validation message
    */
    'validationMessage': string;
    /**
    * Pagination width
    */
    'width': string;
  }
  interface DxpPanelMenu {
    /**
    * Enable adaptive or fixed width designs
    */
    'fixedWidth': boolean;
    /**
    * Enable icon only labels on mobile devices
    */
    'iconOnlySm': boolean;
    /**
    * Nested menu elements
    */
    'menuItems': {
      // tslint:disable-next-line: completed-docs
      menuTitle: string,
      // tslint:disable-next-line: completed-docs
      active?: boolean,
      // tslint:disable-next-line: completed-docs
      content: string,
      // tslint:disable-next-line: completed-docs
      alt?: string,
      // tslint:disable-next-line: completed-docs
      menuIconSrc?: string,
      // tslint:disable-next-line: completed-docs
      subMenu?: any,
      // tslint:disable-next-line: completed-docs
      progressBar?: boolean,
      // tslint:disable-next-line: completed-docs
      currentValue?: number,
      // tslint:disable-next-line: completed-docs
      maxValue?: number
      // tslint:disable-next-line: completed-docs
      progressColor?: string
    }[];
    /**
    * Following method will be called by child items to register items in sub-menus so that control group can be created
    */
    'registerMenu': () => Promise<void>;
  }
  interface DxpPanelSubMenu {
    /**
    * panel item status
    */
    'active': boolean;
    /**
    * alt text for panel icon
    */
    'alt': string;
    /**
    * sub-menu item contents
    */
    'content': string;
    /**
    * current value for progress  (for both)
    */
    'currentValue': number;
    /**
    * maximum value for progress  (for both)
    */
    'maxValue': number;
    /**
    * image url for panel icon
    */
    'menuIconSrc': string;
    /**
    * sub-panel item title
    */
    'menuTitle': string;
    /**
    * It specifies that whether need to show progress bar or not
    */
    'progressBar': boolean;
    /**
    * change color of progress  (for both)
    */
    'progressColor': string;
    /**
    * sub-menu - coma seperated string for sub-menu list for active menu panel
    */
    'subMenu': any;
  }
  interface DxpPills {
    /**
    * Prop for background color
    */
    'backgroundColor': string;
    /**
    * Prop for border color
    */
    'borderColor': string;
    /**
    * Prop for text color
    */
    'color': string;
    /**
    * property to whether show x button or now
    */
    'removable': boolean;
    /**
    * input text
    */
    'text': string;
  }
  interface DxpProgressbar {
    /**
    * to define custom text for accessibility
    */
    'accessibilityText': string;
    /**
    * if percentage to be shown in tooltip (for linear)
    */
    'asTooltip': boolean;
    /**
    * change color of progress background (for both)
    */
    'backgroundColor': string;
    /**
    * define background width of progress (for both)
    */
    'backgroundWidth': number;
    /**
    * current value of progress  (for both)
    */
    'currentValue': number;
    /**
    * define fontColor  (for both)
    */
    'fontColor': string;
    /**
    * If description should be shown or not  (for both)
    */
    'haveDescription': boolean;
    /**
    * define height  (for linear)
    */
    'height': string;
    /**
    * maximum value for progress  (for both)
    */
    'maxValue': number;
    /**
    * minimum value for progress  (for both)
    */
    'minValue': number;
    /**
    * move percentage text to right of progress  (for linear)
    */
    'percentRight': boolean;
    /**
    * change color of progress  (for both)
    */
    'progressColor': string;
    /**
    * description to show after progress count  (for both)
    */
    'progressDescription': string;
    /**
    * define width of progress  (for both)
    */
    'progressWidth': number;
    /**
    * show percentage instead of XX/XX type  (for both)
    */
    'showPercentage': boolean;
    /**
    * define if corner should be square instead of round
    */
    'squareCorner': boolean;
    /**
    * type of progress
    */
    'type': 'radial' | 'linear';
    /**
    * define width  (for both)
    */
    'width': string;
  }
  interface DxpProgressspinner {
    /**
    * Prop for animationDuration
    */
    'animationDuration': number;
    /**
    * Prop for fill
    */
    'fill': string;
    /**
    * Prop for fill radius
    */
    'radius': number;
    /**
    * Prop for strokeColor
    */
    'strokeColor': string;
    /**
    * Prop for strokeWidth
    */
    'strokeWidth': number;
  }
  interface DxpPullQuote {
    /**
    * Alt/title text for image. Also for SEO.
    */
    'alt': string;
    /**
    * aria-label for image link. Also for accessibility.
    */
    'ariaLabel': string;
    /**
    * name of the  author
    */
    'author': string;
    /**
    * cta data for child components
    */
    'ctaData': any;
    /**
    * eyebrow text for dxp-pull-quote
    */
    'eyebrowTitle': string;
    /**
    * Array of coordinates to set the focal point of the image. values can be passed as an array of coordinates to set the focal point of the image on small sized devices.[up, down, left, right]
    */
    'focalPoint': any;
    /**
    * focal point for large devices
    */
    'focalPointLg': any;
    /**
    * focal point for medium devices
    */
    'focalPointMd': any;
    /**
    * Link destination when clicked.
    */
    'href': string;
    /**
    * Text to be shown on overlay
    */
    'imageTitle': string;
    /**
    * Link target.  Set to true to open in an new window.
    */
    'openInNewTab': boolean;
    /**
    * profile of the author
    */
    'profile': string;
    /**
    * pullQuoteData
    */
    'pullQuoteData': any;
    /**
    * quote given by author
    */
    'quote': string;
    /**
    * whether image should use its size or be responsive
    */
    'responsive': boolean;
    /**
    * Path for the image to display
    */
    'src': string;
    /**
    * source lg
    */
    'srcLg': string;
    /**
    * source md
    */
    'srcMd': string;
    /**
    * title text for dxp-pull-quote
    */
    'titleText': string;
  }
  interface DxpRadioButton {
    /**
    * radiobutton alignment
    */
    'alignment': string;
    /**
    * radiobutton checked
    */
    'checked': boolean;
    /**
    * radiobutton checked
    */
    'isDisabled': boolean;
    /**
    * radiobutton group name
    */
    'name': string;
    /**
    * radio-button key
    */
    'radioKey': string;
    /**
    * radiobutton value
    */
    'radioValue': string;
  }
  interface DxpRadioGroup {
    /**
    * radio button alignment
    */
    'alignment': 'vertical' | 'horizontal';
    /**
    * radio button content id
    */
    'contentId': string;
    /**
    * getCheckedStatus method adds the show-error class to radio buttons if radio button is not selected
    */
    'getCheckedStatus': () => Promise<void>;
    /**
    * Defines if the field is disabled
    */
    'isDisabled': boolean;
    /**
    * radio button group label
    */
    'label': string;
    /**
    * radio button name
    */
    'name': string;
    /**
    * object to hold multiple content list items blocks that can be passed as json array
    */
    'radioBtn': any;
    /**
    * Defines if the field is required
    */
    'required': boolean;
    /**
    * Error message will appear if none of radio is selected
    */
    'validationMessage': string;
  }
  interface DxpRangeSlider {
    /**
    * accessibility text
    */
    'accessibilityText': string;
    /**
    * maximum value
    */
    'maxValue': number;
    /**
    * minimum value
    */
    'minValue': number;
    /**
    * range of slider
    */
    'range': any;
    /**
    * single or multi-thumb slider
    */
    'type': string;
    /**
    * value of range
    */
    'value': number;
  }
  interface DxpRegion {
    /**
    * region default site link with description
    */
    'description': string;
    /**
    * expand region item by default
    */
    'isOpen': boolean;
    /**
    * region name
    */
    'name': string;
  }
  interface DxpRegionSelector {
    /**
    * url of api that returns list of websites and locales
    */
    'apiUrl': string;
    /**
    * text be displayed on button
    */
    'buttonText': string;
    /**
    * cookie expiry time (in days)
    */
    'cookieExpiryTime': number;
    /**
    * country language page link
    */
    'countryLanguagePageLink': string;
    /**
    * other country or region option text
    */
    'countryLanguagePageText': string;
    /**
    * eyebrow text for region selector
    */
    'eyebrowText': string;
    /**
    * list of websites in the request origin locale
    */
    'siteList': any;
    /**
    * title text for region selector
    */
    'titleText': string;
  }
  interface DxpSearch {
    /**
    * cfq - suggester config object Context Filter Query
    */
    'cfq': string;
    /**
    * cfqLocale - to add to cfq on locale change
    */
    'cfqLocale': string;
    /**
    * Method to clear the searchbox value
    */
    'clearSearchBox': () => Promise<void>;
    /**
    * Method to hide searchbox
    */
    'closeSearchBox': () => Promise<void>;
    /**
    * placeholder for search input
    */
    'placeholder': string;
    /**
    * resultPageExtension - search result page extension without .(dot)
    */
    'resultPageExtension': string;
    /**
    * resultPageUrl - search result page url
    */
    'resultPageUrl': string;
    /**
    * searchBoxSize - defines the height of search box
    */
    'searchBoxSize': 'sm' | 'md' | 'lg';
    /**
    * Method to show searchbox
    */
    'searchBoxToggle': () => Promise<void>;
    /**
    * searchParamKey - search url parameter key
    */
    'searchParamKey': string;
    /**
    * searchType - search render type, can be advance or simple
    */
    'searchType': 'simple' | 'advance' | 'homepage';
    /**
    * showSuggestions - search url parameter key
    */
    'showSuggestions': boolean;
    /**
    * suggestApiUrl - API for suggest collection
    */
    'suggestApiUrl': string;
    /**
    * suggestCollection - suggest collection name
    */
    'suggestCollection': string;
    /**
    * suggestCount - suggester config object count
    */
    'suggestCount': number;
    /**
    * suggestDictionary - suggester config object dictionary
    */
    'suggestDictionary': string;
  }
  interface DxpSearchResult {
    /**
    * Method to emit the analytics data after performing search
    */
    'analyticSearchResult': () => Promise<void>;
    /**
    * cfq - suggester config object Context Filter Query
    */
    'cfq': string;
    /**
    * cfqLocale - to add to cfq on locale change
    */
    'cfqLocale': string;
    /**
    * descriptionLength - search result description character length
    */
    'descriptionLength': number;
    /**
    * Error Message
    */
    'errorMessage': any;
    /**
    * highlightFields - search config object highlighting field
    */
    'highlightFields': string;
    /**
    * placeholder text for search box
    */
    'placeholder': string;
    /**
    * promotionsData - to display promotions links
    */
    'promotionsData': any;
    /**
    * promotionsKeywords - to display promotions links based on promotions keywords
    */
    'promotionsKeywords': string;
    /**
    * rows - search config object rows
    */
    'rows': number;
    /**
    * searchApiUrl - API for search
    */
    'searchApiUrl': string;
    /**
    * searchCollection - search collection name
    */
    'searchCollection': string;
    /**
    * searchFl - search config object fl
    */
    'searchFl': string;
    /**
    * searchParamKey - search url parameter key
    */
    'searchParamKey': string;
    /**
    * Public method used in dxp-search-result-item as well
    */
    'setValue': (item: any) => Promise<void>;
    /**
    * showPromotions - to show promotions links before search results
    */
    'showPromotions': boolean;
    /**
    * sortingField - search config object sorting field
    */
    'sortingField': string;
    /**
    * start - search config object start page
    */
    'start': number;
    /**
    * suggestApiUrl - API for suggest collection
    */
    'suggestApiUrl': string;
    /**
    * suggestCollection - suggest collection name
    */
    'suggestCollection': string;
    /**
    * suggestCount - suggester config object count
    */
    'suggestCount': string;
    /**
    * suggestDictionary - suggester config object dictionary
    */
    'suggestDictionary': string;
    /**
    * tags - to filter search results data based on specific tags
    */
    'tags': string;
    /**
    * titleLength - search result title character length
    */
    'titleLength': number;
    /**
    * text to be shown on view more button
    */
    'viewMoreText': string;
  }
  interface DxpSearchbox {
    /**
    * cfq - suggester config object Context Filter Query
    */
    'cfq': string;
    /**
    * cfqLocale - to add to cfq on locale change
    */
    'cfqLocale': string;
    /**
    * errorText - contains error message to display at bottom
    */
    'errorText': any;
    /**
    * noResultFlag - to hold value, in no search results
    */
    'noResultFlag': string;
    /**
    * placeholder text for search box
    */
    'placeholder': string;
    /**
    * holds total result
    */
    'resultCount': any;
    /**
    * searchedTerm - to hold the search value
    */
    'searchedTerm': string;
    /**
    * searchValue - to hold the search value
    */
    'searchedText': string;
    /**
    * suggestApiUrl - API for suggest collection
    */
    'suggestApiUrl': string;
    /**
    * suggestCollection - suggest collection name
    */
    'suggestCollection': string;
    /**
    * suggestCount - suggester config object count
    */
    'suggestCount': number;
    /**
    * suggestDictionary - suggester config object dictionary
    */
    'suggestDictionary': string;
  }
  interface DxpSelect {
    /**
    * selector
    */
    'dataList': any;
    /**
    * display fix height select
    */
    'fixHeight': boolean;
    /**
    * selected index
    */
    'selectedValue': any;
    /**
    * selector
    */
    'selector': string;
    /**
    * use index as value
    */
    'useIndexAsValue': boolean;
  }
  interface DxpSelectorMenu {
    /**
    * accessibility text for the searchbox
    */
    'accessibilityText': any;
    /**
    * shows additional value for option with details selector type
    */
    'additionalValue': string;
    /**
    * apiUrl - headers for API url
    */
    'apiHeaders': string;
    /**
    * apiUrl - suggest data API url
    */
    'apiUrl': string;
    /**
    * set autofocus for searchable type component
    */
    'autofocus': boolean;
    /**
    * set dataSourceKeyName for configurable key name while pass data
    */
    'dataSourceKeyName': string;
    /**
    * state of button
    */
    'disabled': boolean;
    /**
    * enable/disable lazy loading for the content loaded in the dropdown.
    */
    'enableLazyLoading': boolean;
    /**
    * hides the loader
    */
    'hideSpinner': () => Promise<void>;
    /**
    * make selector menu optional
    */
    'isOptional': boolean;
    /**
    * Array provide for the user
    */
    'items': any[];
    /**
    * label for selector menu
    */
    'label': string;
    /**
    * maximum record limit per page to enable lazy loading
    */
    'limit': any;
    /**
    * number of records key name for each api call when enableLazyLoading is true
    */
    'limitKeyName': string;
    /**
    * maximum characters allowed in the searchbox
    */
    'maxSearchCharLength': any;
    /**
    * minimum search character length
    */
    'minSearchCharLength': any;
    /**
    * page number / offset key name when enableLazyLoading is true
    */
    'offsetKeyName': string;
    /**
    * placeholder of selector menu
    */
    'placeholder': string;
    /**
    * set id attribute for selector component
    */
    'selectorId': string;
    /**
    * shows the loader overlay in the center of the dropdown.
    */
    'showSpinner': () => Promise<void>;
    /**
    * total number of pages key name when enableLazyLoading is true
    */
    'totalPagesKeyName': string;
    /**
    * method implemented in parent to to transform the data fetched from the APi
    */
    'transformData': (data: any[]) => {};
    /**
    * selector menu type
    */
    'type': string;
    /**
    * this method will be used to update isValid flag to show/hide validation message
    */
    'updateValidationState': (isValid: boolean) => Promise<void>;
    /**
    * validation message
    */
    'validationMessage': string;
    /**
    * set the value of selector menu
    */
    'value': string;
    /**
    * width of the menu box
    */
    'width': number;
  }
  interface DxpShape {
    /**
    * horizontal alignment of content in shape
    */
    'align': 'left' | 'right' | 'center';
    /**
    * background color as hexcode of shape
    */
    'backgroundColor': string;
    /**
    * background image to be used in shape
    */
    'backgroundImage': string;
    /**
    * border color of shape
    */
    'borderColor': string;
    /**
    * border style of shape
    */
    'borderStyle': 'none' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset';
    /**
    * border width of shape
    */
    'borderWidth': number;
    /**
    * custom external css class for shape
    */
    'customClass': string;
    /**
    * height of shape
    */
    'height': number;
    /**
    * opacity of background of shape as 0-1 value where 1 is opaque and 0 is full transparent
    */
    'opacity': number;
    /**
    * type of shape
    */
    'type': 'rectangle' | 'round' | 'parallelogram' | 'triangle-up' | 'triangle-down' | 'triangle-left' | 'triangle-right';
    /**
    * vertical alignment of content in shape
    */
    'verticalAlign': 'top' | 'bottom' | 'middle';
    /**
    * width of shape
    */
    'width': number;
  }
  interface DxpSidebarMenu {
    /**
    * function to collapse sidebar
    */
    'collapse': () => Promise<void>;
    /**
    * To collapse/expand sidebar menu panel
    */
    'collapseExpandSidebar': () => Promise<void>;
    /**
    * function to expnd sidebar
    */
    'expand': () => Promise<void>;
    /**
    * To display collapse in header/footer
    */
    'expandCollapseIconPosition': 'header' | 'footer';
    /**
    * prop to determine wherther to expand sidebar on hover or not
    */
    'expandOnHover': boolean;
    /**
    * sets the menu items to be display
    */
    'menuItems': any;
    /**
    * To toggle side panel collapse
    */
    'showExpandCollapseIcon': boolean;
    /**
    * To toggle side panel collapse
    */
    'showExpanded': boolean;
  }
  interface DxpSidebarMenuGroup {
    /**
    * sets the menu items to be display
    */
    'child': any;
    /**
    * to collapse sideMenu group from parent component
    */
    'collapse': () => Promise<void>;
    /**
    * to expand sideMenu group from parent component
    */
    'expand': () => Promise<void>;
    /**
    * sets logo alt
    */
    'menuAlt': string;
    /**
    * sets link for menu-logo to display
    */
    'menuHref': string;
    /**
    * sets the menu items to be display
    */
    'menuItem': any;
    /**
    * sets max height for the list of child elements inside a menu group
    */
    'menuItemsListMaxHeight': string;
    /**
    * sets route link
    */
    'menuSrc': string;
    /**
    * Navigation text will display in browser
    */
    'menuTitle': string;
    /**
    * toggle variable to display popup
    */
    'viewPopup': boolean;
  }
  interface DxpSidebarMenuItem {
    /**
    * Link target.  Set to true to open in an new window.
    */
    'openInNewTab': boolean;
    /**
    * sets logo alt
    */
    'subMenuAlt': string;
    /**
    * sets link for sub-menu-logo to display
    */
    'subMenuHref': string;
    /**
    * Navigation text will display in browser
    */
    'subMenuIcon': string;
    /**
    * sets route link
    */
    'subMenuSrc': string;
    /**
    * Navigation text will display in browser
    */
    'subMenuTitle': string;
  }
  interface DxpSiteList {
    /**
    * responsible to get data from the server
    */
    'endPointUrl': string;
    /**
    * region list
    */
    'regions': any;
  }
  interface DxpSiteMap {
    /**
    * API URL
    */
    'apiUrl': string;
    /**
    * Eyebrow title
    */
    'eyebrow': string;
    /**
    * heading of site map
    */
    'heading': string;
    /**
    * hold multiple group items block that can be passed as json array
    */
    'siteMapData': any;
  }
  interface DxpSiteMapGroup {
    /**
    * accessibility label
    */
    'accessibility': string;
    /**
    * list item text
    */
    'heading': string;
    /**
    * hyperlink
    */
    'href': string;
  }
  interface DxpSiteMapGroupItem {
    /**
    * accessibility label
    */
    'accessibility': string;
    /**
    * title text of site map group
    */
    'heading': string;
    /**
    * hyperlink
    */
    'href': string;
  }
  interface DxpSiteMapList {}
  interface DxpSiteMapListItem {
    /**
    * accessibility label
    */
    'accessibility': string;
    /**
    * list item text
    */
    'heading': string;
    /**
    * hyperlink
    */
    'href': string;
  }
  interface DxpSocialLinks {
    /**
    * orientation of icons list (horizontal/ vertical)
    */
    'orientation': 'horizontal' | 'vertical';
    /**
    * text for heading of icons list
    */
    'socialLabel': string;
    /**
    * get list of all media platforms
    */
    'socialLinksItemList': any[];
    /**
    * Social links items - to be utilized by DXP framework
    */
    'socialLinksItems': any;
    /**
    * Type of social link
    */
    'socialType': string;
  }
  interface DxpSocialLinksItem {
    /**
    * accessibility text
    */
    'alt': string;
    /**
    * link to target for icon
    */
    'href': string;
    /**
    * set target for social share window
    */
    'openWindowAs': string;
    /**
    * get content to share
    */
    'shareContent': string;
    /**
    * title of the icon
    */
    'socialTitle': string;
    /**
    * Type of social link
    */
    'socialType': string;
    /**
    * link in new tab?
    */
    'target': boolean;
    /**
    * type of social links icon
    */
    'type': string;
  }
  interface DxpStep {
    /**
    * custom icon for the step
    */
    'iconPath': string;
    /**
    * label of the step
    */
    'name': string;
    /**
    * stores the status of step
    */
    'status': 'unvisited' | 'active' | 'completed' | 'incomplete' | 'custom';
    /**
    * optional attribute which describes about the step
    */
    'stepInfo': string;
  }
  interface DxpStepTracker {
    /**
    * Steps - to be utilized by DXP framework
    */
    'steps': any;
    /**
    * alignment of step tracker based on value. true and false will render vertical and horizontal step tracker respectively
    */
    'verticalAlign': boolean;
  }
  interface DxpStickyFooter {
    /**
    * cta attributes
    */
    'cta': any;
    /**
    * footer type on component level
    */
    'footerType': string;
    /**
    * title Heading
    */
    'titleText': string;
  }
  interface DxpStickyFooterCta {
    /**
    * button style for cta
    */
    'buttonStyle': string;
    /**
    * download file name for cta
    */
    'downloadFile': string;
    /**
    * email body for cta
    */
    'emailBody': string;
    /**
    * email id for cta type email
    */
    'emailId': string;
    /**
    * email subject for cta
    */
    'emailSubject': string;
    /**
    * link text for cta
    */
    'linkText': string;
    /**
    * link type for cta
    */
    'linkType': string;
    /**
    * link url for cta
    */
    'linkUrl': string;
    /**
    * open link in new tab for cta
    */
    'openInNewTab': 'false';
    /**
    * Text for visually impaired for cta
    */
    'visuallyImpairedText': string;
  }
  interface DxpTabItem {
    /**
    * tab item status
    */
    'active': boolean;
    /**
    * alt text for tab icon
    */
    'alt': string;
    /**
    * animation status
    */
    'animationStatus': string;
    /**
    * arrow orientation
    */
    'arrowOrientation': string;
    /**
    * tab item contents
    */
    'content': string;
    /**
    * enable animation
    */
    'enableAnimation': boolean;
    /**
    * enable close
    */
    'enableClose': boolean;
    /**
    * Enable adaptive or fixed width designs
    */
    'fixedWidth': boolean;
    /**
    * Enable icon only labels on mobile devices
    */
    'iconOnlySm': boolean;
    /**
    * tab item is isDefault
    */
    'isDefault': boolean;
    /**
    * tab item is default view
    */
    'isDefaultView': boolean;
    /**
    * is default view on
    */
    'isDefaultViewOn': boolean;
    /**
    * image url for tab icon
    */
    'tabIconSrc': string;
    /**
    * tab item title
    */
    'tabTitle': string;
    /**
    * vertical align
    */
    'verticalAlign': boolean;
    /**
    * vertical content position
    */
    'verticalContentPosition': any;
  }
  interface DxpTabList {
    /**
    * tab item status
    */
    'active': boolean;
    /**
    * alt text for tab icon
    */
    'alt': string;
    /**
    * animation status
    */
    'animationStatus': string;
    /**
    * arrowOrientation
    */
    'arrowOrientation': string;
    /**
    * tab item contents
    */
    'content': string;
    /**
    * Enable adaptive or fixed width designs
    */
    'fixedWidth': boolean;
    /**
    * Enable icon only labels on mobile devices
    */
    'iconOnlySm': boolean;
    /**
    * Enable icon only labels on mobile devices
    */
    'iconSm': boolean;
    /**
    * Nested tab elements
    */
    'nestedTabs': HTMLElement[];
    /**
    * image url for tab icon
    */
    'tabIconSrc': string;
    /**
    * tab item title
    */
    'tabTitle': string;
    /**
    * vertical align
    */
    'verticalAlign': boolean;
  }
  interface DxpTable {
    /**
    * accessibility text for table
    */
    'accessibilityText': string;
    /**
    * to facilitate object support in component
    */
    'data': any;
    /**
    * responsible for heading data which needs to be visible in table head
    */
    'heading': any[];
    /**
    * responsible for number of rows and data which needs to be visible in table rows head
    */
    'rows': any[];
  }
  interface DxpTabs {
    /**
    * cta data for child components
    */
    'cta': any;
    /**
    * isCTA Present
    */
    'enableCta': boolean;
    /**
    * eyebrow text for tabs
    */
    'eyebrowText': string;
    /**
    * Enable adaptive or fixed width designs
    */
    'fixedWidth': boolean;
    /**
    * Enable icon only labels on mobile devices
    */
    'iconOnlySm': boolean;
    /**
    * Following method will be called by child items to register items in tabs so that control group can be created
    */
    'registerTab': () => Promise<void>;
    /**
    * Nested tab elements
    */
    'tabItems': {
      /** holds the title of a tab item */
      tabTitle: string,
      /** determines if a given item is active or not */
      active?: boolean,
      /** determines which tab is the default one */
      isDefault?: boolean,
      /** determines if tab is the default view */
      isDefaultView?: boolean,
      /** determines if close is enabled */
      enableClose?: boolean,
      /** determines if animation is enabled */
      enableAnimation?: boolean,
      /** holds the animation status */
      animationStatus?: boolean,
      /** holds the content of a tab item */
      content: string,
      /** holds the alt text for a tab title */
      alt?: string,
      /** holds the link of icon for tab item title */
      tabIconSrc?: string }[];
      /**
      * Tabs Description
      */
      'tabsDescription': string;
      /**
      * Tabs Title
      */
      'tabsTitle': string;
      /**
      * Enable vertical alignment of tabs
      */
      'verticalAlign': boolean;
      /**
      * vertical content position
      */
      'verticalContentPosition': 'top' | 'bottom' | 'accordion';
    }
    interface DxpTagInput {
      /**
      * apiUrl - headers for API url
      */
      'apiHeaders': string;
      /**
      * apiUrl - suggest data API url
      */
      'apiUrl': string;
      /**
      * dataKey - key which contain API data
      */
      'dataKey': string;
      /**
      * groupByField - to group the objects data
      */
      'groupByField': string;
      /**
      * keysToDisplay - keys to display into suggestion list
      */
      'keysToDisplay': string;
      /**
      * input placeholder - to display the place holder text when input is empty
      */
      'placeholder': string;
      /**
      * tagsData - to hold tagsData
      */
      'tagsData': any;
    }
    interface DxpTblRow {}
    interface DxpTextarea {
      /**
      * textarea cols - to change the width of the textarea
      */
      'cols': number;
      /**
      * To make textarea disabled
      */
      'disabled': boolean;
      /**
      * To make textarea optional
      */
      'isOptional': boolean;
      /**
      * textarea label - to display the label text
      */
      'label': string;
      /**
      * To allow maximum character in the dxp-textarea, default value is 100
      */
      'maxLength': number;
      /**
      * To allow maximum character in the dxp-textarea, default value is 100
      */
      'minLength': number;
      /**
      * To allow textarea resizing
      */
      'nonResizable': boolean;
      /**
      * textarea placeholder - to display the place holder text when textarea is empty
      */
      'placeholder': string;
      /**
      * textarea required - to make the field like label and value mandatory and display error message
      */
      'required': boolean;
      /**
      * textarea rows - to change the height of the textarea
      */
      'rows': number;
      /**
      * textarea validationMessage - to display the validation message text
      */
      'validationMessage': string;
      /**
      * textarea value - to display the value text
      */
      'value': string;
      /**
      * textarea rows - to change the height of the textarea
      */
      'width': number;
    }
    interface DxpTile {
      /**
      * Auto play video
      */
      'autoPlay': boolean;
      /**
      * background type for regular banner
      */
      'backgroundType': 'image-background' | 'video-background';
      /**
      * text for badge
      */
      'badgeText': string;
      /**
      * cta for tile
      */
      'ctaListData': any;
      /**
      * is description for square tile
      */
      'description': string;
      /**
      * disable video controls
      */
      'disableControls': boolean;
      /**
      * eyebrow title
      */
      'eyebrowTitle': string;
      /**
      * Focal point of XL images
      */
      'focalPoint': any;
      /**
      * focal point for large devices
      */
      'focalPointLg': any;
      /**
      * focal point for medium devices
      */
      'focalPointMd': any;
      /**
      * href for tile component
      */
      'href': string;
      /**
      * icon type for header video
      */
      'iconType': 'light' | 'dark';
      /**
      * check if tile is square
      */
      'isSquare': boolean;
      /**
      * Link target.  Set to true to open in an new window.
      */
      'openInNewTab': boolean;
      /**
      * whether image should use its size or be responsive
      */
      'responsive': boolean;
      /**
      * Path for the Background image and video to display
      */
      'src': string;
      /**
      * source lg
      */
      'srcLg': string;
      /**
      * source md
      */
      'srcMd': string;
      /**
      * poster link Of video
      */
      'srcPoster': string;
      /**
      * title of caption to be shown over the image
      */
      'tileCaption': string;
      /**
      * description of video
      */
      'videoDescription': string;
      /**
      * name of video
      */
      'videoName': string;
      /**
      * video type like youtube, youku, akamai etc
      */
      'videoType': string;
      /**
      * video first published date
      */
      'videoUploadDate': string;
    }
    interface DxpTileGrid {
      /**
      * cta for tile grid
      */
      'ctaListData': any;
      /**
      * class to be applied for header alignment
      */
      'headerAlignment': 'left' | 'right' | 'center';
      /**
      * href for tile component
      */
      'href': string;
      /**
      * check if tile is square
      */
      'isSquare': boolean;
      /**
      * view all cta data for tile grid components
      */
      'tileGridCta': any;
      /**
      * description to be shown in the header of tile grid
      */
      'tileGridDescription': string;
      /**
      * eyebrow text to be shown in the header of tile grid
      */
      'tileGridEyebrowText': string;
      /**
      * Prop for the tile grid text
      */
      'tileGridTitle': string;
      /**
      * json data for tile
      */
      'tileListData': any;
    }
    interface DxpTimer {
      /**
      * Display direction of the timer : 'horizontal' || 'vertical'
      */
      'displayDirection': 'horizontal' | 'vertical';
      /**
      * End Time : ISO 8601 standard timer end time, complete with time zone offset (YYYY-MM-DDThh:mm:ssTZD)
      */
      'endTime': any;
      /**
      * Max Time Unit : months || days || hours || minutes || seconds
      */
      'maxUnit': 'months' | 'days' | 'hours' | 'minutes' | 'seconds' | 'milliseconds';
      /**
      * Min Time Unit : months || days || hours || minutes || seconds
      */
      'minUnit': 'months' | 'days' | 'hours' | 'minutes' | 'seconds' | 'milliseconds';
      /**
      * Boolean: stop timer at zero
      */
      'stopAtZero': boolean;
      /**
      * Set timer size as large or small
      */
      'timerSize': 'large' | 'small';
      /**
      * Timer type : 'countdown' || 'stopwatch' || 'timer'
      */
      'timerType': 'countdown' | 'stopwatch' | 'timer';
    }
    interface DxpToggleSwitch {
      /**
      * toggle on/off status
      */
      'checked': boolean;
      /**
      * description text for toggle
      */
      'description': string;
      /**
      * toggle active/inactive status
      */
      'disabled': boolean;
      /**
      * label for toggle
      */
      'label': string;
      /**
      * label orientation for toggle
      */
      'labelPosition': 'left' | 'right';
      /**
      * value for toggle
      */
      'value': string;
    }
    interface DxpTooltip {
      /**
      * tool tip content
      */
      'content': string;
      /**
      * Create tooltip
      */
      'createTooltip': () => Promise<void>;
      /**
      * Destroy tooltip
      */
      'destroyTooltip': () => Promise<void>;
      /**
      * Method to open modal
      */
      'hideTooltip': () => Promise<void>;
      /**
      * is used as nested element or document level element
      */
      'insideShadow': boolean;
      /**
      * placement of tooltip
      */
      'placement': 'top' | 'top-right' | 'top-left' |
      'right' | 'right-top' | 'right-bottom' |
      'bottom' | 'bottom-right' | 'bottom-left' |
      'left' | 'left-top' | 'left-bottom';
      /**
      * host Element ID
      */
      'selectorId': string;
      /**
      * Method to open modal
      */
      'showTooltip': () => Promise<void>;
      /**
      * Method to open modal
      */
      'toggleTooltip': () => Promise<void>;
      /**
      * Title of tooltip
      */
      'tooltipTitle': string;
      /**
      * comma separated list of event to trigger tooltip on host Element
      */
      'trigger': string;
    }
    interface DxpTwitterBanner {
      /**
      * sets the handle value for fetching the corresponding the tweets
      */
      'handle': string;
      /**
      * handle type can be either screen name or hash tag
      */
      'handleType': string;
      /**
      * Sets the hash tag for fetching corresponding tweets
      */
      'hashtag': any;
      /**
      * Sets the maximum number of tweets to be shown
      */
      'maxCount': number;
      /**
      * Sets the image link to the twitter account
      */
      'src': string;
      /**
      * window to target for link
      */
      'target': string;
      /**
      * Sets Twitter Tweets URL
      */
      'twitterApiEndPoint': string;
      /**
      * Sets Twitter Domain URL
      */
      'twitterUrl': string;
    }
    interface DxpVcard {
      /**
      * is this card favourite ?
      */
      'additionalInfo': string;
      /**
      * description of card
      */
      'cardDescription': string;
      /**
      * is this card favourite ?
      */
      'cardFavorited': boolean;
      /**
      * title of card
      */
      'cardTitle': string;
      /**
      * type of card
      */
      'cardType': string;
      /**
      * view of card
      */
      'cardView': 'tile-view' | 'list-view';
      /**
      * Card CTA Button link
      */
      'ctaButtonLink': string;
      /**
      * Card CTA Button text
      */
      'ctaButtonText': string;
      /**
      * Card CTA Button
      */
      'enableCardButton': boolean;
      /**
      * Favorite icon show/hide
      */
      'enableCardFavIcon': boolean;
      /**
      * Create More action button
      */
      'enableMoreOptions': boolean;
      /**
      * Status text enable/disable
      */
      'enableStatusText': boolean;
      /**
      * Favorite/Unfavorite Item
      */
      'favoriteCard': (event: any) => Promise<void>;
      /**
      * Hide More Options Container on button click
      */
      'hideMoreOptions': () => Promise<void>;
      /**
      * type of card icon
      */
      'icon': string;
      /**
      * type of card icon
      */
      'iconSprite': 'icon-sprite' | 'icons-sprite';
      /**
      * More action button list
      */
      'moreOptionList': any[];
      /**
      * border color of an element
      */
      'ribbonColor': string;
      /**
      * Open More Options Container
      */
      'showMoreOptions': () => Promise<void>;
    }
    interface DxpVideo {
      /**
      * video auto play property
      */
      'autoplay': boolean;
      /**
      * custom mute button in case of disabled controls for HTML5 video
      */
      'customMuteButton': boolean;
      /**
      * custom mute button position
      */
      'customMuteButtonPosition': 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
      /**
      * disable video controls
      */
      'disableControls': boolean;
      /**
      * display full height video
      */
      'fullHeight': boolean;
      /**
      * video play icon type e.g light, dark
      */
      'iconType': 'dark' | 'light';
      /**
      * video mute unmute control property
      */
      'muted': boolean;
      /**
      * to call pause from outside for video hosted internally
      */
      'pauseVideo': () => Promise<void>;
      /**
      * to call play from outside for video hosted internally
      */
      'playVideo': () => Promise<void>;
      /**
      * video poster/thumbnail
      */
      'srcPoster': string;
      /**
      * video source e.g youtube, youku or external source
      */
      'srcVideo': string;
      /**
      * video type e.g youtube, youku or external source
      */
      'type': string;
      /**
      * video  description
      */
      'videoDescription': string;
      /**
      * video name. This property is required for analytics and SEO
      */
      'videoName': string;
      /**
      * video first publish date.
      */
      'videoUploadDate': string;
      /**
      * video width
      */
      'width': string;
    }
  }

  declare global {


    interface HTMLDxpAccordionElement extends Components.DxpAccordion, HTMLStencilElement {}
    var HTMLDxpAccordionElement: {
      prototype: HTMLDxpAccordionElement;
      new (): HTMLDxpAccordionElement;
    };

    interface HTMLDxpAccordionItemElement extends Components.DxpAccordionItem, HTMLStencilElement {}
    var HTMLDxpAccordionItemElement: {
      prototype: HTMLDxpAccordionItemElement;
      new (): HTMLDxpAccordionItemElement;
    };

    interface HTMLDxpAudioElement extends Components.DxpAudio, HTMLStencilElement {}
    var HTMLDxpAudioElement: {
      prototype: HTMLDxpAudioElement;
      new (): HTMLDxpAudioElement;
    };

    interface HTMLDxpAutowriterElement extends Components.DxpAutowriter, HTMLStencilElement {}
    var HTMLDxpAutowriterElement: {
      prototype: HTMLDxpAutowriterElement;
      new (): HTMLDxpAutowriterElement;
    };

    interface HTMLDxpBannerElement extends Components.DxpBanner, HTMLStencilElement {}
    var HTMLDxpBannerElement: {
      prototype: HTMLDxpBannerElement;
      new (): HTMLDxpBannerElement;
    };

    interface HTMLDxpBannerBenefitsHeroElement extends Components.DxpBannerBenefitsHero, HTMLStencilElement {}
    var HTMLDxpBannerBenefitsHeroElement: {
      prototype: HTMLDxpBannerBenefitsHeroElement;
      new (): HTMLDxpBannerBenefitsHeroElement;
    };

    interface HTMLDxpBannerCarouselElement extends Components.DxpBannerCarousel, HTMLStencilElement {}
    var HTMLDxpBannerCarouselElement: {
      prototype: HTMLDxpBannerCarouselElement;
      new (): HTMLDxpBannerCarouselElement;
    };

    interface HTMLDxpBannerCtaElement extends Components.DxpBannerCta, HTMLStencilElement {}
    var HTMLDxpBannerCtaElement: {
      prototype: HTMLDxpBannerCtaElement;
      new (): HTMLDxpBannerCtaElement;
    };

    interface HTMLDxpBannerImageOverlayElement extends Components.DxpBannerImageOverlay, HTMLStencilElement {}
    var HTMLDxpBannerImageOverlayElement: {
      prototype: HTMLDxpBannerImageOverlayElement;
      new (): HTMLDxpBannerImageOverlayElement;
    };

    interface HTMLDxpBannerRegularElement extends Components.DxpBannerRegular, HTMLStencilElement {}
    var HTMLDxpBannerRegularElement: {
      prototype: HTMLDxpBannerRegularElement;
      new (): HTMLDxpBannerRegularElement;
    };

    interface HTMLDxpBannerSmallImageElement extends Components.DxpBannerSmallImage, HTMLStencilElement {}
    var HTMLDxpBannerSmallImageElement: {
      prototype: HTMLDxpBannerSmallImageElement;
      new (): HTMLDxpBannerSmallImageElement;
    };

    interface HTMLDxpBannerSolidBackgroundElement extends Components.DxpBannerSolidBackground, HTMLStencilElement {}
    var HTMLDxpBannerSolidBackgroundElement: {
      prototype: HTMLDxpBannerSolidBackgroundElement;
      new (): HTMLDxpBannerSolidBackgroundElement;
    };

    interface HTMLDxpBreadcrumbElement extends Components.DxpBreadcrumb, HTMLStencilElement {}
    var HTMLDxpBreadcrumbElement: {
      prototype: HTMLDxpBreadcrumbElement;
      new (): HTMLDxpBreadcrumbElement;
    };

    interface HTMLDxpBreadcrumbItemElement extends Components.DxpBreadcrumbItem, HTMLStencilElement {}
    var HTMLDxpBreadcrumbItemElement: {
      prototype: HTMLDxpBreadcrumbItemElement;
      new (): HTMLDxpBreadcrumbItemElement;
    };

    interface HTMLDxpCalendarElement extends Components.DxpCalendar, HTMLStencilElement {}
    var HTMLDxpCalendarElement: {
      prototype: HTMLDxpCalendarElement;
      new (): HTMLDxpCalendarElement;
    };

    interface HTMLDxpCellElement extends Components.DxpCell, HTMLStencilElement {}
    var HTMLDxpCellElement: {
      prototype: HTMLDxpCellElement;
      new (): HTMLDxpCellElement;
    };

    interface HTMLDxpChartElement extends Components.DxpChart, HTMLStencilElement {}
    var HTMLDxpChartElement: {
      prototype: HTMLDxpChartElement;
      new (): HTMLDxpChartElement;
    };

    interface HTMLDxpCheckboxElement extends Components.DxpCheckbox, HTMLStencilElement {}
    var HTMLDxpCheckboxElement: {
      prototype: HTMLDxpCheckboxElement;
      new (): HTMLDxpCheckboxElement;
    };

    interface HTMLDxpCheckboxGroupElement extends Components.DxpCheckboxGroup, HTMLStencilElement {}
    var HTMLDxpCheckboxGroupElement: {
      prototype: HTMLDxpCheckboxGroupElement;
      new (): HTMLDxpCheckboxGroupElement;
    };

    interface HTMLDxpCheckboxTreeElement extends Components.DxpCheckboxTree, HTMLStencilElement {}
    var HTMLDxpCheckboxTreeElement: {
      prototype: HTMLDxpCheckboxTreeElement;
      new (): HTMLDxpCheckboxTreeElement;
    };

    interface HTMLDxpCommentsElement extends Components.DxpComments, HTMLStencilElement {}
    var HTMLDxpCommentsElement: {
      prototype: HTMLDxpCommentsElement;
      new (): HTMLDxpCommentsElement;
    };

    interface HTMLDxpCommentsItemElement extends Components.DxpCommentsItem, HTMLStencilElement {}
    var HTMLDxpCommentsItemElement: {
      prototype: HTMLDxpCommentsItemElement;
      new (): HTMLDxpCommentsItemElement;
    };

    interface HTMLDxpCommentsWithReplyElement extends Components.DxpCommentsWithReply, HTMLStencilElement {}
    var HTMLDxpCommentsWithReplyElement: {
      prototype: HTMLDxpCommentsWithReplyElement;
      new (): HTMLDxpCommentsWithReplyElement;
    };

    interface HTMLDxpContainerElement extends Components.DxpContainer, HTMLStencilElement {}
    var HTMLDxpContainerElement: {
      prototype: HTMLDxpContainerElement;
      new (): HTMLDxpContainerElement;
    };

    interface HTMLDxpContentItemElement extends Components.DxpContentItem, HTMLStencilElement {}
    var HTMLDxpContentItemElement: {
      prototype: HTMLDxpContentItemElement;
      new (): HTMLDxpContentItemElement;
    };

    interface HTMLDxpContentItemGridElement extends Components.DxpContentItemGrid, HTMLStencilElement {}
    var HTMLDxpContentItemGridElement: {
      prototype: HTMLDxpContentItemGridElement;
      new (): HTMLDxpContentItemGridElement;
    };

    interface HTMLDxpContentListElement extends Components.DxpContentList, HTMLStencilElement {}
    var HTMLDxpContentListElement: {
      prototype: HTMLDxpContentListElement;
      new (): HTMLDxpContentListElement;
    };

    interface HTMLDxpContentListItemElement extends Components.DxpContentListItem, HTMLStencilElement {}
    var HTMLDxpContentListItemElement: {
      prototype: HTMLDxpContentListItemElement;
      new (): HTMLDxpContentListItemElement;
    };

    interface HTMLDxpCookieConsentElement extends Components.DxpCookieConsent, HTMLStencilElement {}
    var HTMLDxpCookieConsentElement: {
      prototype: HTMLDxpCookieConsentElement;
      new (): HTMLDxpCookieConsentElement;
    };

    interface HTMLDxpCopyrightElement extends Components.DxpCopyright, HTMLStencilElement {}
    var HTMLDxpCopyrightElement: {
      prototype: HTMLDxpCopyrightElement;
      new (): HTMLDxpCopyrightElement;
    };

    interface HTMLDxpCountryItemElement extends Components.DxpCountryItem, HTMLStencilElement {}
    var HTMLDxpCountryItemElement: {
      prototype: HTMLDxpCountryItemElement;
      new (): HTMLDxpCountryItemElement;
    };

    interface HTMLDxpCountryLanguageSelectorElement extends Components.DxpCountryLanguageSelector, HTMLStencilElement {}
    var HTMLDxpCountryLanguageSelectorElement: {
      prototype: HTMLDxpCountryLanguageSelectorElement;
      new (): HTMLDxpCountryLanguageSelectorElement;
    };

    interface HTMLDxpCtaElement extends Components.DxpCta, HTMLStencilElement {}
    var HTMLDxpCtaElement: {
      prototype: HTMLDxpCtaElement;
      new (): HTMLDxpCtaElement;
    };

    interface HTMLDxpCtaListElement extends Components.DxpCtaList, HTMLStencilElement {}
    var HTMLDxpCtaListElement: {
      prototype: HTMLDxpCtaListElement;
      new (): HTMLDxpCtaListElement;
    };

    interface HTMLDxpDataGridElement extends Components.DxpDataGrid, HTMLStencilElement {}
    var HTMLDxpDataGridElement: {
      prototype: HTMLDxpDataGridElement;
      new (): HTMLDxpDataGridElement;
    };

    interface HTMLDxpDataGridCellElement extends Components.DxpDataGridCell, HTMLStencilElement {}
    var HTMLDxpDataGridCellElement: {
      prototype: HTMLDxpDataGridCellElement;
      new (): HTMLDxpDataGridCellElement;
    };

    interface HTMLDxpDataGridFilterElement extends Components.DxpDataGridFilter, HTMLStencilElement {}
    var HTMLDxpDataGridFilterElement: {
      prototype: HTMLDxpDataGridFilterElement;
      new (): HTMLDxpDataGridFilterElement;
    };

    interface HTMLDxpDataGridRowElement extends Components.DxpDataGridRow, HTMLStencilElement {}
    var HTMLDxpDataGridRowElement: {
      prototype: HTMLDxpDataGridRowElement;
      new (): HTMLDxpDataGridRowElement;
    };

    interface HTMLDxpFacetedFilterElement extends Components.DxpFacetedFilter, HTMLStencilElement {}
    var HTMLDxpFacetedFilterElement: {
      prototype: HTMLDxpFacetedFilterElement;
      new (): HTMLDxpFacetedFilterElement;
    };

    interface HTMLDxpFacetedFilterItemElement extends Components.DxpFacetedFilterItem, HTMLStencilElement {}
    var HTMLDxpFacetedFilterItemElement: {
      prototype: HTMLDxpFacetedFilterItemElement;
      new (): HTMLDxpFacetedFilterItemElement;
    };

    interface HTMLDxpFeedbackElement extends Components.DxpFeedback, HTMLStencilElement {}
    var HTMLDxpFeedbackElement: {
      prototype: HTMLDxpFeedbackElement;
      new (): HTMLDxpFeedbackElement;
    };

    interface HTMLDxpFeedbackDisplayElement extends Components.DxpFeedbackDisplay, HTMLStencilElement {}
    var HTMLDxpFeedbackDisplayElement: {
      prototype: HTMLDxpFeedbackDisplayElement;
      new (): HTMLDxpFeedbackDisplayElement;
    };

    interface HTMLDxpFeedbackItemElement extends Components.DxpFeedbackItem, HTMLStencilElement {}
    var HTMLDxpFeedbackItemElement: {
      prototype: HTMLDxpFeedbackItemElement;
      new (): HTMLDxpFeedbackItemElement;
    };

    interface HTMLDxpFlexLayoutElement extends Components.DxpFlexLayout, HTMLStencilElement {}
    var HTMLDxpFlexLayoutElement: {
      prototype: HTMLDxpFlexLayoutElement;
      new (): HTMLDxpFlexLayoutElement;
    };

    interface HTMLDxpFlexLayoutItemElement extends Components.DxpFlexLayoutItem, HTMLStencilElement {}
    var HTMLDxpFlexLayoutItemElement: {
      prototype: HTMLDxpFlexLayoutItemElement;
      new (): HTMLDxpFlexLayoutItemElement;
    };

    interface HTMLDxpFlipboxElement extends Components.DxpFlipbox, HTMLStencilElement {}
    var HTMLDxpFlipboxElement: {
      prototype: HTMLDxpFlipboxElement;
      new (): HTMLDxpFlipboxElement;
    };

    interface HTMLDxpFooterElement extends Components.DxpFooter, HTMLStencilElement {}
    var HTMLDxpFooterElement: {
      prototype: HTMLDxpFooterElement;
      new (): HTMLDxpFooterElement;
    };

    interface HTMLDxpFormElement extends Components.DxpForm, HTMLStencilElement {}
    var HTMLDxpFormElement: {
      prototype: HTMLDxpFormElement;
      new (): HTMLDxpFormElement;
    };

    interface HTMLDxpGridPaginationElement extends Components.DxpGridPagination, HTMLStencilElement {}
    var HTMLDxpGridPaginationElement: {
      prototype: HTMLDxpGridPaginationElement;
      new (): HTMLDxpGridPaginationElement;
    };

    interface HTMLDxpHeadElement extends Components.DxpHead, HTMLStencilElement {}
    var HTMLDxpHeadElement: {
      prototype: HTMLDxpHeadElement;
      new (): HTMLDxpHeadElement;
    };

    interface HTMLDxpHeaderElement extends Components.DxpHeader, HTMLStencilElement {}
    var HTMLDxpHeaderElement: {
      prototype: HTMLDxpHeaderElement;
      new (): HTMLDxpHeaderElement;
    };

    interface HTMLDxpHeaderRichElement extends Components.DxpHeaderRich, HTMLStencilElement {}
    var HTMLDxpHeaderRichElement: {
      prototype: HTMLDxpHeaderRichElement;
      new (): HTMLDxpHeaderRichElement;
    };

    interface HTMLDxpImageElement extends Components.DxpImage, HTMLStencilElement {}
    var HTMLDxpImageElement: {
      prototype: HTMLDxpImageElement;
      new (): HTMLDxpImageElement;
    };

    interface HTMLDxpImageCarouselElement extends Components.DxpImageCarousel, HTMLStencilElement {}
    var HTMLDxpImageCarouselElement: {
      prototype: HTMLDxpImageCarouselElement;
      new (): HTMLDxpImageCarouselElement;
    };

    interface HTMLDxpImageGridElement extends Components.DxpImageGrid, HTMLStencilElement {}
    var HTMLDxpImageGridElement: {
      prototype: HTMLDxpImageGridElement;
      new (): HTMLDxpImageGridElement;
    };

    interface HTMLDxpImageSlideElement extends Components.DxpImageSlide, HTMLStencilElement {}
    var HTMLDxpImageSlideElement: {
      prototype: HTMLDxpImageSlideElement;
      new (): HTMLDxpImageSlideElement;
    };

    interface HTMLDxpInLanguageElement extends Components.DxpInLanguage, HTMLStencilElement {}
    var HTMLDxpInLanguageElement: {
      prototype: HTMLDxpInLanguageElement;
      new (): HTMLDxpInLanguageElement;
    };

    interface HTMLDxpInPageNavElement extends Components.DxpInPageNav, HTMLStencilElement {}
    var HTMLDxpInPageNavElement: {
      prototype: HTMLDxpInPageNavElement;
      new (): HTMLDxpInPageNavElement;
    };

    interface HTMLDxpInPageNavItemElement extends Components.DxpInPageNavItem, HTMLStencilElement {}
    var HTMLDxpInPageNavItemElement: {
      prototype: HTMLDxpInPageNavItemElement;
      new (): HTMLDxpInPageNavItemElement;
    };

    interface HTMLDxpInputElement extends Components.DxpInput, HTMLStencilElement {}
    var HTMLDxpInputElement: {
      prototype: HTMLDxpInputElement;
      new (): HTMLDxpInputElement;
    };

    interface HTMLDxpInputPasswordElement extends Components.DxpInputPassword, HTMLStencilElement {}
    var HTMLDxpInputPasswordElement: {
      prototype: HTMLDxpInputPasswordElement;
      new (): HTMLDxpInputPasswordElement;
    };

    interface HTMLDxpLanguageItemElement extends Components.DxpLanguageItem, HTMLStencilElement {}
    var HTMLDxpLanguageItemElement: {
      prototype: HTMLDxpLanguageItemElement;
      new (): HTMLDxpLanguageItemElement;
    };

    interface HTMLDxpLanguageSelectorElement extends Components.DxpLanguageSelector, HTMLStencilElement {}
    var HTMLDxpLanguageSelectorElement: {
      prototype: HTMLDxpLanguageSelectorElement;
      new (): HTMLDxpLanguageSelectorElement;
    };

    interface HTMLDxpLineElement extends Components.DxpLine, HTMLStencilElement {}
    var HTMLDxpLineElement: {
      prototype: HTMLDxpLineElement;
      new (): HTMLDxpLineElement;
    };

    interface HTMLDxpLocationSearchBannerElement extends Components.DxpLocationSearchBanner, HTMLStencilElement {}
    var HTMLDxpLocationSearchBannerElement: {
      prototype: HTMLDxpLocationSearchBannerElement;
      new (): HTMLDxpLocationSearchBannerElement;
    };

    interface HTMLDxpLocationSelectorElement extends Components.DxpLocationSelector, HTMLStencilElement {}
    var HTMLDxpLocationSelectorElement: {
      prototype: HTMLDxpLocationSelectorElement;
      new (): HTMLDxpLocationSelectorElement;
    };

    interface HTMLDxpLogoElement extends Components.DxpLogo, HTMLStencilElement {}
    var HTMLDxpLogoElement: {
      prototype: HTMLDxpLogoElement;
      new (): HTMLDxpLogoElement;
    };

    interface HTMLDxpMessageElement extends Components.DxpMessage, HTMLStencilElement {}
    var HTMLDxpMessageElement: {
      prototype: HTMLDxpMessageElement;
      new (): HTMLDxpMessageElement;
    };

    interface HTMLDxpMessageListElement extends Components.DxpMessageList, HTMLStencilElement {}
    var HTMLDxpMessageListElement: {
      prototype: HTMLDxpMessageListElement;
      new (): HTMLDxpMessageListElement;
    };

    interface HTMLDxpMessageTextElement extends Components.DxpMessageText, HTMLStencilElement {}
    var HTMLDxpMessageTextElement: {
      prototype: HTMLDxpMessageTextElement;
      new (): HTMLDxpMessageTextElement;
    };

    interface HTMLDxpModalElement extends Components.DxpModal, HTMLStencilElement {}
    var HTMLDxpModalElement: {
      prototype: HTMLDxpModalElement;
      new (): HTMLDxpModalElement;
    };

    interface HTMLDxpNavElement extends Components.DxpNav, HTMLStencilElement {}
    var HTMLDxpNavElement: {
      prototype: HTMLDxpNavElement;
      new (): HTMLDxpNavElement;
    };

    interface HTMLDxpNavGroupElement extends Components.DxpNavGroup, HTMLStencilElement {}
    var HTMLDxpNavGroupElement: {
      prototype: HTMLDxpNavGroupElement;
      new (): HTMLDxpNavGroupElement;
    };

    interface HTMLDxpNavItemElement extends Components.DxpNavItem, HTMLStencilElement {}
    var HTMLDxpNavItemElement: {
      prototype: HTMLDxpNavItemElement;
      new (): HTMLDxpNavItemElement;
    };

    interface HTMLDxpNavItemContentElement extends Components.DxpNavItemContent, HTMLStencilElement {}
    var HTMLDxpNavItemContentElement: {
      prototype: HTMLDxpNavItemContentElement;
      new (): HTMLDxpNavItemContentElement;
    };

    interface HTMLDxpNavMenuElement extends Components.DxpNavMenu, HTMLStencilElement {}
    var HTMLDxpNavMenuElement: {
      prototype: HTMLDxpNavMenuElement;
      new (): HTMLDxpNavMenuElement;
    };

    interface HTMLDxpNavSubItemElement extends Components.DxpNavSubItem, HTMLStencilElement {}
    var HTMLDxpNavSubItemElement: {
      prototype: HTMLDxpNavSubItemElement;
      new (): HTMLDxpNavSubItemElement;
    };

    interface HTMLDxpNavigationElement extends Components.DxpNavigation, HTMLStencilElement {}
    var HTMLDxpNavigationElement: {
      prototype: HTMLDxpNavigationElement;
      new (): HTMLDxpNavigationElement;
    };

    interface HTMLDxpNavigationBannerElement extends Components.DxpNavigationBanner, HTMLStencilElement {}
    var HTMLDxpNavigationBannerElement: {
      prototype: HTMLDxpNavigationBannerElement;
      new (): HTMLDxpNavigationBannerElement;
    };

    interface HTMLDxpOverlayElement extends Components.DxpOverlay, HTMLStencilElement {}
    var HTMLDxpOverlayElement: {
      prototype: HTMLDxpOverlayElement;
      new (): HTMLDxpOverlayElement;
    };

    interface HTMLDxpPageHeaderElement extends Components.DxpPageHeader, HTMLStencilElement {}
    var HTMLDxpPageHeaderElement: {
      prototype: HTMLDxpPageHeaderElement;
      new (): HTMLDxpPageHeaderElement;
    };

    interface HTMLDxpPaginationElement extends Components.DxpPagination, HTMLStencilElement {}
    var HTMLDxpPaginationElement: {
      prototype: HTMLDxpPaginationElement;
      new (): HTMLDxpPaginationElement;
    };

    interface HTMLDxpPanelMenuElement extends Components.DxpPanelMenu, HTMLStencilElement {}
    var HTMLDxpPanelMenuElement: {
      prototype: HTMLDxpPanelMenuElement;
      new (): HTMLDxpPanelMenuElement;
    };

    interface HTMLDxpPanelSubMenuElement extends Components.DxpPanelSubMenu, HTMLStencilElement {}
    var HTMLDxpPanelSubMenuElement: {
      prototype: HTMLDxpPanelSubMenuElement;
      new (): HTMLDxpPanelSubMenuElement;
    };

    interface HTMLDxpPillsElement extends Components.DxpPills, HTMLStencilElement {}
    var HTMLDxpPillsElement: {
      prototype: HTMLDxpPillsElement;
      new (): HTMLDxpPillsElement;
    };

    interface HTMLDxpProgressbarElement extends Components.DxpProgressbar, HTMLStencilElement {}
    var HTMLDxpProgressbarElement: {
      prototype: HTMLDxpProgressbarElement;
      new (): HTMLDxpProgressbarElement;
    };

    interface HTMLDxpProgressspinnerElement extends Components.DxpProgressspinner, HTMLStencilElement {}
    var HTMLDxpProgressspinnerElement: {
      prototype: HTMLDxpProgressspinnerElement;
      new (): HTMLDxpProgressspinnerElement;
    };

    interface HTMLDxpPullQuoteElement extends Components.DxpPullQuote, HTMLStencilElement {}
    var HTMLDxpPullQuoteElement: {
      prototype: HTMLDxpPullQuoteElement;
      new (): HTMLDxpPullQuoteElement;
    };

    interface HTMLDxpRadioButtonElement extends Components.DxpRadioButton, HTMLStencilElement {}
    var HTMLDxpRadioButtonElement: {
      prototype: HTMLDxpRadioButtonElement;
      new (): HTMLDxpRadioButtonElement;
    };

    interface HTMLDxpRadioGroupElement extends Components.DxpRadioGroup, HTMLStencilElement {}
    var HTMLDxpRadioGroupElement: {
      prototype: HTMLDxpRadioGroupElement;
      new (): HTMLDxpRadioGroupElement;
    };

    interface HTMLDxpRangeSliderElement extends Components.DxpRangeSlider, HTMLStencilElement {}
    var HTMLDxpRangeSliderElement: {
      prototype: HTMLDxpRangeSliderElement;
      new (): HTMLDxpRangeSliderElement;
    };

    interface HTMLDxpRegionElement extends Components.DxpRegion, HTMLStencilElement {}
    var HTMLDxpRegionElement: {
      prototype: HTMLDxpRegionElement;
      new (): HTMLDxpRegionElement;
    };

    interface HTMLDxpRegionSelectorElement extends Components.DxpRegionSelector, HTMLStencilElement {}
    var HTMLDxpRegionSelectorElement: {
      prototype: HTMLDxpRegionSelectorElement;
      new (): HTMLDxpRegionSelectorElement;
    };

    interface HTMLDxpSearchElement extends Components.DxpSearch, HTMLStencilElement {}
    var HTMLDxpSearchElement: {
      prototype: HTMLDxpSearchElement;
      new (): HTMLDxpSearchElement;
    };

    interface HTMLDxpSearchResultElement extends Components.DxpSearchResult, HTMLStencilElement {}
    var HTMLDxpSearchResultElement: {
      prototype: HTMLDxpSearchResultElement;
      new (): HTMLDxpSearchResultElement;
    };

    interface HTMLDxpSearchboxElement extends Components.DxpSearchbox, HTMLStencilElement {}
    var HTMLDxpSearchboxElement: {
      prototype: HTMLDxpSearchboxElement;
      new (): HTMLDxpSearchboxElement;
    };

    interface HTMLDxpSelectElement extends Components.DxpSelect, HTMLStencilElement {}
    var HTMLDxpSelectElement: {
      prototype: HTMLDxpSelectElement;
      new (): HTMLDxpSelectElement;
    };

    interface HTMLDxpSelectorMenuElement extends Components.DxpSelectorMenu, HTMLStencilElement {}
    var HTMLDxpSelectorMenuElement: {
      prototype: HTMLDxpSelectorMenuElement;
      new (): HTMLDxpSelectorMenuElement;
    };

    interface HTMLDxpShapeElement extends Components.DxpShape, HTMLStencilElement {}
    var HTMLDxpShapeElement: {
      prototype: HTMLDxpShapeElement;
      new (): HTMLDxpShapeElement;
    };

    interface HTMLDxpSidebarMenuElement extends Components.DxpSidebarMenu, HTMLStencilElement {}
    var HTMLDxpSidebarMenuElement: {
      prototype: HTMLDxpSidebarMenuElement;
      new (): HTMLDxpSidebarMenuElement;
    };

    interface HTMLDxpSidebarMenuGroupElement extends Components.DxpSidebarMenuGroup, HTMLStencilElement {}
    var HTMLDxpSidebarMenuGroupElement: {
      prototype: HTMLDxpSidebarMenuGroupElement;
      new (): HTMLDxpSidebarMenuGroupElement;
    };

    interface HTMLDxpSidebarMenuItemElement extends Components.DxpSidebarMenuItem, HTMLStencilElement {}
    var HTMLDxpSidebarMenuItemElement: {
      prototype: HTMLDxpSidebarMenuItemElement;
      new (): HTMLDxpSidebarMenuItemElement;
    };

    interface HTMLDxpSiteListElement extends Components.DxpSiteList, HTMLStencilElement {}
    var HTMLDxpSiteListElement: {
      prototype: HTMLDxpSiteListElement;
      new (): HTMLDxpSiteListElement;
    };

    interface HTMLDxpSiteMapElement extends Components.DxpSiteMap, HTMLStencilElement {}
    var HTMLDxpSiteMapElement: {
      prototype: HTMLDxpSiteMapElement;
      new (): HTMLDxpSiteMapElement;
    };

    interface HTMLDxpSiteMapGroupElement extends Components.DxpSiteMapGroup, HTMLStencilElement {}
    var HTMLDxpSiteMapGroupElement: {
      prototype: HTMLDxpSiteMapGroupElement;
      new (): HTMLDxpSiteMapGroupElement;
    };

    interface HTMLDxpSiteMapGroupItemElement extends Components.DxpSiteMapGroupItem, HTMLStencilElement {}
    var HTMLDxpSiteMapGroupItemElement: {
      prototype: HTMLDxpSiteMapGroupItemElement;
      new (): HTMLDxpSiteMapGroupItemElement;
    };

    interface HTMLDxpSiteMapListElement extends Components.DxpSiteMapList, HTMLStencilElement {}
    var HTMLDxpSiteMapListElement: {
      prototype: HTMLDxpSiteMapListElement;
      new (): HTMLDxpSiteMapListElement;
    };

    interface HTMLDxpSiteMapListItemElement extends Components.DxpSiteMapListItem, HTMLStencilElement {}
    var HTMLDxpSiteMapListItemElement: {
      prototype: HTMLDxpSiteMapListItemElement;
      new (): HTMLDxpSiteMapListItemElement;
    };

    interface HTMLDxpSocialLinksElement extends Components.DxpSocialLinks, HTMLStencilElement {}
    var HTMLDxpSocialLinksElement: {
      prototype: HTMLDxpSocialLinksElement;
      new (): HTMLDxpSocialLinksElement;
    };

    interface HTMLDxpSocialLinksItemElement extends Components.DxpSocialLinksItem, HTMLStencilElement {}
    var HTMLDxpSocialLinksItemElement: {
      prototype: HTMLDxpSocialLinksItemElement;
      new (): HTMLDxpSocialLinksItemElement;
    };

    interface HTMLDxpStepElement extends Components.DxpStep, HTMLStencilElement {}
    var HTMLDxpStepElement: {
      prototype: HTMLDxpStepElement;
      new (): HTMLDxpStepElement;
    };

    interface HTMLDxpStepTrackerElement extends Components.DxpStepTracker, HTMLStencilElement {}
    var HTMLDxpStepTrackerElement: {
      prototype: HTMLDxpStepTrackerElement;
      new (): HTMLDxpStepTrackerElement;
    };

    interface HTMLDxpStickyFooterElement extends Components.DxpStickyFooter, HTMLStencilElement {}
    var HTMLDxpStickyFooterElement: {
      prototype: HTMLDxpStickyFooterElement;
      new (): HTMLDxpStickyFooterElement;
    };

    interface HTMLDxpStickyFooterCtaElement extends Components.DxpStickyFooterCta, HTMLStencilElement {}
    var HTMLDxpStickyFooterCtaElement: {
      prototype: HTMLDxpStickyFooterCtaElement;
      new (): HTMLDxpStickyFooterCtaElement;
    };

    interface HTMLDxpTabItemElement extends Components.DxpTabItem, HTMLStencilElement {}
    var HTMLDxpTabItemElement: {
      prototype: HTMLDxpTabItemElement;
      new (): HTMLDxpTabItemElement;
    };

    interface HTMLDxpTabListElement extends Components.DxpTabList, HTMLStencilElement {}
    var HTMLDxpTabListElement: {
      prototype: HTMLDxpTabListElement;
      new (): HTMLDxpTabListElement;
    };

    interface HTMLDxpTableElement extends Components.DxpTable, HTMLStencilElement {}
    var HTMLDxpTableElement: {
      prototype: HTMLDxpTableElement;
      new (): HTMLDxpTableElement;
    };

    interface HTMLDxpTabsElement extends Components.DxpTabs, HTMLStencilElement {}
    var HTMLDxpTabsElement: {
      prototype: HTMLDxpTabsElement;
      new (): HTMLDxpTabsElement;
    };

    interface HTMLDxpTagInputElement extends Components.DxpTagInput, HTMLStencilElement {}
    var HTMLDxpTagInputElement: {
      prototype: HTMLDxpTagInputElement;
      new (): HTMLDxpTagInputElement;
    };

    interface HTMLDxpTblRowElement extends Components.DxpTblRow, HTMLStencilElement {}
    var HTMLDxpTblRowElement: {
      prototype: HTMLDxpTblRowElement;
      new (): HTMLDxpTblRowElement;
    };

    interface HTMLDxpTextareaElement extends Components.DxpTextarea, HTMLStencilElement {}
    var HTMLDxpTextareaElement: {
      prototype: HTMLDxpTextareaElement;
      new (): HTMLDxpTextareaElement;
    };

    interface HTMLDxpTileElement extends Components.DxpTile, HTMLStencilElement {}
    var HTMLDxpTileElement: {
      prototype: HTMLDxpTileElement;
      new (): HTMLDxpTileElement;
    };

    interface HTMLDxpTileGridElement extends Components.DxpTileGrid, HTMLStencilElement {}
    var HTMLDxpTileGridElement: {
      prototype: HTMLDxpTileGridElement;
      new (): HTMLDxpTileGridElement;
    };

    interface HTMLDxpTimerElement extends Components.DxpTimer, HTMLStencilElement {}
    var HTMLDxpTimerElement: {
      prototype: HTMLDxpTimerElement;
      new (): HTMLDxpTimerElement;
    };

    interface HTMLDxpToggleSwitchElement extends Components.DxpToggleSwitch, HTMLStencilElement {}
    var HTMLDxpToggleSwitchElement: {
      prototype: HTMLDxpToggleSwitchElement;
      new (): HTMLDxpToggleSwitchElement;
    };

    interface HTMLDxpTooltipElement extends Components.DxpTooltip, HTMLStencilElement {}
    var HTMLDxpTooltipElement: {
      prototype: HTMLDxpTooltipElement;
      new (): HTMLDxpTooltipElement;
    };

    interface HTMLDxpTwitterBannerElement extends Components.DxpTwitterBanner, HTMLStencilElement {}
    var HTMLDxpTwitterBannerElement: {
      prototype: HTMLDxpTwitterBannerElement;
      new (): HTMLDxpTwitterBannerElement;
    };

    interface HTMLDxpVcardElement extends Components.DxpVcard, HTMLStencilElement {}
    var HTMLDxpVcardElement: {
      prototype: HTMLDxpVcardElement;
      new (): HTMLDxpVcardElement;
    };

    interface HTMLDxpVideoElement extends Components.DxpVideo, HTMLStencilElement {}
    var HTMLDxpVideoElement: {
      prototype: HTMLDxpVideoElement;
      new (): HTMLDxpVideoElement;
    };
    interface HTMLElementTagNameMap {
      'dxp-accordion': HTMLDxpAccordionElement;
      'dxp-accordion-item': HTMLDxpAccordionItemElement;
      'dxp-audio': HTMLDxpAudioElement;
      'dxp-autowriter': HTMLDxpAutowriterElement;
      'dxp-banner': HTMLDxpBannerElement;
      'dxp-banner-benefits-hero': HTMLDxpBannerBenefitsHeroElement;
      'dxp-banner-carousel': HTMLDxpBannerCarouselElement;
      'dxp-banner-cta': HTMLDxpBannerCtaElement;
      'dxp-banner-image-overlay': HTMLDxpBannerImageOverlayElement;
      'dxp-banner-regular': HTMLDxpBannerRegularElement;
      'dxp-banner-small-image': HTMLDxpBannerSmallImageElement;
      'dxp-banner-solid-background': HTMLDxpBannerSolidBackgroundElement;
      'dxp-breadcrumb': HTMLDxpBreadcrumbElement;
      'dxp-breadcrumb-item': HTMLDxpBreadcrumbItemElement;
      'dxp-calendar': HTMLDxpCalendarElement;
      'dxp-cell': HTMLDxpCellElement;
      'dxp-chart': HTMLDxpChartElement;
      'dxp-checkbox': HTMLDxpCheckboxElement;
      'dxp-checkbox-group': HTMLDxpCheckboxGroupElement;
      'dxp-checkbox-tree': HTMLDxpCheckboxTreeElement;
      'dxp-comments': HTMLDxpCommentsElement;
      'dxp-comments-item': HTMLDxpCommentsItemElement;
      'dxp-comments-with-reply': HTMLDxpCommentsWithReplyElement;
      'dxp-container': HTMLDxpContainerElement;
      'dxp-content-item': HTMLDxpContentItemElement;
      'dxp-content-item-grid': HTMLDxpContentItemGridElement;
      'dxp-content-list': HTMLDxpContentListElement;
      'dxp-content-list-item': HTMLDxpContentListItemElement;
      'dxp-cookie-consent': HTMLDxpCookieConsentElement;
      'dxp-copyright': HTMLDxpCopyrightElement;
      'dxp-country-item': HTMLDxpCountryItemElement;
      'dxp-country-language-selector': HTMLDxpCountryLanguageSelectorElement;
      'dxp-cta': HTMLDxpCtaElement;
      'dxp-cta-list': HTMLDxpCtaListElement;
      'dxp-data-grid': HTMLDxpDataGridElement;
      'dxp-data-grid-cell': HTMLDxpDataGridCellElement;
      'dxp-data-grid-filter': HTMLDxpDataGridFilterElement;
      'dxp-data-grid-row': HTMLDxpDataGridRowElement;
      'dxp-faceted-filter': HTMLDxpFacetedFilterElement;
      'dxp-faceted-filter-item': HTMLDxpFacetedFilterItemElement;
      'dxp-feedback': HTMLDxpFeedbackElement;
      'dxp-feedback-display': HTMLDxpFeedbackDisplayElement;
      'dxp-feedback-item': HTMLDxpFeedbackItemElement;
      'dxp-flex-layout': HTMLDxpFlexLayoutElement;
      'dxp-flex-layout-item': HTMLDxpFlexLayoutItemElement;
      'dxp-flipbox': HTMLDxpFlipboxElement;
      'dxp-footer': HTMLDxpFooterElement;
      'dxp-form': HTMLDxpFormElement;
      'dxp-grid-pagination': HTMLDxpGridPaginationElement;
      'dxp-head': HTMLDxpHeadElement;
      'dxp-header': HTMLDxpHeaderElement;
      'dxp-header-rich': HTMLDxpHeaderRichElement;
      'dxp-image': HTMLDxpImageElement;
      'dxp-image-carousel': HTMLDxpImageCarouselElement;
      'dxp-image-grid': HTMLDxpImageGridElement;
      'dxp-image-slide': HTMLDxpImageSlideElement;
      'dxp-in-language': HTMLDxpInLanguageElement;
      'dxp-in-page-nav': HTMLDxpInPageNavElement;
      'dxp-in-page-nav-item': HTMLDxpInPageNavItemElement;
      'dxp-input': HTMLDxpInputElement;
      'dxp-input-password': HTMLDxpInputPasswordElement;
      'dxp-language-item': HTMLDxpLanguageItemElement;
      'dxp-language-selector': HTMLDxpLanguageSelectorElement;
      'dxp-line': HTMLDxpLineElement;
      'dxp-location-search-banner': HTMLDxpLocationSearchBannerElement;
      'dxp-location-selector': HTMLDxpLocationSelectorElement;
      'dxp-logo': HTMLDxpLogoElement;
      'dxp-message': HTMLDxpMessageElement;
      'dxp-message-list': HTMLDxpMessageListElement;
      'dxp-message-text': HTMLDxpMessageTextElement;
      'dxp-modal': HTMLDxpModalElement;
      'dxp-nav': HTMLDxpNavElement;
      'dxp-nav-group': HTMLDxpNavGroupElement;
      'dxp-nav-item': HTMLDxpNavItemElement;
      'dxp-nav-item-content': HTMLDxpNavItemContentElement;
      'dxp-nav-menu': HTMLDxpNavMenuElement;
      'dxp-nav-sub-item': HTMLDxpNavSubItemElement;
      'dxp-navigation': HTMLDxpNavigationElement;
      'dxp-navigation-banner': HTMLDxpNavigationBannerElement;
      'dxp-overlay': HTMLDxpOverlayElement;
      'dxp-page-header': HTMLDxpPageHeaderElement;
      'dxp-pagination': HTMLDxpPaginationElement;
      'dxp-panel-menu': HTMLDxpPanelMenuElement;
      'dxp-panel-sub-menu': HTMLDxpPanelSubMenuElement;
      'dxp-pills': HTMLDxpPillsElement;
      'dxp-progressbar': HTMLDxpProgressbarElement;
      'dxp-progressspinner': HTMLDxpProgressspinnerElement;
      'dxp-pull-quote': HTMLDxpPullQuoteElement;
      'dxp-radio-button': HTMLDxpRadioButtonElement;
      'dxp-radio-group': HTMLDxpRadioGroupElement;
      'dxp-range-slider': HTMLDxpRangeSliderElement;
      'dxp-region': HTMLDxpRegionElement;
      'dxp-region-selector': HTMLDxpRegionSelectorElement;
      'dxp-search': HTMLDxpSearchElement;
      'dxp-search-result': HTMLDxpSearchResultElement;
      'dxp-searchbox': HTMLDxpSearchboxElement;
      'dxp-select': HTMLDxpSelectElement;
      'dxp-selector-menu': HTMLDxpSelectorMenuElement;
      'dxp-shape': HTMLDxpShapeElement;
      'dxp-sidebar-menu': HTMLDxpSidebarMenuElement;
      'dxp-sidebar-menu-group': HTMLDxpSidebarMenuGroupElement;
      'dxp-sidebar-menu-item': HTMLDxpSidebarMenuItemElement;
      'dxp-site-list': HTMLDxpSiteListElement;
      'dxp-site-map': HTMLDxpSiteMapElement;
      'dxp-site-map-group': HTMLDxpSiteMapGroupElement;
      'dxp-site-map-group-item': HTMLDxpSiteMapGroupItemElement;
      'dxp-site-map-list': HTMLDxpSiteMapListElement;
      'dxp-site-map-list-item': HTMLDxpSiteMapListItemElement;
      'dxp-social-links': HTMLDxpSocialLinksElement;
      'dxp-social-links-item': HTMLDxpSocialLinksItemElement;
      'dxp-step': HTMLDxpStepElement;
      'dxp-step-tracker': HTMLDxpStepTrackerElement;
      'dxp-sticky-footer': HTMLDxpStickyFooterElement;
      'dxp-sticky-footer-cta': HTMLDxpStickyFooterCtaElement;
      'dxp-tab-item': HTMLDxpTabItemElement;
      'dxp-tab-list': HTMLDxpTabListElement;
      'dxp-table': HTMLDxpTableElement;
      'dxp-tabs': HTMLDxpTabsElement;
      'dxp-tag-input': HTMLDxpTagInputElement;
      'dxp-tbl-row': HTMLDxpTblRowElement;
      'dxp-textarea': HTMLDxpTextareaElement;
      'dxp-tile': HTMLDxpTileElement;
      'dxp-tile-grid': HTMLDxpTileGridElement;
      'dxp-timer': HTMLDxpTimerElement;
      'dxp-toggle-switch': HTMLDxpToggleSwitchElement;
      'dxp-tooltip': HTMLDxpTooltipElement;
      'dxp-twitter-banner': HTMLDxpTwitterBannerElement;
      'dxp-vcard': HTMLDxpVcardElement;
      'dxp-video': HTMLDxpVideoElement;
    }
  }

  declare namespace LocalJSX {
    interface DxpAccordion {
      /**
      * sets the accordion heading
      */
      'heading'?: string;
      /**
      * sets whether header is required
      */
      'isHeaderRequired'?: boolean;
      /**
      * sets the accordion items to be display
      */
      'items'?: any;
    }
    interface DxpAccordionItem {
      /**
      * sets the description
      */
      'itemDescription'?: string;
      /**
      * sets the sub-title
      */
      'itemSubtitle'?: string;
      /**
      * sets the title
      */
      'itemTitle'?: string;
      /**
      * checkbox to expand the accordion item description
      */
      'showExpanded'?: boolean;
    }
    interface DxpAudio {
      /**
      * aria-label for mute unmute button for accessibility.
      */
      'ariaLabelMuteUnmute'?: string;
      /**
      * aria-label for pay pause button for accessibility.
      */
      'ariaLabelPlayPause'?: string;
      /**
      * audio auto play property
      */
      'autoplay'?: boolean;
      /**
      * audio default control property
      */
      'defaultControls'?: boolean;
      /**
      * hide audio play pause control
      */
      'hidePlayPauseControl'?: boolean;
      /**
      * holds boolean value of looping audio
      */
      'loop'?: boolean;
      /**
      * audio mute unmute control property
      */
      'muted'?: boolean;
      /**
      * holds position for audio player
      */
      'position'?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
      /**
      * audio preload property
      */
      'preload'?: 'auto' | 'none' | 'metadata';
      /**
      * holds source for audio file
      */
      'src'?: string;
      /**
      * holds type of audio format
      */
      'type'?: 'mpeg' | 'ogg' | 'wav';
    }
    interface DxpAutowriter {
      /**
      * custom css class name if needed to be applied to display text
      */
      'customStyleClass'?: '';
      /**
      * to fix the cursor position at the start
      */
      'fixCursor'?: boolean;
      /**
      * speed in milliseconds for interval to display next character
      */
      'speed'?: number;
      /**
      * array text that needs to be displayed
      */
      'textList'?: any[];
    }
    interface DxpBanner {
      /**
      * add circle design over banner
      */
      'addCircle'?: boolean;
      /**
      * alt Text
      */
      'alt'?: string;
      /**
      * animation for overlay content and CTA
      */
      'animation'?: boolean;
      /**
      * Auto play video
      */
      'autoPlay'?: boolean;
      /**
      * background type for regular hero and banner
      */
      'backgroundType'?: string;
      /**
      * banner size
      */
      'bannerSize'?: string;
      /**
      * banner type
      */
      'bannerType'?: string;
      /**
      * slide background color
      */
      'cardColor'?: string;
      /**
      * category
      */
      'categoryTag'?: string;
      /**
      * Enable disable out of the box padding & margin around component
      */
      'containerFluid'?: boolean;
      /**
      * cta attributes
      */
      'cta'?: any;
      /**
      * to give custom id to banner
      */
      'customId'?: string;
      /**
      * custom mute button in case of disabled controls for HTML5 video
      */
      'customMuteButton'?: boolean;
      /**
      * custom mute button position
      */
      'customMuteButtonPosition'?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
      /**
      * disable video controls
      */
      'disableControls'?: boolean;
      /**
      * enable overlay
      */
      'enableOverlay'?: string;
      /**
      * eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * focal Points
      */
      'focalPoint'?: any;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * image Href
      */
      'href'?: string;
      /**
      * video play icon type e.g light, dark
      */
      'iconType'?: string;
      /**
      * overlay for Image
      */
      'imageEnableOverlay'?: string;
      /**
      * image Title
      */
      'imageTitle'?: string;
      /**
      * Video mute option
      */
      'muted'?: boolean;
      /**
      * Open in new tab
      */
      'openInNewTab'?: string;
      /**
      * overlay Position
      */
      'overlayPosition'?: string;
      /**
      * Web page scroll with this button. Listen on bottom side of banner
      */
      'pageScrollDownArrow'?: string;
      /**
      * position Of Image
      */
      'positionOfImage'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * key of the query that is to be sent to results page
      */
      'searchParamKey'?: string;
      /**
      * placeholder for search in in-page-search banner
      */
      'searchPlaceholder'?: string;
      /**
      * extension of search result page for in page search banner
      */
      'searchResultPageExtension'?: string;
      /**
      * result page URL for in page search banner
      */
      'searchResultPageUrl'?: string;
      /**
      * show/hide text contents over image overlay banner
      */
      'showContentSm'?: boolean;
      /**
      * image source
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
      /**
      * poster link Of video
      */
      'srcPoster'?: string;
      /**
      * source Of video
      */
      'srcVideo'?: string;
      /**
      * image of video play
      */
      'srcVideoPlayImage'?: string;
      /**
      * subtitle
      */
      'subTitle'?: string;
      /**
      * slide text color
      */
      'textColor'?: string;
      /**
      * title text
      */
      'titleText'?: string;
      /**
      * description of video
      */
      'videoDescription'?: string;
      /**
      * name of video
      */
      'videoName'?: string;
      /**
      * video type like youtube, youku, akamai etc
      */
      'videoType'?: string;
      /**
      * video first published date
      */
      'videoUploadDate'?: string;
    }
    interface DxpBannerBenefitsHero {
      /**
      * alt Text
      */
      'alt'?: string;
      /**
      * banner size
      */
      'bannerSize'?: string;
      /**
      * banner type
      */
      'bannerType'?: string;
      /**
      * slide background color
      */
      'cardColor'?: string;
      /**
      * cta attributes
      */
      'cta'?: any;
      /**
      * to give custom id to banner
      */
      'customId'?: string;
      /**
      * eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * focal Point
      */
      'focalPoint'?: any;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * image Href
      */
      'href'?: string;
      /**
      * position Of Image
      */
      'imageEnableOverlay'?: string;
      /**
      * image Title
      */
      'imageTitle'?: string;
      /**
      * Open in new tab
      */
      'openInNewTab'?: string;
      /**
      * position Of Image
      */
      'positionOfImage'?: string;
      /**
      * image position as per dir attribute (if any)
      */
      'positionOfImageClass'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * image source
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
      /**
      * subtitle
      */
      'subTitle'?: string;
      /**
      * slide text color
      */
      'textColor'?: string;
      /**
      * title text
      */
      'titleText'?: string;
    }
    interface DxpBannerCarousel {
      /**
      * This is property for autoplay of carousel
      */
      'autoPlay'?: boolean;
      /**
      * This is property to set the position of badge/dots
      */
      'badgeAlignment'?: boolean;
      /**
      * This is property to set indicator color in b2b carousel
      */
      'indicatorColor'?: string;
      /**
      * Check this to set indicator position to left in b2b carousel
      */
      'indicatorToLeft'?: boolean;
      /**
      * If banner type is benefits hero then set this to true
      */
      'isBenefitsHero'?: boolean;
      /**
      * This defines the speed of carousel
      */
      'pauseDuration'?: number;
      /**
      * check this to show arrows for carousel
      */
      'showArrows'?: boolean;
      /**
      * check this property to show thumbnails of banner
      */
      'showProgressbar'?: boolean;
      /**
      * check this property to show thumbnails of banner
      */
      'showThumbnails'?: boolean;
      /**
      * slide data for script elements
      */
      'slides'?: any;
    }
    interface DxpBannerCta {
      /**
      * button style for cta
      */
      'bannerSize'?: string;
      /**
      * banner type for cta
      */
      'bannerType'?: string;
      /**
      * button style for cta
      */
      'buttonStyle'?: string;
      /**
      * download file name for cta
      */
      'downloadFile'?: string;
      /**
      * email body for cta
      */
      'emailBody'?: string;
      /**
      * email id for cta type email
      */
      'emailId'?: string;
      /**
      * email subject for cta
      */
      'emailSubject'?: string;
      /**
      * prop value is true when overlay is enabled on 'image banner'
      */
      'enableOverlay'?: string;
      /**
      * link text for cta
      */
      'linkText'?: string;
      /**
      * link type for cta
      */
      'linkType'?: string;
      /**
      * link url for cta
      */
      'linkUrl'?: string;
      /**
      * open link in new tab for cta
      */
      'openInNewTab'?: 'false';
      /**
      * Text for visually impaired for cta
      */
      'visuallyImpairedText'?: string;
    }
    interface DxpBannerImageOverlay {
      /**
      * add circle design over banner
      */
      'addCircle'?: boolean;
      /**
      * alt Text
      */
      'alt'?: string;
      /**
      * animation for overlay content and CTA
      */
      'animation'?: boolean;
      /**
      * auto play video
      */
      'autoPlay'?: boolean;
      /**
      * background type of Hero Banner like Image, Video, Solid
      */
      'backgroundType'?: string;
      /**
      * banner size
      */
      'bannerSize'?: string;
      /**
      * banner type
      */
      'bannerType'?: string;
      /**
      * category
      */
      'categoryTag'?: string;
      /**
      * cta attributes
      */
      'cta'?: any;
      /**
      * custom mute button in case of disabled controls for HTML5 video
      */
      'customMuteButton'?: boolean;
      /**
      * custom mute button position
      */
      'customMuteButtonPosition'?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
      /**
      * disable video controls
      */
      'disableControls'?: boolean;
      /**
      * enable overlay
      */
      'enableOverlay'?: string;
      /**
      * eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * focal Point
      */
      'focalPoint'?: any;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * image Href
      */
      'href'?: string;
      /**
      * video play icon type e.g light, dark
      */
      'iconType'?: string;
      /**
      * position Of Image
      */
      'imageEnableOverlay'?: string;
      /**
      * image Title
      */
      'imageTitle'?: string;
      /**
      * Video mute option
      */
      'muted'?: boolean;
      /**
      * Open in new tab
      */
      'openInNewTab'?: string;
      /**
      * overlay Position
      */
      'overlayPosition'?: string;
      /**
      * Web page scroll down
      */
      'pageScrollDownArrow'?: boolean;
      /**
      * position Of Image
      */
      'positionOfImage'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * show/hide text contents over image overlay banner
      */
      'showContentSm'?: boolean;
      /**
      * image source
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
      /**
      * poster link Of video
      */
      'srcPoster'?: string;
      /**
      * source Of video
      */
      'srcVideo'?: string;
      /**
      * video play image icon
      */
      'srcVideoPlayImage'?: string;
      /**
      * subtitle
      */
      'subTitle'?: string;
      /**
      * title text
      */
      'titleText'?: string;
      /**
      * description of video
      */
      'videoDescription'?: string;
      /**
      * name of video
      */
      'videoName'?: string;
      /**
      * video type like youtube, youku, akamai etc
      */
      'videoType'?: string;
      /**
      * video first published date
      */
      'videoUploadDate'?: string;
    }
    interface DxpBannerRegular {
      /**
      * add circle design over banner
      */
      'addCircle'?: boolean;
      /**
      * alt Text
      */
      'alt'?: string;
      /**
      * animation for overlay content and CTA
      */
      'animation'?: boolean;
      /**
      * auto play video
      */
      'autoPlay'?: boolean;
      /**
      * background type for regular banner
      */
      'backgroundType'?: string;
      /**
      * banner type
      */
      'bannerType'?: string;
      /**
      * cta attributes
      */
      'cta'?: any;
      /**
      * custom mute button in case of disabled controls for HTML5 video
      */
      'customMuteButton'?: boolean;
      /**
      * custom mute button position
      */
      'customMuteButtonPosition'?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
      /**
      * disable video controls
      */
      'disableControls'?: boolean;
      /**
      * eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * focal Points
      */
      'focalPoint'?: string;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * image Title
      */
      'imageTitle'?: string;
      /**
      * overlay text content position
      */
      'overlayPosition'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * image source
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
      /**
      * poster link Of video
      */
      'srcPoster'?: string;
      /**
      * source Of video
      */
      'srcVideo'?: string;
      /**
      * subtitle
      */
      'subTitle'?: string;
      /**
      * title text
      */
      'titleText'?: string;
      /**
      * description of video
      */
      'videoDescription'?: string;
      /**
      * name of video
      */
      'videoName'?: string;
      /**
      * video type like youtube, youku, akamai etc
      */
      'videoType'?: string;
      /**
      * video first published date
      */
      'videoUploadDate'?: string;
    }
    interface DxpBannerSmallImage {
      /**
      * alt Text
      */
      'alt'?: string;
      /**
      * banner type
      */
      'bannerType'?: string;
      /**
      * slide text color
      */
      'cardColor'?: string;
      /**
      * cta attributes
      */
      'cta'?: any;
      /**
      * to give custom id to banner
      */
      'customId'?: string;
      /**
      * eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * Focal point of XL images
      */
      'focalPoint'?: any;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * image Href
      */
      'href'?: string;
      /**
      * position Of Image
      */
      'imageEnableOverlay'?: string;
      /**
      * image Title
      */
      'imageTitle'?: string;
      /**
      * Open in new tab
      */
      'openInNewTab'?: string;
      /**
      * position Of Image
      */
      'positionOfImage'?: string;
      /**
      * image position as per dir attribute (if any)
      */
      'positionOfImageClass'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * image source
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
      /**
      * subtitle
      */
      'subTitle'?: string;
      /**
      * slide text color
      */
      'textColor'?: string;
      /**
      * title text
      */
      'titleText'?: string;
    }
    interface DxpBannerSolidBackground {
      /**
      * banner size
      */
      'bannerSize'?: string;
      /**
      * banner type
      */
      'bannerType'?: string;
      /**
      * cta attributes
      */
      'cta'?: any;
      /**
      * eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * overlay Position
      */
      'overlayPosition'?: string;
      /**
      * subtitle
      */
      'subTitle'?: string;
      /**
      * title text
      */
      'titleText'?: string;
    }
    interface DxpBreadcrumb {
      /**
      * api url
      */
      'apiUrl'?: string;
      /**
      * define for which site/application sitemap is required
      */
      'applicationName'?: string;
      /**
      * checkboxes items data
      */
      'breadcrumbItemsData'?: any;
      /**
      * hides the current item in breadcrumb
      */
      'hideCurrentPage'?: boolean;
      /**
      * define the navigation start level
      */
      'navStartLevel'?: number;
      /**
      * define the navigation root site path for sitemap service to fetch data
      */
      'rootSitePath'?: string;
      /**
      * show hidden navigation items which are marked as hidden
      */
      'showHiddenNavItems'?: boolean;
    }
    interface DxpBreadcrumbItem {
      /**
      * accessibility text of the breadcrumb items
      */
      'accessibilityText'?: string;
      /**
      * hides the current item in breadcrumb
      */
      'hideCurrentPage'?: boolean;
      /**
      * to set the z-index value
      */
      'indexVal'?: number;
      /**
      * define for current page in breadcrumb
      */
      'isCurrentPage'?: boolean;
      /**
      * link of the breadcrumb item
      */
      'link'?: string;
      /**
      * title of the breadcrumb items
      */
      'linkTitle'?: string;
    }
    interface DxpCalendar {
      /**
      * calendar ID
      */
      'calendarId'?: string;
      /**
      * default date
      */
      'defaultDate'?: string;
      /**
      * list of dates that will be disabled in dd/mm/yyyy format (not zero based on month)
      */
      'disabledDates'?: any;
      /**
      * list of dates that will be enabled in dd/mm/yyyy format (not zero based on month) - all dates outside range to be disabled
      */
      'enabledDates'?: any;
      /**
      * it will be the starting year available in calendar year dropdown
      */
      'fromYear'?: number;
      /**
      * just a configuration if consumer wants to disable the future date ( will be useful in currency converter)
      */
      'futureDate'?: boolean;
      /**
      * label for date
      */
      'label'?: string;
      /**
      * row with message available at footer of calendar overlay
      */
      'message'?: string;
      /**
      * emit custom event when calendar is clicked
      */
      'onCalendarClick'?: (event: CustomEvent<any>) => void;
      /**
      * responsible for emitting an event on date selection
      */
      'onDateSelected'?: (event: CustomEvent<any>) => void;
      /**
      * This attribute specifies that an input field must be filled out before submitting the form
      */
      'required'?: boolean;
      /**
      * it will be the ending year available in calendar year dropdown
      */
      'throughYear'?: number;
    }
    interface DxpCell {
      /**
      * content inside cell of table
      */
      'content'?: string;
    }
    interface DxpChart {
      /**
      * api url for chart
      */
      'apiUrl'?: string;
      /**
      * holds chart category
      */
      'chart'?: 'bar' | 'pie';
      /**
      * holds chart title
      */
      'chartTitle'?: '';
      /**
      * holds sub type of chart
      */
      'chartType'?: 'basic' | 'doughnut' | 'stacked' | 'group';
      /**
      * contains chart data array
      */
      'data'?: any;
      /**
      * holds height of chart
      */
      'height'?: number;
      /**
      * holds legend direction
      */
      'legendDirection'?: 'vertical' | 'horizontal';
      /**
      * holds legend orientation
      */
      'legendOrient'?: 'top' | 'bottom' | 'left' | 'right';
      /**
      * holds legend title
      */
      'legendTitle'?: '';
      /**
      * Chart orientation
      */
      'orientation'?: 'vertical' | 'horizontal';
      /**
      * holds legend visibility
      */
      'showLegend'?: true | false;
      /**
      * holds tool tip
      */
      'showTooltip'?: true | false;
      /**
      * holds width of chart
      */
      'width'?: number;
      /**
      * holds x axis label
      */
      'xAxis'?: '';
      /**
      * holds y axis label
      */
      'yAxis'?: '';
    }
    interface DxpCheckbox {
      /**
      * set alignment
      */
      'alignment'?: 'horizontal' | 'vertical';
      /**
      * checkbox id
      */
      'checkboxId'?: string;
      /**
      * checkbox checked
      */
      'checked'?: boolean;
      /**
      * checkbox disabled
      */
      'disabled'?: boolean;
      /**
      * actions to be performed prior to component loading
      */
      'name'?: any;
      /**
      * Emit the value of checked
      */
      'onCheckboxData'?: (event: CustomEvent<any>) => void;
      /**
      * used for emitting an event to acknowledge alignment to the group
      */
      'onValidationEvent'?: (event: CustomEvent<any>) => void;
      /**
      * require property
      */
      'required'?: boolean;
      /**
      * validation message
      */
      'validationMessage'?: string;
      /**
      * add the value in checkbox value attribute
      */
      'value'?: any;
    }
    interface DxpCheckboxGroup {
      /**
      * layout of check-box. Author can set the alignment of check-boxes horizontally / vertically
      */
      'alignment'?: 'horizontal' | 'vertical';
      /**
      * This is heading of checkbox items
      */
      'caption'?: string;
      /**
      * checkbox items data
      */
      'checkboxItemsData'?: any;
      /**
      * More and less will be shown and hidden based on the number of incoming items
      */
      'initialItemsCount'?: number;
      /**
      * This emit the selected checkbox data to listen any event listener
      */
      'onCheckboxItemsData'?: (event: CustomEvent<any>) => void;
      /**
      * Defines if the field is required
      */
      'required'?: boolean;
      /**
      * Select-all checkbox button will be present if the author set it to true
      */
      'selectAll'?: boolean;
      /**
      * separator will be shown and hidden if the property is set to true and false respectively
      */
      'separatorRequired'?: boolean;
      /**
      * Error message will appear if none of checkbox is checked
      */
      'validationMessage'?: string;
    }
    interface DxpCheckboxTree {
      /**
      * checkbox-tree object
      */
      'dataSource'?: any;
      /**
      * Emit the value of checked
      */
      'onCheckboxSelection'?: (event: CustomEvent<any>) => void;
      /**
      * serchtext to filter data
      */
      'searchText'?: any;
      /**
      * show only selected checkbox nodes
      */
      'showSelected'?: boolean;
    }
    interface DxpComments {
      /**
      * holds api end point path
      */
      'apiUrl'?: string;
      /**
      * prop holds application Id
      */
      'appId'?: any;
      /**
      * prop Holds comments cancel button text
      */
      'cancelText'?: string;
      /**
      * Holds comments content id
      */
      'commentContentId'?: string;
      /**
      * comment value in the text area
      */
      'commentText'?: any;
      /**
      * Limit to show comments
      */
      'commentsLimit'?: number;
      /**
      * max-length for comment textarea
      */
      'maxCharacters'?: number;
      /**
      * mock comment json url
      */
      'mockcommentUrl'?: string;
      /**
      * prop holds needs of moderation value
      */
      'needsModeration'?: boolean;
      /**
      * Limit to show replies
      */
      'repliesLimit'?: number;
      /**
      * prop holds comments submit button text
      */
      'submitText'?: string;
      /**
      * prop holds comment textarea placeholder text
      */
      'textareaPlaceholder'?: string;
      /**
      * prop holds get user id from
      */
      'userDataContainer'?: 'COOKIE' | 'SESSION' | 'OTHER';
      /**
      * prop holds stored user info key name
      */
      'useridKey'?: any;
    }
    interface DxpCommentsItem {
      /**
      * comment-obj
      */
      'commentObj'?: any;
      /**
      * set action menu is click
      */
      'isActionMenuActive'?: boolean;
      /**
      * Flag to identify textarea opened for edit reply
      */
      'isOpenedForEditReply'?: boolean;
      /**
      * Flag to identify textarea opened for reply to comment
      */
      'isOpenedForReply'?: boolean;
      /**
      * Flag to identify comment or reply
      */
      'isReply'?: boolean;
      /**
      * set reply link is active on click
      */
      'isReplyLinkActive'?: boolean;
      /**
      * max-length for comment textarea
      */
      'maxCharacters'?: number;
      /**
      * Event to emit when click action menu
      */
      'onClickActionMenu'?: (event: CustomEvent<{}>) => void;
      /**
      * Event to emit when click action menu
      */
      'onClickEditComment'?: (event: CustomEvent<{}>) => void;
      /**
      * Event to emit when click reply link
      */
      'onClickReplyComment'?: (event: CustomEvent<{}>) => void;
      /**
      * Event to emit when changing current page
      */
      'onCommentUpdated'?: (event: CustomEvent<{}>) => void;
      /**
      * analytics data emitter
      */
      'onDxp_comp'?: (event: CustomEvent<any>) => void;
      /**
      * prop holds get user id from
      */
      'userDataContainer'?: 'COOKIE' | 'SESSION' | 'OTHER';
      /**
      * prop holds stored user info key name
      */
      'useridKey'?: any;
    }
    interface DxpCommentsWithReply {
      /**
      * comment-obj
      */
      'commentObj'?: any;
      /**
      * max-length for comment textarea
      */
      'maxCharacters'?: number;
      /**
      * Limit to show replies
      */
      'repliesLimit'?: number;
      /**
      * prop holds get user id from
      */
      'userDataContainer'?: 'COOKIE' | 'SESSION' | 'OTHER';
      /**
      * prop holds stored user info key name
      */
      'useridKey'?: any;
    }
    interface DxpContainer {
      /**
      * prop to uniquely identify a container
      */
      'containerId'?: string;
      /**
      * cms content failed to load
      */
      'onSrcFailed'?: (event: CustomEvent<any>) => void;
      /**
      * cms content applied
      */
      'onSrcLoaded'?: (event: CustomEvent<any>) => void;
      /**
      * url to fetch CMS content from
      */
      'src'?: string;
    }
    interface DxpContentItem {
      /**
      * More action button list
      */
      'actionList'?: any[];
      /**
      * alt text for header image
      */
      'alt'?: string;
      /**
      * content item animation
      */
      'animation'?: 'slide-right' | 'slide-left' | 'slide-up' | 'slide-down' | 'none';
      /**
      * content item animation
      */
      'animationDuration'?: number;
      /**
      * title badge background color
      */
      'badgeBackgroundColor'?: string;
      /**
      * text for badge
      */
      'badgeText'?: string;
      /**
      * text color for badge
      */
      'badgeTextColor'?: string;
      /**
      * CTA one display as link or button
      */
      'buttonOneDisplayAs'?: 'link' | 'button';
      /**
      * CTA one link/button text
      */
      'buttonOneLinkText'?: string;
      /**
      * to open in new tab or not when CTA one is clicked
      */
      'buttonOneOpenInNewTab'?: boolean;
      /**
      * link to destination
      */
      'buttonOneUrl'?: string;
      /**
      * CTA two display as link or button
      */
      'buttonTwoDisplayAs'?: 'link' | 'button';
      /**
      * CTA two link/button text
      */
      'buttonTwoLinkText'?: string;
      /**
      * to open in new tab or not when CTA two is clicked
      */
      'buttonTwoOpenInNewTab'?: boolean;
      /**
      * link to destination
      */
      'buttonTwoUrl'?: string;
      /**
      * show card more button or not
      */
      'cardMoreButton'?: boolean;
      /**
      * category label for dxp-content-item
      */
      'categoryLabel'?: string;
      /**
      * category tag for dxp-content-item
      */
      'categoryTag'?: string;
      /**
      * category text target for dxp-content-item
      */
      'categoryTarget'?: false;
      /**
      * category text for dxp-content-item
      */
      'categoryText'?: string;
      /**
      * title url for dxp-content-item
      */
      'contentItemTitle'?: string;
      /**
      * title url for dxp-content-item
      */
      'contentItemTitleTarget'?: true;
      /**
      * title url for dxp-content-item
      */
      'contentItemTitleUrl'?: string;
      /**
      * type of dxp-content-item; can be either media-on-top, title-on-top
      */
      'contentItemType'?: 'media-on-top' | 'eyebrow-on-top' | 'title-on-top' | 'description-on-top';
      /**
      * Content type of dxp-content-item.
      */
      'contentType'?: 'content-image-text' | 'content-small-image' | 'content-logo';
      /**
      * count of the Content item
      */
      'count'?: string;
      /**
      * cta data for child components
      */
      'ctaData'?: any;
      /**
      * custom mute button in case of disabled controls for HTML5 video
      */
      'customMuteButton'?: boolean;
      /**
      * custom mute button position
      */
      'customMuteButtonPosition'?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
      /**
      * defines theme for child components
      */
      'dataTheme'?: string;
      /**
      * date string of the Content Item
      */
      'date'?: string;
      /**
      * description for dxp-content-item
      */
      'description'?: string;
      /**
      * description target for dxp-content-item
      */
      'descriptionTarget'?: boolean;
      /**
      * Device height
      */
      'deviceHeight'?: string;
      /**
      * disable video controls
      */
      'disableControls'?: boolean;
      /**
      * set overlay to true or false on header image
      */
      'enableOverlay'?: boolean;
      /**
      * eyebrow text for dxp-content-item
      */
      'eyebrowText'?: string;
      /**
      * focal point for header image
      */
      'focalPoints'?: any;
      /**
      * Left Head icon of the Content item
      */
      'headerIconLeft'?: string;
      /**
      * Right Head icon of the Content item
      */
      'headerIconRight'?: string;
      /**
      * Header text of the Content Item
      */
      'headerText'?: string;
      /**
      * header type of dxp-content-item. Can be either image or none
      */
      'headerType'?: 'image' | 'none' | 'video' | 'card';
      /**
      * whether borderline should use
      */
      'headerline'?: boolean;
      /**
      * header type of dxp-content-item. Can be either image or none
      */
      'heightType'?: 'small' | 'large';
      /**
      * link to destination from header
      */
      'href'?: string;
      /**
      * icon type for header video
      */
      'iconType'?: 'light' | 'dark';
      /**
      * title for header image
      */
      'imageTitle'?: string;
      /**
      * whether content indentation should use
      */
      'indentation'?: boolean;
      /**
      * CTA content item click event. Emitted when CTA appcard is clicked
      */
      'onClickCtaCard'?: (event: CustomEvent<any>) => void;
      /**
      * CTA header right icon click event. Emitted when CTA fav icon is clicked
      */
      'onClickCtaFav'?: (event: CustomEvent<any>) => void;
      /**
      * CTA more button actions click event. Emitted when CTA More action is clicked
      */
      'onClickCtaMoreAction'?: (event: CustomEvent<any>) => void;
      /**
      * CTA one click event. Emitted when CTA one is clicked
      */
      'onClickCtaOne'?: (event: CustomEvent<any>) => void;
      /**
      * CTA two click event. Emitted when CTA two is clicked
      */
      'onClickCtaTwo'?: (event: CustomEvent<any>) => void;
      /**
      * header link open in new tab or not
      */
      'openInNewTab'?: boolean;
      /**
      * orientation of dxp-content-item
      */
      'orientation'?: 'horizontal' | 'vertical';
      /**
      * to align play icon on bottom left side
      */
      'playIconBottomLeft'?: boolean;
      /**
      * position Of image/video
      */
      'positionOfMedia'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * type of the application
      */
      'ribbonType'?: string;
      /**
      * path of image if the header type is set to image
      */
      'src'?: string;
      /**
      * poster url that will be shown on video if headerType is video
      */
      'srcPoster'?: string;
      /**
      * src-video of video
      */
      'srcVideo'?: string;
      /**
      * Status of the application
      */
      'status'?: string;
      /**
      * Status url of the application
      */
      'statusUrl'?: string;
      /**
      * Status url of the application
      */
      'statusUrlOpenInNewTab'?: boolean;
      /**
      * type of video. can be either youtube, vimeo etc
      */
      'type'?: string;
      /**
      * description of video
      */
      'videoDescription'?: string;
      /**
      * name of video
      */
      'videoName'?: string;
      /**
      * video upload date
      */
      'videoUploadDate'?: string;
    }
    interface DxpContentItemGrid {
      /**
      * and text
      */
      'andText'?: string;
      /**
      * api url for content items data
      */
      'apiEndpoint'?: string;
      /**
      * number of columns in the grid
      */
      'column'?: number;
      /**
      * content data for child components
      */
      'contentData'?: any;
      /**
      * cta data for child components
      */
      'cta'?: any;
      /**
      * boolean to enable pagination on grid
      */
      'enablePagination'?: boolean;
      /**
      * first button label
      */
      'firstButtonLabel'?: string;
      /**
      * description to be shown in the header of Grid
      */
      'gridDescription'?: string;
      /**
      * eyebrow text to be shown in the header of Grid
      */
      'gridEyebrowText'?: string;
      /**
      * Title to be shown in the header of Grid
      */
      'gridTitle'?: string;
      /**
      * Link to destination for title
      */
      'gridTitleUrl'?: string;
      /**
      * class to be applied for header alignment
      */
      'headerAlignment'?: 'left' | 'right' | 'center';
      /**
      * boolean to hide pagination when only single page is present in pagination
      */
      'hidePaginationWhenSingle'?: boolean;
      /**
      * highlight the first column
      */
      'highlightFirstContentItem'?: boolean;
      /**
      * number of content items visible in one page of pagination
      */
      'itemsPerPage'?: number;
      /**
      * last button label
      */
      'lastButtonLabel'?: string;
      /**
      * next button label
      */
      'nextButtonLabel'?: string;
      /**
      * of text
      */
      'ofText'?: string;
      /**
      * Accessibility text for pagination input
      */
      'pageInputAccessibilityText'?: string;
      /**
      * page text
      */
      'pageText'?: string;
      /**
      * align pagination
      */
      'paginationAlignment'?: 'left' | 'right' | 'center';
      /**
      * pagination display caption text
      */
      'paginationDisplayText'?: string;
      /**
      * Pagination input validation message
      */
      'paginationValidationMessage'?: string;
      /**
      * previous button label
      */
      'previousButtonLabel'?: string;
      /**
      * Link to destination for title
      */
      'titleTarget'?: boolean;
    }
    interface DxpContentList {
      /**
      * content title accessibility data
      */
      'ariaLabel'?: string;
      /**
      * object to hold multiple content list items blocks that can be passed as json array
      */
      'contentListItems'?: any;
      /**
      * content header size
      */
      'headerSize'?: string;
      /**
      * content href
      */
      'href'?: string;
      /**
      * list item alignment
      */
      'orientation'?: 'vertical' | 'horizontal';
      /**
      * content target
      */
      'target'?: boolean;
      /**
      * content title text
      */
      'titleText'?: string;
    }
    interface DxpContentListItem {
      /**
      * content title accessibility
      */
      'ariaLabel'?: string;
      /**
      * content href
      */
      'href'?: string;
      /**
      * content sub title
      */
      'subTitle'?: string;
      /**
      * content target
      */
      'target'?: boolean;
    }
    interface DxpCookieConsent {
      /**
      * declare content cid
      */
      'cid'?: number;
      /**
      * declare content pid
      */
      'pid'?: number;
    }
    interface DxpCopyright {
      /**
      * Prop for the copyright text
      */
      'text'?: string;
    }
    interface DxpCountryItem {
      /**
      * country name
      */
      'name'?: string;
    }
    interface DxpCountryLanguageSelector {
      /**
      * contains country language response
      */
      'countryLanguageData'?: any;
      /**
      * END POINT URL
      */
      'endPointUrl'?: string;
      /**
      * targetUrl
      */
      'targetUrl'?: any;
    }
    interface DxpCta {
      /**
      * add custom color
      */
      'accentColor'?: string;
      /**
      * Alternative text for icon image
      */
      'alt'?: string;
      /**
      * btn-with-text
      */
      'ariaLabel'?: string;
      /**
      * full width button
      */
      'blockButton'?: boolean;
      /**
      * size of button
      */
      'buttonSize'?: 'xs' | 'sm' | 'md' | 'lg';
      /**
      * type of button
      */
      'buttonType'?: 'primary' | 'secondary' | 'branded';
      /**
      * state of button
      */
      'disabled'?: boolean;
      /**
      * title of cta needed for analytics
      */
      'dtmCtaTitle'?: string;
      /**
      * Cta link
      */
      'href'?: string;
      /**
      * Icon url of button
      */
      'iconAlign'?: 'left' | 'right';
      /**
      * to add icon badge
      */
      'iconBadge'?: string;
      /**
      * link type
      */
      'linkType'?: 'dxp-btn-video-link' | 'dxp-btn-download-link' | 'dxp-btn-external-link' | 'dxp-btn-internal-link' |
      'dxp-cta-link' | 'dxp-btn-custom-link' | 'dxp-cta-normal-link';
      /**
      * CTA one click event. Emitted when CTA one is clicked
      */
      'onCtaClickEvent'?: (event: CustomEvent<any>) => void;
      /**
      * analytics data emitter
      */
      'onDxp_comp'?: (event: CustomEvent<any>) => void;
      /**
      * Link target.  Set to true to open in an new window.
      */
      'openInNewTab'?: boolean;
      /**
      * Icon url of button
      */
      'src'?: string;
      /**
      * btn-with-text
      */
      'text'?: string;
      /**
      * type of cta
      */
      'type'?: 'icon' | 'link' | 'button';
    }
    interface DxpCtaList {
      /**
      * object to hold multiple CTA blocks that can be passed as json array
      */
      'ctaList'?: any;
      /**
      * orientation of icons list (horizontal/ vertical)
      */
      'orientation'?: 'horizontal' | 'vertical';
      /**
      * title style property
      */
      'titleStyle'?: string;
      /**
      * title text property
      */
      'titleText'?: string;
    }
    interface DxpDataGrid {
      /**
      * api url for data of grid
      */
      'apiUrl'?: string;
      /**
      * page data attribute
      */
      'data'?: any;
      /**
      * configuaration  to enable export function
      */
      'enableExport'?: boolean;
      /**
      * enableFilter - flag to enable/disable filter dialog
      */
      'enableFilter'?: boolean;
      /**
      * flag to show/hide pagination
      */
      'enablePagination'?: boolean;
      /**
      * configuaration  to enable row selction
      */
      'enableRowSelection'?: boolean;
      /**
      * configuaration  to enable search data function
      */
      'enableSearch'?: boolean;
      /**
      * page stackheaders bgcolor attribute
      */
      'enableStackheaderBgcolor'?: boolean;
      /**
      * page headers attribute
      */
      'headerUrl'?: string;
      /**
      * page headers attribute
      */
      'headers'?: any;
      /**
      * grid height
      */
      'height'?: string;
      /**
      * max number of columns that can be pinned
      */
      'maxColumnPins'?: number;
      /**
      * grid no of rows
      */
      'rowsperpage'?: number;
      /**
      * grid selection type
      */
      'selectionType'?: 'page' | 'grid';
      /**
      * page stackheaders attribute
      */
      'stackHeaders'?: any;
      /**
      * sticky header: boolean
      */
      'stickyHeader'?: boolean;
      /**
      * grid width
      */
      'width'?: string;
    }
    interface DxpDataGridCell {
      /**
      * cell key
      */
      'cellKey'?: string;
      /**
      * sort and filter options
      */
      'cellOptions'?: any;
      /**
      * Cell type
      */
      'cellType'?: 'text' | 'cta' | 'checkbox';
      /**
      * content inside cell of grid
      */
      'content'?: string;
      /**
      * cell data
      */
      'data'?: any;
      /**
      * enableFilter - flag to enable/disable filter dialog
      */
      'enableFilter'?: boolean;
      /**
      * header false
      */
      'isHeader'?: boolean;
      /**
      * Event to emit cell event
      */
      'onDxpDataGridEvents'?: (event: CustomEvent<{}>) => void;
      /**
      * Event to emit on click header cell
      */
      'onToggleFilterEvent'?: (event: CustomEvent<{}>) => void;
      /**
      * showFilters - flag to show/hide filter dialog
      */
      'showFilters'?: boolean;
      /**
      * cell width
      */
      'width'?: string;
    }
    interface DxpDataGridFilter {
      /**
      * filter data
      */
      'cellKey'?: any;
      /**
      * cell options
      */
      'cellOptions'?: any;
      /**
      * Event to emit click events
      */
      'onClickFilter'?: (event: CustomEvent<{}>) => void;
      /**
      * Event to emit filter events
      */
      'onFilterGrid'?: (event: CustomEvent<{}>) => void;
      /**
      * Event to emit pin events
      */
      'onPinColumn'?: (event: CustomEvent<{}>) => void;
      /**
      * Event to emit sort events
      */
      'onSortGrid'?: (event: CustomEvent<{}>) => void;
    }
    interface DxpDataGridRow {
      /**
      * attribute to pass row data
      */
      'data'?: any;
      /**
      * attribute to check row and head row
      */
      'isHeader'?: boolean;
      /**
      * attribute to check stackheader
      */
      'isStackHeader'?: boolean;
      /**
      * attribute to check color of stackhead
      */
      'stackHeaderColor'?: boolean;
    }
    interface DxpFacetedFilter {
      /**
      * sets the api-endpoint for filter properties
      */
      'apiEndpoint'?: string;
      /**
      * sets the close window for search filter
      */
      'closeWindow'?: string;
      /**
      * holds the content to be used to create individual filter
      */
      'filterItems'?: any;
      /**
      * holds the content data used to create filter
      */
      'filterItemsJson'?: any;
      /**
      * sets the content data used to create filter
      */
      'filterJson'?: any;
      /**
      * sets the type of filter to be created
      */
      'filterType'?: any;
      /**
      * sets the search-filter heading
      */
      'heading'?: string;
      /**
      * sets whether header is required
      */
      'isHeaderRequired'?: boolean;
      /**
      * sets whether filter has a subcategory
      */
      'isSubCategory'?: string;
    }
    interface DxpFacetedFilterItem {
      /**
      * checkbox to expand the filter item description
      */
      'isSubCategory'?: boolean;
      /**
      * sets the description
      */
      'itemDescription'?: string;
      /**
      * sets the sub-title
      */
      'itemSubtitle'?: string;
      /**
      * sets the title
      */
      'itemTitle'?: string;
      /**
      * checkbox to expand the filter item description
      */
      'showExpanded'?: boolean;
    }
    interface DxpFeedback {
      /**
      * prop holds api url
      */
      'apiUrl'?: string;
      /**
      * prop holds app id
      */
      'appId'?: string;
      /**
      * prop holds content id
      */
      'contentId'?: string;
      /**
      * feedbackAdditionalText for text area
      */
      'feedbackAdditionalText'?: string;
      /**
      * feedbackAdditionalTextPlaceholder for text area
      */
      'feedbackAdditionalTextPlaceholder'?: string;
      /**
      * prop for inject feedback item list
      */
      'feedbackItemList'?: any[];
      /**
      * prop for feedback-title
      */
      'feedbackTitle'?: string;
      /**
      * prop to hold the value to show textarea
      */
      'isAdditionalCommentRequired'?: boolean;
      /**
      * prop holds number of reviews to load more reviews
      */
      'reviewsLimit'?: number;
      /**
      * prop holds additional comment value
      */
      'textAreaLabel'?: string;
      /**
      * prop holds username key
      */
      'usernameKey'?: string;
      /**
      * prop holds username key
      */
      'usernameKeyLocation'?: 'COOKIE' | 'SESSION' | 'OTHER';
    }
    interface DxpFeedbackDisplay {
      /**
      * prop holds fetch path value for API
      */
      'displayUserName'?: string;
      /**
      * prop holds additional comment
      */
      'feedbackAdditionalText'?: string;
      /**
      * prop holds feedback value
      */
      'feedbackValue'?: any;
      /**
      * prop holds cta value
      */
      'starCount'?: number;
      /**
      * prop holds timestamp value
      */
      'timeStamp'?: any;
    }
    interface DxpFeedbackItem {
      /**
      * prop to hold feedback object values
      */
      'configData'?: any;
      /**
      * display feedback as
      */
      'displayAs'?: 'star' | 'dropdown' | 'radio';
      /**
      * holds the individual feedback id
      */
      'feedbackId'?: string;
      /**
      * prop to hold feedback individual title
      */
      'feedbackRatingTitle'?: any;
      /**
      * analytics data emitter
      */
      'onDxp_feedback'?: (event: CustomEvent<any>) => void;
      /**
      * event Emit for dropdown
      */
      'onEmitfeedback'?: (event: CustomEvent<any>) => void;
      /**
      * event Emit for radio feedback
      */
      'onRadioFeedback'?: (event: CustomEvent<any>) => void;
      /**
      * event Emit for star rating
      */
      'onStarFeedback'?: (event: CustomEvent<any>) => void;
      /**
      * dropdown placeholder
      */
      'placeholder'?: string;
      /**
      * prop to hold star length
      */
      'starCount'?: number;
    }
    interface DxpFlexLayout {
      /**
      * borderStyle
      */
      'borderStyle'?: string;
      /**
      * reverse columns for small devices
      */
      'columnReverse'?: boolean;
    }
    interface DxpFlexLayoutItem {
      /**
      * background image path
      */
      'bgImage'?: string;
      /**
      * borderStyle
      */
      'borderStyle'?: string;
      /**
      * column width for small laptops - screens equal to or greater than 992px wide
      */
      'columnWidthLg'?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
      /**
      * column width for tablets - screens equal to or greater than 768px wide
      */
      'columnWidthMd'?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
      /**
      * column width for phablets - screens less than 768px wide
      */
      'columnWidthSm'?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
      /**
      * column width for laptops and desktops - screens equal to or greater than 1200px wide
      */
      'columnWidthXl'?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
      /**
      * padding style for large devices
      */
      'paddingStyleLg'?: string;
      /**
      * padding style for Medium devices
      */
      'paddingStyleMd'?: string;
      /**
      * padding style for Small devices
      */
      'paddingStyleSm'?: string;
      /**
      * padding style for Xl devices
      */
      'paddingStyleXl'?: string;
    }
    interface DxpFlipbox {
      /**
      * background color for back part
      */
      'backgroundColorBack'?: string;
      /**
      * background color for front part
      */
      'backgroundColorFront'?: string;
      /**
      * css styling for border of back part
      */
      'borderStyleBack'?: string;
      /**
      * css styling for border of front part
      */
      'borderStyleFront'?: string;
      /**
      * css styling for border of front part
      */
      'customStyleClass'?: string;
      /**
      * flipping direction
      */
      'flipDirection'?: 'horizontal' | 'vertical';
      /**
      * heading for back part
      */
      'headingBack'?: string;
      /**
      * heading for front part
      */
      'headingFront'?: string;
      /**
      * height of the box
      */
      'height'?: string;
      /**
      * width of the box
      */
      'width'?: string;
    }
    interface DxpFooter {
      /**
      * contentListData - utilized by DXP footer script support
      */
      'contentListData'?: any;
      /**
      * copyrightData - utilized by DXP footer script support
      */
      'copyrightData'?: any;
      /**
      * countryLanguageData - utilized by DXP footer script support
      */
      'countryLanguageData'?: any;
      /**
      * ctaListData - utilized by DXP footer script support
      */
      'ctaListData'?: any;
      /**
      * isContentList Present
      */
      'enableContentlist'?: boolean;
      /**
      * is Copyright Present
      */
      'enableCopyright'?: boolean;
      /**
      * is Country Language Selector Present
      */
      'enableCountrylanguageselectors'?: boolean;
      /**
      * is QuickLink Present
      */
      'enableFooterlink'?: boolean;
      /**
      * isLogo Present
      */
      'enableLogo'?: boolean;
      /**
      * isCTA Present
      */
      'enableQuicklink'?: boolean;
      /**
      * is Social Follow Present
      */
      'enableSociallinks'?: boolean;
      /**
      * footer object which contains data for all elements
      */
      'footerData'?: any;
      /**
      * footerlinkData - utilized by DXP footer script support
      */
      'footerlinkData'?: any;
      /**
      * logoData - utilized by DXP footer script support
      */
      'logoData'?: any;
      /**
      * socialFollowData - utilized by DXP footer script support
      */
      'socialFollowData'?: any;
    }
    interface DxpForm {
      /**
      * holds api end point path
      */
      'apiUrl'?: string;
      /**
      * button position
      */
      'buttonPosition'?: 'left' | 'right' | 'center';
      /**
      * btn-with-text
      */
      'buttonText'?: string;
      /**
      * type of button
      */
      'buttonType'?: 'primary' | 'secondary' | 'branded';
      /**
      * formId - to get the form JSON using formID
      */
      'formId'?: string;
      /**
      * formJson - to pass json and render form based on the json data
      */
      'formJson'?: any;
      /**
      * if form submit called
      */
      'onFormSubmitted'?: (event: CustomEvent<any>) => void;
    }
    interface DxpGridPagination {
      /**
      * Index of currently showing page
      */
      'currentPageIndex'?: number;
      /**
      * Event to emit when changing current page
      */
      'onToPageNumber'?: (event: CustomEvent<{}>) => void;
      /**
      * flag to show/hide pagination
      */
      'showPaginationSection'?: boolean;
      /**
      * Total Number of records in data grid
      */
      'totalRows'?: number;
      /**
      * Total number of records per page
      */
      'totalRowsPerPage'?: number;
      /**
      * Pagination width
      */
      'width'?: string;
    }
    interface DxpHead {
      /**
      * content inside head-cell of table
      */
      'content'?: string;
    }
    interface DxpHeader {
      /**
      * Enable disable out of the box padding & margin around component
      */
      'containerFluid'?: boolean;
    }
    interface DxpHeaderRich {
      /**
      * Prop to display header background either transparent or solid
      */
      'backgroundType'?: 'transparent' | 'solid';
      /**
      * Prop to display fixed header
      */
      'isHeaderSticky'?: boolean;
    }
    interface DxpImage {
      /**
      * Alt/title text for image. Also for SEO.
      */
      'alt'?: string;
      /**
      * aria-label for image link. Also for accessibility.
      */
      'ariaLabel'?: string;
      /**
      * eyebrow of caption to be shown over the image
      */
      'captionEyebrow'?: string;
      /**
      * position of the caption on image
      */
      'captionPosition'?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'centered';
      /**
      * subtitle of caption to be shown over the image
      */
      'captionSubtitle'?: string;
      /**
      * title of caption to be shown over the image
      */
      'captionTitle'?: string;
      /**
      * Device height
      */
      'deviceHeight'?: string;
      /**
      * Enables overlay on the image if set to true
      */
      'enableOverlay'?: boolean;
      /**
      * Focal point of XL images
      */
      'focalPoint'?: any;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * Link destination when clicked.
      */
      'href'?: string;
      /**
      * Text to be shown on overlay
      */
      'imageTitle'?: string;
      /**
      * imgSrc
      */
      'imgSrc'?: string;
      /**
      * analytics data emitter
      */
      'onDxp_comp'?: (event: CustomEvent<any>) => void;
      /**
      * Link target.  Set to true to open in an new window.
      */
      'openInNewTab'?: boolean;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * Path for the image to display
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
    }
    interface DxpImageCarousel {
      /**
      * This is property for autoplay of carousel
      */
      'autoplay'?: boolean;
      /**
      * carousel data
      */
      'carouselData'?: any;
      /**
      * This defines the speed of carousel
      */
      'pauseDuration'?: number;
      /**
      * Caption of slide
      */
      'slideCaption'?: string;
    }
    interface DxpImageGrid {
      /**
      * content data for child components
      */
      'imageContentData'?: any;
      /**
      * layout options to select image ordering placement
      */
      'layoutOption'?: string;
    }
    interface DxpImageSlide {
      /**
      * altternative text
      */
      'alt'?: string;
      /**
      * Eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * image-title
      */
      'imageTitle'?: string;
      /**
      * Caption of slide
      */
      'slideCaption'?: string;
      /**
      * Path for the image to display
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
      /**
      * Sub title
      */
      'subTitle'?: string;
    }
    interface DxpInLanguage {
      /**
      * redirection link
      */
      'link'?: string;
      /**
      * name
      */
      'name'?: string;
    }
    interface DxpInPageNav {
      /**
      * inPageNavItemsData
      */
      'inPageNavItemsData'?: any;
    }
    interface DxpInPageNavItem {
      /**
      * set to true when item is active
      */
      'active'?: boolean;
      /**
      * link to destination or id of section
      */
      'href'?: string;
      /**
      * text to be displayed in nav-bar
      */
      'text'?: string;
    }
    interface DxpInput {
      /**
      * define the Accessibility Text
      * @type {*}
      * @memberof Input
      */
      'accessibilityText'?: any;
      /**
      * validate Aria Valid or not
      * @type {boolean}
      * @memberof Input
      */
      'ariaInvalid'?: boolean;
      /**
      * Define Aria required or not
      * @type {boolean}
      * @memberof Input
      */
      'ariaRequired'?: boolean;
      /**
      * This attribute specifies that the input field should automatically get focus when the page loads
      * @memberof Input
      */
      'autoFocus'?: boolean;
      /**
      * To set unique identifier to the selector
      * @requires
      * @type {*}
      * @memberof Input
      */
      'contentId'?: any;
      /**
      * define the css classes used for this tag
      * @type {*}
      * @memberof Input
      */
      'cssClass'?: any;
      /**
      * It specifies that the input field is disabled
      * @memberof Input
      */
      'disabled'?: boolean;
      /**
      * This attribute specifies whether a form or input field should have auto complete on or off
      * @memberof Input
      */
      'enableAutocomplete'?: string;
      /**
      * The height attributes specify the height of an input type image element
      * @type {*}
      * @memberof Input
      */
      'height'?: any;
      /**
      * This attribute specifies that an input field must be optional before submitting the form
      * @ignore
      * @memberof Input
      */
      'isOptional'?: boolean;
      /**
      * This attribute specifies that an input field must be filled out before submitting the form
      * @ignore
      * @memberof Input
      */
      'isRequired'?: boolean;
      /**
      * To set label of the dxp-input
      * @requires
      * @type {*}
      * @memberof Input
      */
      'label'?: any;
      /**
      * The min attribute specify the maximum value for an input element (number, range)
      * @memberof Input
      */
      'max'?: string;
      /**
      * To allow maximum character in the dxp-input, default value is 100
      * @memberof Input
      */
      'maxLength'?: number;
      /**
      * The min attribute specify the minimum value for an input element (number, range)
      * @memberof Input
      */
      'min'?: string;
      /**
      * To allow minimum character in the dxp-input, default value is 0
      * @memberof Input
      */
      'minLength'?: number;
      /**
      * Name of the field
      * @type {*}
      * @memberof Input
      */
      'name'?: any;
      /**
      * Event listener for any changes in input field
      * @type {EventEmitter}
      * @memberof Input
      */
      'onTextValue'?: (event: CustomEvent<any>) => void;
      /**
      * To allow regular expression that the input element's value is checked
      * @type {*}
      * @memberof Input
      */
      'pattern'?: any;
      /**
      * This attribute specifies a hint that describes the expected value of an input field (a sample value or a short description of the format).
      * @type {*}
      * @memberof Input
      */
      'placeholder'?: any;
      /**
      * It specifies that the input field is read only
      * @memberof Input
      */
      'readonly'?: boolean;
      /**
      * define spell check required or not
      * @type {boolean}
      * @memberof Input
      */
      'spellcheckRequired'?: boolean;
      /**
      * This attribute specifies the legal number intervals for an input element
      * @memberof Input
      */
      'step'?: string;
      /**
      * To set the type of dxp-input
      * @requires
      * @type {*}
      * @memberof Input
      */
      'type'?: any;
      /**
      * To define the validation message if dxp-input is set to required
      * @memberof Input
      */
      'validationMessage'?: string;
      /**
      * To set default value of the dxp-input
      * @type {*}
      * @memberof Input
      */
      'value'?: any;
      /**
      * The width attributes specify the width of an input type image element
      * @memberof Input
      */
      'width'?: string;
    }
    interface DxpInputPassword {
      /**
      * define the Accessibility Text
      * @requires
      * @type {*}
      * @memberof Input-password
      */
      'accessibilityText'?: any;
      /**
      * This attribute specifies that the input field should automatically get focus when the page loads
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'autoFocus'?: boolean;
      /**
      * To set unique identifier to the selector
      * @requires
      * @type {*}
      * @memberof Input-password
      */
      'contentId'?: any;
      /**
      * It specifies that the input field is disabled
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'disabled'?: boolean;
      /**
      * To define the accessibility text when foucs is on error icon
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'errorIconAccessibilityText'?: string;
      /**
      * To show the tooltip text on error icon click
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'errorIconText'?: string;
      /**
      * To Specifie the color if password strength is good
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'goodPasswordColor'?: string;
      /**
      * To define the accessibility text when foucs is on help icon
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'helpIconAccessibilityText'?: string;
      /**
      * To show the tooltip text on help icon click
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'helpIconText'?: string;
      /**
      * This attribute specifies that an input field need the icon or not
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'iconType'?: 'error' | 'help' | 'success' | 'none';
      /**
      * To store icon type value for further use
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'iconTypeInfo'?: string;
      /**
      * To define the support text for password criterias to make more understandable
      * @requires
      * @ignore
      * @memberof Input-input
      */
      'instructionText'?: string;
      /**
      * This attribute specifies that an input field is optional
      * @requires
      * @ignore
      * @memberof Input-input
      */
      'isOptional'?: boolean;
      /**
      * This attribute specifies that an input field must be filled out before submitting the form
      * @requires
      * @ignore
      * @memberof Input-input
      */
      'isRequired'?: boolean;
      /**
      * To set label of the dxp-input
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'label'?: any;
      /**
      * To Specifie the color if password strength is medium
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'mediumPasswordColor'?: string;
      /**
      * To allow the regular expression of medium password
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'mediumPasswordPattern'?: any;
      /**
      * To allow minimum character in the dxp-input-password, default value is 0
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'minLength'?: number;
      /**
      * Event listener for any changes in input field
      * @type {EventEmitter}
      * @memberof Input-password
      */
      'onPasswordValue'?: (event: CustomEvent<any>) => void;
      /**
      * To allow regular expression for the password criteria
      * @requires
      * @type {*}
      * @memberof Input-password
      */
      'passwordCriteria'?: any;
      /**
      * It specifies that strength of the password
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'passwordStrength'?: string;
      /**
      * This attribute specifies a hint that describes the expected value of an input field (a sample value or a short description of the format).
      * @required
      * @type {*}
      * @memberof Input-password
      */
      'placeholder'?: any;
      /**
      * It specifies that whether need to show progress bar or not
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'progressBar'?: boolean;
      /**
      * It specifies that whether need to show progress bar or not
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'showCriteria'?: boolean;
      /**
      * It specifies the  tooltip visibility(show or hide)
      * @memberof Input-password
      */
      'showTooltip'?: boolean;
      /**
      * color code for password strength
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'statusColor'?: string;
      /**
      * To allow the regular expression of strong password
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'strongPasswordPattern'?: any;
      /**
      * To define the accessibility text when foucs is on success icon
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'successIconAccessibilityText'?: string;
      /**
      * To define the validation message if dxp-input is set to required
      * @requires
      * @type {*}
      * @memberof Input-password
      */
      'unmaskValue'?: boolean;
      /**
      * valid count of the password criteria
      * @requires ignore
      * @memberof Input-password
      */
      'validCount'?: number;
      /**
      * To unmask password value in dxp-input
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'validationMessage'?: string;
      /**
      * Value of the password
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'value'?: string;
      /**
      * To Specifie the color if password strength is weak
      * @requires
      * @ignore
      * @memberof Input-password
      */
      'weakPasswordColor'?: string;
    }
    interface DxpLanguageItem {
      /**
      * Accessibility text
      */
      'accessibilityText'?: any;
      /**
      * display language
      */
      'inLanguage'?: any;
      /**
      * language in plain English
      */
      'language'?: any;
      /**
      * URL for particular language
      */
      'link'?: any;
      /**
      * locale for the language
      */
      'locale'?: any;
      /**
      * if language changed
      */
      'onLanguageChanged'?: (event: CustomEvent<any>) => void;
      /**
      * selected language
      */
      'selectedLanguage'?: boolean;
    }
    interface DxpLanguageSelector {
      /**
      * url for language json
      */
      'apiUrl'?: any;
      /**
      * object to hold language locales passed as json array
      */
      'languageLocales'?: any;
    }
    interface DxpLine {
      /**
      * Prop for backgroundColor
      */
      'backgroundColor'?: string;
      /**
      * Prop for borderColor
      */
      'borderColor'?: string;
      /**
      * Prop for borderWidth
      */
      'borderWidth'?: number;
      /**
      * Prop for customClass
      */
      'customClass'?: string;
      /**
      * height for line
      */
      'height'?: number;
      /**
      * Prop for height for lg device
      */
      'heightLg'?: number;
      /**
      * Prop for height md device
      */
      'heightMd'?: number;
      /**
      * Prop for height for sm device
      */
      'heightSm'?: number;
      /**
      * Prop for height for xl device
      */
      'heightXl'?: number;
      /**
      * Prop for line-type
      */
      'type'?: string;
    }
    interface DxpLocationSearchBanner {
      /**
      * Alt/title text for image. Also for SEO.
      */
      'alt'?: string;
      /**
      * api-key for url to search offer
      */
      'apiKey'?: any;
      /**
      * aria-label for image link. Also for accessibility.
      */
      'ariaLabel'?: string;
      /**
      * Location search banner data for script support
      */
      'bannerData'?: any;
      /**
      * bannerText
      */
      'bannerTitle'?: string;
      /**
      * description
      */
      'descriptionText'?: string;
      /**
      * Eyeborw title
      */
      'eyebrowTitle'?: string;
      /**
      * Focal point of XL images
      */
      'focalPoint'?: any;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * This emit the selected checkbox data to listen any event listener
      */
      'onLocationSelected'?: (event: CustomEvent<any>) => void;
      /**
      * placeholder text for search box
      */
      'placeholder'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * text to show in the CTA
      */
      'searchBtnText'?: string;
      /**
      * CTA type to show the link OR button
      */
      'searchBtnType'?: any;
      /**
      * CTA input field type
      */
      'searchInputType'?: any;
      /**
      * searchType for search offer by cities,region ex
      */
      'searchType'?: any;
      /**
      * Image path to display the banner image
      */
      'src'?: string;
    }
    interface DxpLocationSelector {
      /**
      * api-key for url to search offer
      */
      'apiKey'?: any;
      /**
      * if search location changed
      */
      'onSearchLocationChanged'?: (event: CustomEvent<any>) => void;
      /**
      * placeholder text for search box
      */
      'placeholder'?: string;
      /**
      * search location data for script support
      */
      'searchLocationData'?: any;
      /**
      * searchType for search offer by cities,region ex
      */
      'searchType'?: any;
    }
    interface DxpLogo {
      /**
      * alt text for logo
      */
      'alt'?: string;
      /**
      * accessibility text for logo
      */
      'ariaLabel'?: string;
      /**
      * url to link to when logo clicked
      */
      'href'?: string;
      /**
      * title text for logo
      */
      'logoTitle'?: string;
      /**
      * analytics data emitter
      */
      'onDxp_comp'?: (event: CustomEvent<any>) => void;
      /**
      * schema type for SEO
      */
      'schemaType'?: string;
      /**
      * logo img src
      */
      'src'?: string;
      /**
      * logo img src when small viewport
      */
      'srcSm'?: string;
      /**
      * window to target for link
      */
      'target'?: boolean;
    }
    interface DxpMessage {
      /**
      * show/hide close botton flag
      */
      'hideCloseBtn'?: boolean;
      /**
      * object to hold multiple message texts that can be passed as json array
      */
      'messageTexts'?: any;
      /**
      * Emit event on click of Close button
      */
      'onCloseButton'?: (event: CustomEvent<any>) => void;
      /**
      * severity of the message - warn, info, error, success, general
      */
      'severity'?: 'warn' | 'info' | 'error' | 'success' | 'general';
    }
    interface DxpMessageList {
      /**
      * object to hold multiple message blocks that can be passed as json array
      */
      'messages'?: any;
    }
    interface DxpMessageText {
      /**
      * summary text of the message displayed in bold
      */
      'text'?: string;
    }
    interface DxpModal {
      /**
      * accessibility text for primary footer button
      */
      'accessibilityTextFooterPrimary'?: string;
      /**
      * accessibility text for secondary footer button
      */
      'accessibilityTextFooterSecondary'?: string;
      /**
      * button position
      */
      'buttonPosition'?: 'left' | 'right' | 'center';
      /**
      * close modal on Esc keypress
      */
      'closeOnEscKey'?: boolean;
      /**
      * close modal on click outside of modal
      */
      'closeOnOutsideClick'?: boolean;
      /**
      * to show demo for modal
      */
      'demo'?: boolean;
      /**
      * to determine footer type of modal
      */
      'footerType'?: string;
      /**
      * header logo configurations for modal
      */
      'headerLogo'?: any;
      /**
      * configurable property for cancel button
      */
      'isCancelButtonRequire'?: boolean;
      /**
      * configurable property for close button
      */
      'isCloseButtonRequired'?: boolean;
      /**
      * make modal work as a sidebar
      */
      'isSidebar'?: boolean;
      /**
      * title for footer primary button
      */
      'linkTitleFooterPrimary'?: string;
      /**
      * title for footer secondary button
      */
      'linkTitleFooterSecondary'?: string;
      /**
      * link to target when footer primary button is clicked
      */
      'linkUrlFooterPrimary'?: string;
      /**
      * link to target when footer secondary button is clicked
      */
      'linkUrlFooterSecondary'?: string;
      /**
      * description text of modal
      */
      'modalDescription'?: string;
      /**
      * Subtitle text of modal
      */
      'modalSubtitle'?: string;
      /**
      * Title text of modal
      */
      'modalTitle'?: string;
      /**
      * Analytics data emitter
      */
      'onDxp_comp'?: (event: CustomEvent<any>) => void;
      /**
      * event to be emitted on closing modal
      */
      'onModalClose'?: (event: CustomEvent<any>) => void;
      /**
      * event to be emitted on opening modal
      */
      'onModalOpen'?: (event: CustomEvent<any>) => void;
      /**
      * event to be emitted on primary button action
      */
      'onModalPrimaryButtonAction'?: (event: CustomEvent<any>) => void;
      /**
      * event to be emitted on secondary button action
      */
      'onModalSecondaryButtonAction'?: (event: CustomEvent<any>) => void;
      /**
      * flag to determine url to be open in new tab for primary footer button
      */
      'openInNewTabFooterPrimary'?: boolean;
      /**
      * flag to determine url to be open in new tab for primary footer button
      */
      'openInNewTabFooterSecondary'?: boolean;
      /**
      * Footer primary button text
      */
      'primaryButtonText'?: string;
      /**
      * to set modal's right space
      */
      'right'?: number;
      /**
      * Footer secondary button text
      */
      'secondaryButtonText'?: string;
      /**
      * configure sidebar position
      */
      'sidebarPosition'?: 'left' | 'right';
      /**
      * to set modal's top space
      */
      'top'?: number;
      /**
      * to set modal width
      */
      'width'?: number;
    }
    interface DxpNav {
      /**
      * api url for navigation
      */
      'apiUrl'?: string;
      /**
      * the child element
      */
      'currentChild'?: HTMLElement;
      /**
      * identify currentNav from menu container
      */
      'currentNav'?: HTMLElement;
      /**
      * Listener that looks for navigation item object to be assigned/changed externally
      */
      'navData'?: any;
      /**
      * background image for menu container
      */
      'overlayBgImage'?: string;
    }
    interface DxpNavGroup {
      /**
      * Accessibility. Screen readers will red this.
      */
      'accessibilityText'?: string;
      /**
      * Listener that looks for content list items object to be assigned/changed externally
      */
      'child'?: any;
      /**
      * set active link manually (for angular route)
      */
      'isActive'?: boolean;
      /**
      * Is nested menu items
      */
      'isNestedMenu'?: boolean;
      /**
      * Link title (Display on mouse hover)
      */
      'linkTitle'?: string;
      /**
      * link url
      */
      'menuRouteLink'?: string;
      /**
      * Navigation text will display in browser
      */
      'navigationTitle'?: string;
    }
    interface DxpNavItem {
      /**
      * Accessibility. Screen readers will red this.
      */
      'accessibilityText'?: string;
      /**
      * Alternative text for menu icon image
      */
      'altText'?: string;
      /**
      * Nav sub items
      */
      'child'?: any;
      /**
      * Is nested menu items
      */
      'isNestedMenu'?: boolean;
      /**
      * Link title (Display on mouse hover)
      */
      'linkTitle'?: string;
      /**
      * link url
      */
      'menuRouteLink'?: string;
      /**
      * Navigation text will display in browser
      */
      'navigationTitle'?: string;
      /**
      * url of menu icon image
      */
      'src'?: string;
    }
    interface DxpNavItemContent {
      /**
      * description from API
      */
      'description'?: string;
      /**
      * description while authoring
      */
      'descriptionText'?: string;
      /**
      * link title properties
      */
      'linkTitle'?: string;
      /**
      * menu route link properties
      */
      'menuRouteLink'?: string;
      /**
      * navigation title properties
      */
      'navigationTitle'?: string;
      /**
      * prop to configure link target
      */
      'openInNewTab'?: boolean;
    }
    interface DxpNavMenu {
      /**
      * Accessibility. Screen readers will read this.
      */
      'accessibilityText'?: string;
      /**
      * group container(secondary navigation)
      */
      'child'?: any;
      /**
      * title will display in browser
      */
      'linkTitle'?: string;
      /**
      * title will display in browser
      */
      'navigationTitle'?: string;
      /**
      * if search term changed
      */
      'onChildClickEvent'?: (event: CustomEvent<any>) => void;
      /**
      * if search term changed
      */
      'onNavHeaderClicked'?: (event: CustomEvent<any>) => void;
      /**
      * background image for menu container
      */
      'overlayBgImage'?: string;
      /**
      * Listener that looks for quick link items object to be assigned/changed externally
      */
      'quickLinks'?: any;
    }
    interface DxpNavSubItem {
      /**
      * Accessibility. Screen readers will red this.
      */
      'accessibilityText'?: string;
      /**
      * Link title (Display on mouse hover)
      */
      'linkTitle'?: string;
      /**
      * url of menu icon image
      */
      'menuIcon'?: string;
      /**
      * link url
      */
      'menuRouteLink'?: string;
      /**
      * Navigation text will display in browser
      */
      'navigationTitle'?: string;
    }
    interface DxpNavigation {
      /**
      * api url for navigation
      */
      'apiUrl'?: string;
      /**
      * Navigation items
      */
      'navData'?: any;
    }
    interface DxpNavigationBanner {
      /**
      * apply default indentation for navigation banner
      */
      'applyIndentation'?: boolean;
      /**
      * cta data for child components
      */
      'ctaData'?: any;
      /**
      * dropdown data
      */
      'dropDownData'?: any;
      /**
      * eyebrow title
      */
      'eyebrowTitle'?: string;
      /**
      * navigation title
      */
      'navTitle'?: string;
      /**
      * dropdown placeholder
      */
      'placeholder'?: string;
      /**
      * navigation sub title
      */
      'subTitle'?: string;
      /**
      * navigation banner class for half width
      */
      'verticalContentBanner'?: boolean;
    }
    interface DxpOverlay {
      /**
      * to show demo for modal
      */
      'demo'?: boolean;
    }
    interface DxpPageHeader {
      /**
      * More action button list
      */
      'appMenuItemsList'?: any[];
      /**
      * More actions items slot
      */
      'hasActionItems'?: boolean;
      /**
      * App menu available or not
      */
      'hasAppMenu'?: boolean;
      /**
      * Search box slot
      */
      'hasSearchBox'?: boolean;
      /**
      * Link click event. Emitted when link is clicked
      */
      'onAppMenuItemClick'?: (event: CustomEvent<any>) => void;
      /**
      * Page title
      */
      'pageTitle'?: string;
    }
    interface DxpPagination {
      /**
      * and text
      */
      'andText'?: string;
      /**
      * Index of currently showing page
      */
      'currentPageIndex'?: number;
      /**
      * display caption text
      */
      'displayText'?: string;
      /**
      * first button label
      */
      'firstButtonLabel'?: string;
      /**
      * Flag to hide pagination if single page present
      */
      'hideWhenSinglePage'?: boolean;
      /**
      * Accessibility text for pagination input
      */
      'inputAccessibilityText'?: string;
      /**
      * last button label
      */
      'lastButtonLabel'?: string;
      /**
      * next button label
      */
      'nextButtonLabel'?: string;
      /**
      * of text
      */
      'ofText'?: string;
      /**
      * Event to emit when changing current page
      */
      'onToPageNumber'?: (event: CustomEvent<{}>) => void;
      /**
      * page text
      */
      'pageText'?: string;
      /**
      * Pagination position
      */
      'position'?: 'left' | 'center' | 'right';
      /**
      * previous button label
      */
      'previousButtonLabel'?: string;
      /**
      * Total number of records
      */
      'totalUnits'?: number;
      /**
      * Number of records per page
      */
      'unitsPerPage'?: number;
      /**
      * Pagination input validation message
      */
      'validationMessage'?: string;
      /**
      * Pagination width
      */
      'width'?: string;
    }
    interface DxpPanelMenu {
      /**
      * Enable adaptive or fixed width designs
      */
      'fixedWidth'?: boolean;
      /**
      * Enable icon only labels on mobile devices
      */
      'iconOnlySm'?: boolean;
      /**
      * Nested menu elements
      */
      'menuItems'?: {
        // tslint:disable-next-line: completed-docs
        menuTitle: string,
        // tslint:disable-next-line: completed-docs
        active?: boolean,
        // tslint:disable-next-line: completed-docs
        content: string,
        // tslint:disable-next-line: completed-docs
        alt?: string,
        // tslint:disable-next-line: completed-docs
        menuIconSrc?: string,
        // tslint:disable-next-line: completed-docs
        subMenu?: any,
        // tslint:disable-next-line: completed-docs
        progressBar?: boolean,
        // tslint:disable-next-line: completed-docs
        currentValue?: number,
        // tslint:disable-next-line: completed-docs
        maxValue?: number
        // tslint:disable-next-line: completed-docs
        progressColor?: string
      }[];
    }
    interface DxpPanelSubMenu {
      /**
      * panel item status
      */
      'active'?: boolean;
      /**
      * alt text for panel icon
      */
      'alt'?: string;
      /**
      * sub-menu item contents
      */
      'content'?: string;
      /**
      * current value for progress  (for both)
      */
      'currentValue'?: number;
      /**
      * maximum value for progress  (for both)
      */
      'maxValue'?: number;
      /**
      * image url for panel icon
      */
      'menuIconSrc'?: string;
      /**
      * sub-panel item title
      */
      'menuTitle'?: string;
      /**
      * It specifies that whether need to show progress bar or not
      */
      'progressBar'?: boolean;
      /**
      * change color of progress  (for both)
      */
      'progressColor'?: string;
      /**
      * sub-menu - coma seperated string for sub-menu list for active menu panel
      */
      'subMenu'?: any;
    }
    interface DxpPills {
      /**
      * Prop for background color
      */
      'backgroundColor'?: string;
      /**
      * Prop for border color
      */
      'borderColor'?: string;
      /**
      * Prop for text color
      */
      'color'?: string;
      /**
      * notify consumer about delete event
      */
      'onDeleted'?: (event: CustomEvent<any>) => void;
      /**
      * property to whether show x button or now
      */
      'removable'?: boolean;
      /**
      * input text
      */
      'text'?: string;
    }
    interface DxpProgressbar {
      /**
      * to define custom text for accessibility
      */
      'accessibilityText'?: string;
      /**
      * if percentage to be shown in tooltip (for linear)
      */
      'asTooltip'?: boolean;
      /**
      * change color of progress background (for both)
      */
      'backgroundColor'?: string;
      /**
      * define background width of progress (for both)
      */
      'backgroundWidth'?: number;
      /**
      * current value of progress  (for both)
      */
      'currentValue'?: number;
      /**
      * define fontColor  (for both)
      */
      'fontColor'?: string;
      /**
      * If description should be shown or not  (for both)
      */
      'haveDescription'?: boolean;
      /**
      * define height  (for linear)
      */
      'height'?: string;
      /**
      * maximum value for progress  (for both)
      */
      'maxValue'?: number;
      /**
      * minimum value for progress  (for both)
      */
      'minValue'?: number;
      /**
      * move percentage text to right of progress  (for linear)
      */
      'percentRight'?: boolean;
      /**
      * change color of progress  (for both)
      */
      'progressColor'?: string;
      /**
      * description to show after progress count  (for both)
      */
      'progressDescription'?: string;
      /**
      * define width of progress  (for both)
      */
      'progressWidth'?: number;
      /**
      * show percentage instead of XX/XX type  (for both)
      */
      'showPercentage'?: boolean;
      /**
      * define if corner should be square instead of round
      */
      'squareCorner'?: boolean;
      /**
      * type of progress
      */
      'type'?: 'radial' | 'linear';
      /**
      * define width  (for both)
      */
      'width'?: string;
    }
    interface DxpProgressspinner {
      /**
      * Prop for animationDuration
      */
      'animationDuration'?: number;
      /**
      * Prop for fill
      */
      'fill'?: string;
      /**
      * Prop for fill radius
      */
      'radius'?: number;
      /**
      * Prop for strokeColor
      */
      'strokeColor'?: string;
      /**
      * Prop for strokeWidth
      */
      'strokeWidth'?: number;
    }
    interface DxpPullQuote {
      /**
      * Alt/title text for image. Also for SEO.
      */
      'alt'?: string;
      /**
      * aria-label for image link. Also for accessibility.
      */
      'ariaLabel'?: string;
      /**
      * name of the  author
      */
      'author'?: string;
      /**
      * cta data for child components
      */
      'ctaData'?: any;
      /**
      * eyebrow text for dxp-pull-quote
      */
      'eyebrowTitle'?: string;
      /**
      * Array of coordinates to set the focal point of the image. values can be passed as an array of coordinates to set the focal point of the image on small sized devices.[up, down, left, right]
      */
      'focalPoint'?: any;
      /**
      * focal point for large devices
      */
      'focalPointLg'?: any;
      /**
      * focal point for medium devices
      */
      'focalPointMd'?: any;
      /**
      * Link destination when clicked.
      */
      'href'?: string;
      /**
      * Text to be shown on overlay
      */
      'imageTitle'?: string;
      /**
      * Link target.  Set to true to open in an new window.
      */
      'openInNewTab'?: boolean;
      /**
      * profile of the author
      */
      'profile'?: string;
      /**
      * pullQuoteData
      */
      'pullQuoteData'?: any;
      /**
      * quote given by author
      */
      'quote'?: string;
      /**
      * whether image should use its size or be responsive
      */
      'responsive'?: boolean;
      /**
      * Path for the image to display
      */
      'src'?: string;
      /**
      * source lg
      */
      'srcLg'?: string;
      /**
      * source md
      */
      'srcMd'?: string;
      /**
      * title text for dxp-pull-quote
      */
      'titleText'?: string;
    }
    interface DxpRadioButton {
      /**
      * radiobutton alignment
      */
      'alignment'?: string;
      /**
      * radiobutton checked
      */
      'checked'?: boolean;
      /**
      * radiobutton checked
      */
      'isDisabled'?: boolean;
      /**
      * radiobutton group name
      */
      'name'?: string;
      /**
      * radiobutton even emitted
      */
      'onRadioSelected'?: (event: CustomEvent<any>) => void;
      /**
      * radio-button key
      */
      'radioKey'?: string;
      /**
      * radiobutton value
      */
      'radioValue'?: string;
    }
    interface DxpRadioGroup {
      /**
      * radio button alignment
      */
      'alignment'?: 'vertical' | 'horizontal';
      /**
      * radio button content id
      */
      'contentId'?: string;
      /**
      * Defines if the field is disabled
      */
      'isDisabled'?: boolean;
      /**
      * radio button group label
      */
      'label'?: string;
      /**
      * radio button name
      */
      'name'?: string;
      /**
      * emit custom event when radio button is clicked
      */
      'onRadionBtnLoad'?: (event: CustomEvent<any>) => void;
      /**
      * object to hold multiple content list items blocks that can be passed as json array
      */
      'radioBtn'?: any;
      /**
      * Defines if the field is required
      */
      'required'?: boolean;
      /**
      * Error message will appear if none of radio is selected
      */
      'validationMessage'?: string;
    }
    interface DxpRangeSlider {
      /**
      * accessibility text
      */
      'accessibilityText'?: string;
      /**
      * maximum value
      */
      'maxValue'?: number;
      /**
      * minimum value
      */
      'minValue'?: number;
      /**
      * emit range slider value
      */
      'onChangeValue'?: (event: CustomEvent<any>) => void;
      /**
      * range of slider
      */
      'range'?: any;
      /**
      * single or multi-thumb slider
      */
      'type'?: string;
      /**
      * value of range
      */
      'value'?: number;
    }
    interface DxpRegion {
      /**
      * region default site link with description
      */
      'description'?: string;
      /**
      * expand region item by default
      */
      'isOpen'?: boolean;
      /**
      * region name
      */
      'name'?: string;
    }
    interface DxpRegionSelector {
      /**
      * url of api that returns list of websites and locales
      */
      'apiUrl'?: string;
      /**
      * text be displayed on button
      */
      'buttonText'?: string;
      /**
      * cookie expiry time (in days)
      */
      'cookieExpiryTime'?: number;
      /**
      * country language page link
      */
      'countryLanguagePageLink'?: string;
      /**
      * other country or region option text
      */
      'countryLanguagePageText'?: string;
      /**
      * eyebrow text for region selector
      */
      'eyebrowText'?: string;
      /**
      * event, that'll be emitted when user clicks on the button (continue)
      */
      'onButtonClick'?: (event: CustomEvent<any>) => void;
      /**
      * list of websites in the request origin locale
      */
      'siteList'?: any;
      /**
      * title text for region selector
      */
      'titleText'?: string;
    }
    interface DxpSearch {
      /**
      * cfq - suggester config object Context Filter Query
      */
      'cfq'?: string;
      /**
      * cfqLocale - to add to cfq on locale change
      */
      'cfqLocale'?: string;
      /**
      * if search term changed
      */
      'onSearchTermChanged'?: (event: CustomEvent<any>) => void;
      /**
      * placeholder for search input
      */
      'placeholder'?: string;
      /**
      * resultPageExtension - search result page extension without .(dot)
      */
      'resultPageExtension'?: string;
      /**
      * resultPageUrl - search result page url
      */
      'resultPageUrl'?: string;
      /**
      * searchBoxSize - defines the height of search box
      */
      'searchBoxSize'?: 'sm' | 'md' | 'lg';
      /**
      * searchParamKey - search url parameter key
      */
      'searchParamKey'?: string;
      /**
      * searchType - search render type, can be advance or simple
      */
      'searchType'?: 'simple' | 'advance' | 'homepage';
      /**
      * showSuggestions - search url parameter key
      */
      'showSuggestions'?: boolean;
      /**
      * suggestApiUrl - API for suggest collection
      */
      'suggestApiUrl'?: string;
      /**
      * suggestCollection - suggest collection name
      */
      'suggestCollection'?: string;
      /**
      * suggestCount - suggester config object count
      */
      'suggestCount'?: number;
      /**
      * suggestDictionary - suggester config object dictionary
      */
      'suggestDictionary'?: string;
    }
    interface DxpSearchResult {
      /**
      * cfq - suggester config object Context Filter Query
      */
      'cfq'?: string;
      /**
      * cfqLocale - to add to cfq on locale change
      */
      'cfqLocale'?: string;
      /**
      * descriptionLength - search result description character length
      */
      'descriptionLength'?: number;
      /**
      * Error Message
      */
      'errorMessage'?: any;
      /**
      * highlightFields - search config object highlighting field
      */
      'highlightFields'?: string;
      /**
      * analytics data emitter
      */
      'onDxp_comp'?: (event: CustomEvent<any>) => void;
      /**
      * placeholder text for search box
      */
      'placeholder'?: string;
      /**
      * promotionsData - to display promotions links
      */
      'promotionsData'?: any;
      /**
      * promotionsKeywords - to display promotions links based on promotions keywords
      */
      'promotionsKeywords'?: string;
      /**
      * rows - search config object rows
      */
      'rows'?: number;
      /**
      * searchApiUrl - API for search
      */
      'searchApiUrl'?: string;
      /**
      * searchCollection - search collection name
      */
      'searchCollection'?: string;
      /**
      * searchFl - search config object fl
      */
      'searchFl'?: string;
      /**
      * searchParamKey - search url parameter key
      */
      'searchParamKey'?: string;
      /**
      * showPromotions - to show promotions links before search results
      */
      'showPromotions'?: boolean;
      /**
      * sortingField - search config object sorting field
      */
      'sortingField'?: string;
      /**
      * start - search config object start page
      */
      'start'?: number;
      /**
      * suggestApiUrl - API for suggest collection
      */
      'suggestApiUrl'?: string;
      /**
      * suggestCollection - suggest collection name
      */
      'suggestCollection'?: string;
      /**
      * suggestCount - suggester config object count
      */
      'suggestCount'?: string;
      /**
      * suggestDictionary - suggester config object dictionary
      */
      'suggestDictionary'?: string;
      /**
      * tags - to filter search results data based on specific tags
      */
      'tags'?: string;
      /**
      * titleLength - search result title character length
      */
      'titleLength'?: number;
      /**
      * text to be shown on view more button
      */
      'viewMoreText'?: string;
    }
    interface DxpSearchbox {
      /**
      * cfq - suggester config object Context Filter Query
      */
      'cfq'?: string;
      /**
      * cfqLocale - to add to cfq on locale change
      */
      'cfqLocale'?: string;
      /**
      * errorText - contains error message to display at bottom
      */
      'errorText'?: any;
      /**
      * noResultFlag - to hold value, in no search results
      */
      'noResultFlag'?: string;
      /**
      * placeholder text for search box
      */
      'placeholder'?: string;
      /**
      * holds total result
      */
      'resultCount'?: any;
      /**
      * searchedTerm - to hold the search value
      */
      'searchedTerm'?: string;
      /**
      * searchValue - to hold the search value
      */
      'searchedText'?: string;
      /**
      * suggestApiUrl - API for suggest collection
      */
      'suggestApiUrl'?: string;
      /**
      * suggestCollection - suggest collection name
      */
      'suggestCollection'?: string;
      /**
      * suggestCount - suggester config object count
      */
      'suggestCount'?: number;
      /**
      * suggestDictionary - suggester config object dictionary
      */
      'suggestDictionary'?: string;
    }
    interface DxpSelect {
      /**
      * selector
      */
      'dataList'?: any;
      /**
      * display fix height select
      */
      'fixHeight'?: boolean;
      /**
      * emit custom event when calendar is clicked
      */
      'onOptionSelected'?: (event: CustomEvent<any>) => void;
      /**
      * selected index
      */
      'selectedValue'?: any;
      /**
      * selector
      */
      'selector'?: string;
      /**
      * use index as value
      */
      'useIndexAsValue'?: boolean;
    }
    interface DxpSelectorMenu {
      /**
      * accessibility text for the searchbox
      */
      'accessibilityText'?: any;
      /**
      * shows additional value for option with details selector type
      */
      'additionalValue'?: string;
      /**
      * apiUrl - headers for API url
      */
      'apiHeaders'?: string;
      /**
      * apiUrl - suggest data API url
      */
      'apiUrl'?: string;
      /**
      * set autofocus for searchable type component
      */
      'autofocus'?: boolean;
      /**
      * set dataSourceKeyName for configurable key name while pass data
      */
      'dataSourceKeyName'?: string;
      /**
      * state of button
      */
      'disabled'?: boolean;
      /**
      * enable/disable lazy loading for the content loaded in the dropdown.
      */
      'enableLazyLoading'?: boolean;
      /**
      * make selector menu optional
      */
      'isOptional'?: boolean;
      /**
      * Array provide for the user
      */
      'items'?: any[];
      /**
      * label for selector menu
      */
      'label'?: string;
      /**
      * maximum record limit per page to enable lazy loading
      */
      'limit'?: any;
      /**
      * number of records key name for each api call when enableLazyLoading is true
      */
      'limitKeyName'?: string;
      /**
      * maximum characters allowed in the searchbox
      */
      'maxSearchCharLength'?: any;
      /**
      * minimum search character length
      */
      'minSearchCharLength'?: any;
      /**
      * page number / offset key name when enableLazyLoading is true
      */
      'offsetKeyName'?: string;
      /**
      * Emit after the api call is completed
      */
      'onApiCallCompleted'?: (event: CustomEvent<any>) => void;
      /**
      * emits when the search box is cleared
      */
      'onClearValue'?: (event: CustomEvent<any>) => void;
      /**
      * Emit current value in the searchbox
      */
      'onSearchEmitter'?: (event: CustomEvent<any>) => void;
      /**
      * Emit selected item
      */
      'onSelectedItemChanged'?: (event: CustomEvent<any>) => void;
      /**
      * Emit toggle change
      */
      'onToggleEmitter'?: (event: CustomEvent<any>) => void;
      /**
      * placeholder of selector menu
      */
      'placeholder'?: string;
      /**
      * set id attribute for selector component
      */
      'selectorId'?: string;
      /**
      * total number of pages key name when enableLazyLoading is true
      */
      'totalPagesKeyName'?: string;
      /**
      * method implemented in parent to to transform the data fetched from the APi
      */
      'transformData'?: (data: any[]) => {};
      /**
      * selector menu type
      */
      'type'?: string;
      /**
      * validation message
      */
      'validationMessage'?: string;
      /**
      * set the value of selector menu
      */
      'value'?: string;
      /**
      * width of the menu box
      */
      'width'?: number;
    }
    interface DxpShape {
      /**
      * horizontal alignment of content in shape
      */
      'align'?: 'left' | 'right' | 'center';
      /**
      * background color as hexcode of shape
      */
      'backgroundColor'?: string;
      /**
      * background image to be used in shape
      */
      'backgroundImage'?: string;
      /**
      * border color of shape
      */
      'borderColor'?: string;
      /**
      * border style of shape
      */
      'borderStyle'?: 'none' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset';
      /**
      * border width of shape
      */
      'borderWidth'?: number;
      /**
      * custom external css class for shape
      */
      'customClass'?: string;
      /**
      * height of shape
      */
      'height'?: number;
      /**
      * opacity of background of shape as 0-1 value where 1 is opaque and 0 is full transparent
      */
      'opacity'?: number;
      /**
      * type of shape
      */
      'type'?: 'rectangle' | 'round' | 'parallelogram' | 'triangle-up' | 'triangle-down' | 'triangle-left' | 'triangle-right';
      /**
      * vertical alignment of content in shape
      */
      'verticalAlign'?: 'top' | 'bottom' | 'middle';
      /**
      * width of shape
      */
      'width'?: number;
    }
    interface DxpSidebarMenu {
      /**
      * To display collapse in header/footer
      */
      'expandCollapseIconPosition'?: 'header' | 'footer';
      /**
      * prop to determine wherther to expand sidebar on hover or not
      */
      'expandOnHover'?: boolean;
      /**
      * sets the menu items to be display
      */
      'menuItems'?: any;
      /**
      * event to be emitted when sidebar is collapsed
      */
      'onCollapsed'?: (event: CustomEvent<any>) => void;
      /**
      * event to be emitted when sidebar is expanded
      */
      'onExpanded'?: (event: CustomEvent<any>) => void;
      /**
      * To toggle side panel collapse
      */
      'showExpandCollapseIcon'?: boolean;
      /**
      * To toggle side panel collapse
      */
      'showExpanded'?: boolean;
    }
    interface DxpSidebarMenuGroup {
      /**
      * sets the menu items to be display
      */
      'child'?: any;
      /**
      * sets logo alt
      */
      'menuAlt'?: string;
      /**
      * sets link for menu-logo to display
      */
      'menuHref'?: string;
      /**
      * sets the menu items to be display
      */
      'menuItem'?: any;
      /**
      * sets max height for the list of child elements inside a menu group
      */
      'menuItemsListMaxHeight'?: string;
      /**
      * sets route link
      */
      'menuSrc'?: string;
      /**
      * Navigation text will display in browser
      */
      'menuTitle'?: string;
      /**
      * Emit toggle change
      */
      'onToggleEmitter'?: (event: CustomEvent<any>) => void;
      /**
      * toggle variable to display popup
      */
      'viewPopup'?: boolean;
    }
    interface DxpSidebarMenuItem {
      /**
      * Link target.  Set to true to open in an new window.
      */
      'openInNewTab'?: boolean;
      /**
      * sets logo alt
      */
      'subMenuAlt'?: string;
      /**
      * sets link for sub-menu-logo to display
      */
      'subMenuHref'?: string;
      /**
      * Navigation text will display in browser
      */
      'subMenuIcon'?: string;
      /**
      * sets route link
      */
      'subMenuSrc'?: string;
      /**
      * Navigation text will display in browser
      */
      'subMenuTitle'?: string;
    }
    interface DxpSiteList {
      /**
      * responsible to get data from the server
      */
      'endPointUrl'?: string;
      /**
      * region list
      */
      'regions'?: any;
    }
    interface DxpSiteMap {
      /**
      * API URL
      */
      'apiUrl'?: string;
      /**
      * Eyebrow title
      */
      'eyebrow'?: string;
      /**
      * heading of site map
      */
      'heading'?: string;
      /**
      * hold multiple group items block that can be passed as json array
      */
      'siteMapData'?: any;
    }
    interface DxpSiteMapGroup {
      /**
      * accessibility label
      */
      'accessibility'?: string;
      /**
      * list item text
      */
      'heading'?: string;
      /**
      * hyperlink
      */
      'href'?: string;
    }
    interface DxpSiteMapGroupItem {
      /**
      * accessibility label
      */
      'accessibility'?: string;
      /**
      * title text of site map group
      */
      'heading'?: string;
      /**
      * hyperlink
      */
      'href'?: string;
    }
    interface DxpSiteMapList {}
    interface DxpSiteMapListItem {
      /**
      * accessibility label
      */
      'accessibility'?: string;
      /**
      * list item text
      */
      'heading'?: string;
      /**
      * hyperlink
      */
      'href'?: string;
    }
    interface DxpSocialLinks {
      /**
      * orientation of icons list (horizontal/ vertical)
      */
      'orientation'?: 'horizontal' | 'vertical';
      /**
      * text for heading of icons list
      */
      'socialLabel'?: string;
      /**
      * get list of all media platforms
      */
      'socialLinksItemList'?: any[];
      /**
      * Social links items - to be utilized by DXP framework
      */
      'socialLinksItems'?: any;
      /**
      * Type of social link
      */
      'socialType'?: string;
    }
    interface DxpSocialLinksItem {
      /**
      * accessibility text
      */
      'alt'?: string;
      /**
      * link to target for icon
      */
      'href'?: string;
      /**
      * set target for social share window
      */
      'openWindowAs'?: string;
      /**
      * get content to share
      */
      'shareContent'?: string;
      /**
      * title of the icon
      */
      'socialTitle'?: string;
      /**
      * Type of social link
      */
      'socialType'?: string;
      /**
      * link in new tab?
      */
      'target'?: boolean;
      /**
      * type of social links icon
      */
      'type'?: string;
    }
    interface DxpStep {
      /**
      * custom icon for the step
      */
      'iconPath'?: string;
      /**
      * label of the step
      */
      'name'?: string;
      /**
      * emit custom event when step is clicked
      */
      'onStepSelected'?: (event: CustomEvent<any>) => void;
      /**
      * stores the status of step
      */
      'status'?: 'unvisited' | 'active' | 'completed' | 'incomplete' | 'custom';
      /**
      * optional attribute which describes about the step
      */
      'stepInfo'?: string;
    }
    interface DxpStepTracker {
      /**
      * Steps - to be utilized by DXP framework
      */
      'steps'?: any;
      /**
      * alignment of step tracker based on value. true and false will render vertical and horizontal step tracker respectively
      */
      'verticalAlign'?: boolean;
    }
    interface DxpStickyFooter {
      /**
      * cta attributes
      */
      'cta'?: any;
      /**
      * footer type on component level
      */
      'footerType'?: string;
      /**
      * title Heading
      */
      'titleText'?: string;
    }
    interface DxpStickyFooterCta {
      /**
      * button style for cta
      */
      'buttonStyle'?: string;
      /**
      * download file name for cta
      */
      'downloadFile'?: string;
      /**
      * email body for cta
      */
      'emailBody'?: string;
      /**
      * email id for cta type email
      */
      'emailId'?: string;
      /**
      * email subject for cta
      */
      'emailSubject'?: string;
      /**
      * link text for cta
      */
      'linkText'?: string;
      /**
      * link type for cta
      */
      'linkType'?: string;
      /**
      * link url for cta
      */
      'linkUrl'?: string;
      /**
      * open link in new tab for cta
      */
      'openInNewTab'?: 'false';
      /**
      * Text for visually impaired for cta
      */
      'visuallyImpairedText'?: string;
    }
    interface DxpTabItem {
      /**
      * tab item status
      */
      'active'?: boolean;
      /**
      * alt text for tab icon
      */
      'alt'?: string;
      /**
      * animation status
      */
      'animationStatus'?: string;
      /**
      * arrow orientation
      */
      'arrowOrientation'?: string;
      /**
      * tab item contents
      */
      'content'?: string;
      /**
      * enable animation
      */
      'enableAnimation'?: boolean;
      /**
      * enable close
      */
      'enableClose'?: boolean;
      /**
      * Enable adaptive or fixed width designs
      */
      'fixedWidth'?: boolean;
      /**
      * Enable icon only labels on mobile devices
      */
      'iconOnlySm'?: boolean;
      /**
      * tab item is isDefault
      */
      'isDefault'?: boolean;
      /**
      * tab item is default view
      */
      'isDefaultView'?: boolean;
      /**
      * is default view on
      */
      'isDefaultViewOn'?: boolean;
      /**
      * emit close tab content event
      */
      'onCloseTabContent'?: (event: CustomEvent<any>) => void;
      /**
      * image url for tab icon
      */
      'tabIconSrc'?: string;
      /**
      * tab item title
      */
      'tabTitle'?: string;
      /**
      * vertical align
      */
      'verticalAlign'?: boolean;
      /**
      * vertical content position
      */
      'verticalContentPosition'?: any;
    }
    interface DxpTabList {
      /**
      * tab item status
      */
      'active'?: boolean;
      /**
      * alt text for tab icon
      */
      'alt'?: string;
      /**
      * animation status
      */
      'animationStatus'?: string;
      /**
      * arrowOrientation
      */
      'arrowOrientation'?: string;
      /**
      * tab item contents
      */
      'content'?: string;
      /**
      * Enable adaptive or fixed width designs
      */
      'fixedWidth'?: boolean;
      /**
      * Enable icon only labels on mobile devices
      */
      'iconOnlySm'?: boolean;
      /**
      * Enable icon only labels on mobile devices
      */
      'iconSm'?: boolean;
      /**
      * Nested tab elements
      */
      'nestedTabs'?: HTMLElement[];
      /**
      * emit activate tab content event
      */
      'onActivateTabs'?: (event: CustomEvent<any>) => void;
      /**
      * emit focus tab content event
      */
      'onFocusTabs'?: (event: CustomEvent<any>) => void;
      /**
      * image url for tab icon
      */
      'tabIconSrc'?: string;
      /**
      * tab item title
      */
      'tabTitle'?: string;
      /**
      * vertical align
      */
      'verticalAlign'?: boolean;
    }
    interface DxpTable {
      /**
      * accessibility text for table
      */
      'accessibilityText'?: string;
      /**
      * to facilitate object support in component
      */
      'data'?: any;
      /**
      * responsible for heading data which needs to be visible in table head
      */
      'heading'?: any[];
      /**
      * responsible for number of rows and data which needs to be visible in table rows head
      */
      'rows'?: any[];
    }
    interface DxpTabs {
      /**
      * cta data for child components
      */
      'cta'?: any;
      /**
      * isCTA Present
      */
      'enableCta'?: boolean;
      /**
      * eyebrow text for tabs
      */
      'eyebrowText'?: string;
      /**
      * Enable adaptive or fixed width designs
      */
      'fixedWidth'?: boolean;
      /**
      * Enable icon only labels on mobile devices
      */
      'iconOnlySm'?: boolean;
      /**
      * analytics data emitter
      */
      'onDxp_comp'?: (event: CustomEvent<any>) => void;
      /**
      * Nested tab elements
      */
      'tabItems'?: {
        /** holds the title of a tab item */
        tabTitle: string,
        /** determines if a given item is active or not */
        active?: boolean,
        /** determines which tab is the default one */
        isDefault?: boolean,
        /** determines if tab is the default view */
        isDefaultView?: boolean,
        /** determines if close is enabled */
        enableClose?: boolean,
        /** determines if animation is enabled */
        enableAnimation?: boolean,
        /** holds the animation status */
        animationStatus?: boolean,
        /** holds the content of a tab item */
        content: string,
        /** holds the alt text for a tab title */
        alt?: string,
        /** holds the link of icon for tab item title */
        tabIconSrc?: string }[];
        /**
        * Tabs Description
        */
        'tabsDescription'?: string;
        /**
        * Tabs Title
        */
        'tabsTitle'?: string;
        /**
        * Enable vertical alignment of tabs
        */
        'verticalAlign'?: boolean;
        /**
        * vertical content position
        */
        'verticalContentPosition'?: 'top' | 'bottom' | 'accordion';
      }
      interface DxpTagInput {
        /**
        * apiUrl - headers for API url
        */
        'apiHeaders'?: string;
        /**
        * apiUrl - suggest data API url
        */
        'apiUrl'?: string;
        /**
        * dataKey - key which contain API data
        */
        'dataKey'?: string;
        /**
        * groupByField - to group the objects data
        */
        'groupByField'?: string;
        /**
        * keysToDisplay - keys to display into suggestion list
        */
        'keysToDisplay'?: string;
        /**
        * if search tag items changed
        */
        'onTagItemsChanged'?: (event: CustomEvent<any>) => void;
        /**
        * input placeholder - to display the place holder text when input is empty
        */
        'placeholder'?: string;
        /**
        * tagsData - to hold tagsData
        */
        'tagsData'?: any;
      }
      interface DxpTblRow {}
      interface DxpTextarea {
        /**
        * textarea cols - to change the width of the textarea
        */
        'cols'?: number;
        /**
        * To make textarea disabled
        */
        'disabled'?: boolean;
        /**
        * To make textarea optional
        */
        'isOptional'?: boolean;
        /**
        * textarea label - to display the label text
        */
        'label'?: string;
        /**
        * To allow maximum character in the dxp-textarea, default value is 100
        */
        'maxLength'?: number;
        /**
        * To allow maximum character in the dxp-textarea, default value is 100
        */
        'minLength'?: number;
        /**
        * To allow textarea resizing
        */
        'nonResizable'?: boolean;
        /**
        * Event listener for any changes in textarea field
        */
        'onChangeText'?: (event: CustomEvent<any>) => void;
        /**
        * textarea placeholder - to display the place holder text when textarea is empty
        */
        'placeholder'?: string;
        /**
        * textarea required - to make the field like label and value mandatory and display error message
        */
        'required'?: boolean;
        /**
        * textarea rows - to change the height of the textarea
        */
        'rows'?: number;
        /**
        * textarea validationMessage - to display the validation message text
        */
        'validationMessage'?: string;
        /**
        * textarea value - to display the value text
        */
        'value'?: string;
        /**
        * textarea rows - to change the height of the textarea
        */
        'width'?: number;
      }
      interface DxpTile {
        /**
        * Auto play video
        */
        'autoPlay'?: boolean;
        /**
        * background type for regular banner
        */
        'backgroundType'?: 'image-background' | 'video-background';
        /**
        * text for badge
        */
        'badgeText'?: string;
        /**
        * cta for tile
        */
        'ctaListData'?: any;
        /**
        * is description for square tile
        */
        'description'?: string;
        /**
        * disable video controls
        */
        'disableControls'?: boolean;
        /**
        * eyebrow title
        */
        'eyebrowTitle'?: string;
        /**
        * Focal point of XL images
        */
        'focalPoint'?: any;
        /**
        * focal point for large devices
        */
        'focalPointLg'?: any;
        /**
        * focal point for medium devices
        */
        'focalPointMd'?: any;
        /**
        * href for tile component
        */
        'href'?: string;
        /**
        * icon type for header video
        */
        'iconType'?: 'light' | 'dark';
        /**
        * check if tile is square
        */
        'isSquare'?: boolean;
        /**
        * Link target.  Set to true to open in an new window.
        */
        'openInNewTab'?: boolean;
        /**
        * whether image should use its size or be responsive
        */
        'responsive'?: boolean;
        /**
        * Path for the Background image and video to display
        */
        'src'?: string;
        /**
        * source lg
        */
        'srcLg'?: string;
        /**
        * source md
        */
        'srcMd'?: string;
        /**
        * poster link Of video
        */
        'srcPoster'?: string;
        /**
        * title of caption to be shown over the image
        */
        'tileCaption'?: string;
        /**
        * description of video
        */
        'videoDescription'?: string;
        /**
        * name of video
        */
        'videoName'?: string;
        /**
        * video type like youtube, youku, akamai etc
        */
        'videoType'?: string;
        /**
        * video first published date
        */
        'videoUploadDate'?: string;
      }
      interface DxpTileGrid {
        /**
        * cta for tile grid
        */
        'ctaListData'?: any;
        /**
        * class to be applied for header alignment
        */
        'headerAlignment'?: 'left' | 'right' | 'center';
        /**
        * href for tile component
        */
        'href'?: string;
        /**
        * check if tile is square
        */
        'isSquare'?: boolean;
        /**
        * view all cta data for tile grid components
        */
        'tileGridCta'?: any;
        /**
        * description to be shown in the header of tile grid
        */
        'tileGridDescription'?: string;
        /**
        * eyebrow text to be shown in the header of tile grid
        */
        'tileGridEyebrowText'?: string;
        /**
        * Prop for the tile grid text
        */
        'tileGridTitle'?: string;
        /**
        * json data for tile
        */
        'tileListData'?: any;
      }
      interface DxpTimer {
        /**
        * Display direction of the timer : 'horizontal' || 'vertical'
        */
        'displayDirection'?: 'horizontal' | 'vertical';
        /**
        * End Time : ISO 8601 standard timer end time, complete with time zone offset (YYYY-MM-DDThh:mm:ssTZD)
        */
        'endTime'?: any;
        /**
        * Max Time Unit : months || days || hours || minutes || seconds
        */
        'maxUnit'?: 'months' | 'days' | 'hours' | 'minutes' | 'seconds' | 'milliseconds';
        /**
        * Min Time Unit : months || days || hours || minutes || seconds
        */
        'minUnit'?: 'months' | 'days' | 'hours' | 'minutes' | 'seconds' | 'milliseconds';
        /**
        * Boolean: stop timer at zero
        */
        'stopAtZero'?: boolean;
        /**
        * Set timer size as large or small
        */
        'timerSize'?: 'large' | 'small';
        /**
        * Timer type : 'countdown' || 'stopwatch' || 'timer'
        */
        'timerType'?: 'countdown' | 'stopwatch' | 'timer';
      }
      interface DxpToggleSwitch {
        /**
        * toggle on/off status
        */
        'checked'?: boolean;
        /**
        * description text for toggle
        */
        'description'?: string;
        /**
        * toggle active/inactive status
        */
        'disabled'?: boolean;
        /**
        * label for toggle
        */
        'label'?: string;
        /**
        * label orientation for toggle
        */
        'labelPosition'?: 'left' | 'right';
        /**
        * click event. Emitted when clicked
        */
        'onClickHandler'?: (event: CustomEvent<any>) => void;
        /**
        * analytics data emitter
        */
        'onDxp_comp'?: (event: CustomEvent<any>) => void;
        /**
        * click event. Emitted when clicked
        */
        'onToggleDataEmitter'?: (event: CustomEvent<{}>) => void;
        /**
        * value for toggle
        */
        'value'?: string;
      }
      interface DxpTooltip {
        /**
        * tool tip content
        */
        'content'?: string;
        /**
        * is used as nested element or document level element
        */
        'insideShadow'?: boolean;
        /**
        * placement of tooltip
        */
        'placement'?: 'top' | 'top-right' | 'top-left' |
        'right' | 'right-top' | 'right-bottom' |
        'bottom' | 'bottom-right' | 'bottom-left' |
        'left' | 'left-top' | 'left-bottom';
        /**
        * host Element ID
        */
        'selectorId'?: string;
        /**
        * Title of tooltip
        */
        'tooltipTitle'?: string;
        /**
        * comma separated list of event to trigger tooltip on host Element
        */
        'trigger'?: string;
      }
      interface DxpTwitterBanner {
        /**
        * sets the handle value for fetching the corresponding the tweets
        */
        'handle'?: string;
        /**
        * handle type can be either screen name or hash tag
        */
        'handleType'?: string;
        /**
        * Sets the hash tag for fetching corresponding tweets
        */
        'hashtag'?: any;
        /**
        * Sets the maximum number of tweets to be shown
        */
        'maxCount'?: number;
        /**
        * Sets the image link to the twitter account
        */
        'src'?: string;
        /**
        * window to target for link
        */
        'target'?: string;
        /**
        * Sets Twitter Tweets URL
        */
        'twitterApiEndPoint'?: string;
        /**
        * Sets Twitter Domain URL
        */
        'twitterUrl'?: string;
      }
      interface DxpVcard {
        /**
        * is this card favourite ?
        */
        'additionalInfo'?: string;
        /**
        * description of card
        */
        'cardDescription'?: string;
        /**
        * is this card favourite ?
        */
        'cardFavorited'?: boolean;
        /**
        * title of card
        */
        'cardTitle'?: string;
        /**
        * type of card
        */
        'cardType'?: string;
        /**
        * view of card
        */
        'cardView'?: 'tile-view' | 'list-view';
        /**
        * Card CTA Button link
        */
        'ctaButtonLink'?: string;
        /**
        * Card CTA Button text
        */
        'ctaButtonText'?: string;
        /**
        * Card CTA Button
        */
        'enableCardButton'?: boolean;
        /**
        * Favorite icon show/hide
        */
        'enableCardFavIcon'?: boolean;
        /**
        * Create More action button
        */
        'enableMoreOptions'?: boolean;
        /**
        * Status text enable/disable
        */
        'enableStatusText'?: boolean;
        /**
        * type of card icon
        */
        'icon'?: string;
        /**
        * type of card icon
        */
        'iconSprite'?: 'icon-sprite' | 'icons-sprite';
        /**
        * More action button list
        */
        'moreOptionList'?: any[];
        /**
        * CTA vcard click event. Emitted when Vcard is clicked
        */
        'onCardClick'?: (event: CustomEvent<any>) => void;
        /**
        * CTA header right icon click event. Emitted when CTA fav icon is clicked
        */
        'onFavoriteClick'?: (event: CustomEvent<any>) => void;
        /**
        * border color of an element
        */
        'ribbonColor'?: string;
      }
      interface DxpVideo {
        /**
        * video auto play property
        */
        'autoplay'?: boolean;
        /**
        * custom mute button in case of disabled controls for HTML5 video
        */
        'customMuteButton'?: boolean;
        /**
        * custom mute button position
        */
        'customMuteButtonPosition'?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
        * disable video controls
        */
        'disableControls'?: boolean;
        /**
        * display full height video
        */
        'fullHeight'?: boolean;
        /**
        * video play icon type e.g light, dark
        */
        'iconType'?: 'dark' | 'light';
        /**
        * video mute unmute control property
        */
        'muted'?: boolean;
        /**
        * analytics data emitter
        */
        'onDxp_comp'?: (event: CustomEvent<any>) => void;
        /**
        * video poster/thumbnail
        */
        'srcPoster'?: string;
        /**
        * video source e.g youtube, youku or external source
        */
        'srcVideo'?: string;
        /**
        * video type e.g youtube, youku or external source
        */
        'type'?: string;
        /**
        * video  description
        */
        'videoDescription'?: string;
        /**
        * video name. This property is required for analytics and SEO
        */
        'videoName'?: string;
        /**
        * video first publish date.
        */
        'videoUploadDate'?: string;
        /**
        * video width
        */
        'width'?: string;
      }

      interface IntrinsicElements {
        'dxp-accordion': DxpAccordion;
        'dxp-accordion-item': DxpAccordionItem;
        'dxp-audio': DxpAudio;
        'dxp-autowriter': DxpAutowriter;
        'dxp-banner': DxpBanner;
        'dxp-banner-benefits-hero': DxpBannerBenefitsHero;
        'dxp-banner-carousel': DxpBannerCarousel;
        'dxp-banner-cta': DxpBannerCta;
        'dxp-banner-image-overlay': DxpBannerImageOverlay;
        'dxp-banner-regular': DxpBannerRegular;
        'dxp-banner-small-image': DxpBannerSmallImage;
        'dxp-banner-solid-background': DxpBannerSolidBackground;
        'dxp-breadcrumb': DxpBreadcrumb;
        'dxp-breadcrumb-item': DxpBreadcrumbItem;
        'dxp-calendar': DxpCalendar;
        'dxp-cell': DxpCell;
        'dxp-chart': DxpChart;
        'dxp-checkbox': DxpCheckbox;
        'dxp-checkbox-group': DxpCheckboxGroup;
        'dxp-checkbox-tree': DxpCheckboxTree;
        'dxp-comments': DxpComments;
        'dxp-comments-item': DxpCommentsItem;
        'dxp-comments-with-reply': DxpCommentsWithReply;
        'dxp-container': DxpContainer;
        'dxp-content-item': DxpContentItem;
        'dxp-content-item-grid': DxpContentItemGrid;
        'dxp-content-list': DxpContentList;
        'dxp-content-list-item': DxpContentListItem;
        'dxp-cookie-consent': DxpCookieConsent;
        'dxp-copyright': DxpCopyright;
        'dxp-country-item': DxpCountryItem;
        'dxp-country-language-selector': DxpCountryLanguageSelector;
        'dxp-cta': DxpCta;
        'dxp-cta-list': DxpCtaList;
        'dxp-data-grid': DxpDataGrid;
        'dxp-data-grid-cell': DxpDataGridCell;
        'dxp-data-grid-filter': DxpDataGridFilter;
        'dxp-data-grid-row': DxpDataGridRow;
        'dxp-faceted-filter': DxpFacetedFilter;
        'dxp-faceted-filter-item': DxpFacetedFilterItem;
        'dxp-feedback': DxpFeedback;
        'dxp-feedback-display': DxpFeedbackDisplay;
        'dxp-feedback-item': DxpFeedbackItem;
        'dxp-flex-layout': DxpFlexLayout;
        'dxp-flex-layout-item': DxpFlexLayoutItem;
        'dxp-flipbox': DxpFlipbox;
        'dxp-footer': DxpFooter;
        'dxp-form': DxpForm;
        'dxp-grid-pagination': DxpGridPagination;
        'dxp-head': DxpHead;
        'dxp-header': DxpHeader;
        'dxp-header-rich': DxpHeaderRich;
        'dxp-image': DxpImage;
        'dxp-image-carousel': DxpImageCarousel;
        'dxp-image-grid': DxpImageGrid;
        'dxp-image-slide': DxpImageSlide;
        'dxp-in-language': DxpInLanguage;
        'dxp-in-page-nav': DxpInPageNav;
        'dxp-in-page-nav-item': DxpInPageNavItem;
        'dxp-input': DxpInput;
        'dxp-input-password': DxpInputPassword;
        'dxp-language-item': DxpLanguageItem;
        'dxp-language-selector': DxpLanguageSelector;
        'dxp-line': DxpLine;
        'dxp-location-search-banner': DxpLocationSearchBanner;
        'dxp-location-selector': DxpLocationSelector;
        'dxp-logo': DxpLogo;
        'dxp-message': DxpMessage;
        'dxp-message-list': DxpMessageList;
        'dxp-message-text': DxpMessageText;
        'dxp-modal': DxpModal;
        'dxp-nav': DxpNav;
        'dxp-nav-group': DxpNavGroup;
        'dxp-nav-item': DxpNavItem;
        'dxp-nav-item-content': DxpNavItemContent;
        'dxp-nav-menu': DxpNavMenu;
        'dxp-nav-sub-item': DxpNavSubItem;
        'dxp-navigation': DxpNavigation;
        'dxp-navigation-banner': DxpNavigationBanner;
        'dxp-overlay': DxpOverlay;
        'dxp-page-header': DxpPageHeader;
        'dxp-pagination': DxpPagination;
        'dxp-panel-menu': DxpPanelMenu;
        'dxp-panel-sub-menu': DxpPanelSubMenu;
        'dxp-pills': DxpPills;
        'dxp-progressbar': DxpProgressbar;
        'dxp-progressspinner': DxpProgressspinner;
        'dxp-pull-quote': DxpPullQuote;
        'dxp-radio-button': DxpRadioButton;
        'dxp-radio-group': DxpRadioGroup;
        'dxp-range-slider': DxpRangeSlider;
        'dxp-region': DxpRegion;
        'dxp-region-selector': DxpRegionSelector;
        'dxp-search': DxpSearch;
        'dxp-search-result': DxpSearchResult;
        'dxp-searchbox': DxpSearchbox;
        'dxp-select': DxpSelect;
        'dxp-selector-menu': DxpSelectorMenu;
        'dxp-shape': DxpShape;
        'dxp-sidebar-menu': DxpSidebarMenu;
        'dxp-sidebar-menu-group': DxpSidebarMenuGroup;
        'dxp-sidebar-menu-item': DxpSidebarMenuItem;
        'dxp-site-list': DxpSiteList;
        'dxp-site-map': DxpSiteMap;
        'dxp-site-map-group': DxpSiteMapGroup;
        'dxp-site-map-group-item': DxpSiteMapGroupItem;
        'dxp-site-map-list': DxpSiteMapList;
        'dxp-site-map-list-item': DxpSiteMapListItem;
        'dxp-social-links': DxpSocialLinks;
        'dxp-social-links-item': DxpSocialLinksItem;
        'dxp-step': DxpStep;
        'dxp-step-tracker': DxpStepTracker;
        'dxp-sticky-footer': DxpStickyFooter;
        'dxp-sticky-footer-cta': DxpStickyFooterCta;
        'dxp-tab-item': DxpTabItem;
        'dxp-tab-list': DxpTabList;
        'dxp-table': DxpTable;
        'dxp-tabs': DxpTabs;
        'dxp-tag-input': DxpTagInput;
        'dxp-tbl-row': DxpTblRow;
        'dxp-textarea': DxpTextarea;
        'dxp-tile': DxpTile;
        'dxp-tile-grid': DxpTileGrid;
        'dxp-timer': DxpTimer;
        'dxp-toggle-switch': DxpToggleSwitch;
        'dxp-tooltip': DxpTooltip;
        'dxp-twitter-banner': DxpTwitterBanner;
        'dxp-vcard': DxpVcard;
        'dxp-video': DxpVideo;
      }
    }

    export { LocalJSX as JSX };


    declare module "@stencil/core" {
      export namespace JSX {
        interface IntrinsicElements {
          'dxp-accordion': LocalJSX.DxpAccordion & JSXBase.HTMLAttributes<HTMLDxpAccordionElement>;
          'dxp-accordion-item': LocalJSX.DxpAccordionItem & JSXBase.HTMLAttributes<HTMLDxpAccordionItemElement>;
          'dxp-audio': LocalJSX.DxpAudio & JSXBase.HTMLAttributes<HTMLDxpAudioElement>;
          'dxp-autowriter': LocalJSX.DxpAutowriter & JSXBase.HTMLAttributes<HTMLDxpAutowriterElement>;
          'dxp-banner': LocalJSX.DxpBanner & JSXBase.HTMLAttributes<HTMLDxpBannerElement>;
          'dxp-banner-benefits-hero': LocalJSX.DxpBannerBenefitsHero & JSXBase.HTMLAttributes<HTMLDxpBannerBenefitsHeroElement>;
          'dxp-banner-carousel': LocalJSX.DxpBannerCarousel & JSXBase.HTMLAttributes<HTMLDxpBannerCarouselElement>;
          'dxp-banner-cta': LocalJSX.DxpBannerCta & JSXBase.HTMLAttributes<HTMLDxpBannerCtaElement>;
          'dxp-banner-image-overlay': LocalJSX.DxpBannerImageOverlay & JSXBase.HTMLAttributes<HTMLDxpBannerImageOverlayElement>;
          'dxp-banner-regular': LocalJSX.DxpBannerRegular & JSXBase.HTMLAttributes<HTMLDxpBannerRegularElement>;
          'dxp-banner-small-image': LocalJSX.DxpBannerSmallImage & JSXBase.HTMLAttributes<HTMLDxpBannerSmallImageElement>;
          'dxp-banner-solid-background': LocalJSX.DxpBannerSolidBackground & JSXBase.HTMLAttributes<HTMLDxpBannerSolidBackgroundElement>;
          'dxp-breadcrumb': LocalJSX.DxpBreadcrumb & JSXBase.HTMLAttributes<HTMLDxpBreadcrumbElement>;
          'dxp-breadcrumb-item': LocalJSX.DxpBreadcrumbItem & JSXBase.HTMLAttributes<HTMLDxpBreadcrumbItemElement>;
          'dxp-calendar': LocalJSX.DxpCalendar & JSXBase.HTMLAttributes<HTMLDxpCalendarElement>;
          'dxp-cell': LocalJSX.DxpCell & JSXBase.HTMLAttributes<HTMLDxpCellElement>;
          'dxp-chart': LocalJSX.DxpChart & JSXBase.HTMLAttributes<HTMLDxpChartElement>;
          'dxp-checkbox': LocalJSX.DxpCheckbox & JSXBase.HTMLAttributes<HTMLDxpCheckboxElement>;
          'dxp-checkbox-group': LocalJSX.DxpCheckboxGroup & JSXBase.HTMLAttributes<HTMLDxpCheckboxGroupElement>;
          'dxp-checkbox-tree': LocalJSX.DxpCheckboxTree & JSXBase.HTMLAttributes<HTMLDxpCheckboxTreeElement>;
          'dxp-comments': LocalJSX.DxpComments & JSXBase.HTMLAttributes<HTMLDxpCommentsElement>;
          'dxp-comments-item': LocalJSX.DxpCommentsItem & JSXBase.HTMLAttributes<HTMLDxpCommentsItemElement>;
          'dxp-comments-with-reply': LocalJSX.DxpCommentsWithReply & JSXBase.HTMLAttributes<HTMLDxpCommentsWithReplyElement>;
          'dxp-container': LocalJSX.DxpContainer & JSXBase.HTMLAttributes<HTMLDxpContainerElement>;
          'dxp-content-item': LocalJSX.DxpContentItem & JSXBase.HTMLAttributes<HTMLDxpContentItemElement>;
          'dxp-content-item-grid': LocalJSX.DxpContentItemGrid & JSXBase.HTMLAttributes<HTMLDxpContentItemGridElement>;
          'dxp-content-list': LocalJSX.DxpContentList & JSXBase.HTMLAttributes<HTMLDxpContentListElement>;
          'dxp-content-list-item': LocalJSX.DxpContentListItem & JSXBase.HTMLAttributes<HTMLDxpContentListItemElement>;
          'dxp-cookie-consent': LocalJSX.DxpCookieConsent & JSXBase.HTMLAttributes<HTMLDxpCookieConsentElement>;
          'dxp-copyright': LocalJSX.DxpCopyright & JSXBase.HTMLAttributes<HTMLDxpCopyrightElement>;
          'dxp-country-item': LocalJSX.DxpCountryItem & JSXBase.HTMLAttributes<HTMLDxpCountryItemElement>;
          'dxp-country-language-selector': LocalJSX.DxpCountryLanguageSelector & JSXBase.HTMLAttributes<HTMLDxpCountryLanguageSelectorElement>;
          'dxp-cta': LocalJSX.DxpCta & JSXBase.HTMLAttributes<HTMLDxpCtaElement>;
          'dxp-cta-list': LocalJSX.DxpCtaList & JSXBase.HTMLAttributes<HTMLDxpCtaListElement>;
          'dxp-data-grid': LocalJSX.DxpDataGrid & JSXBase.HTMLAttributes<HTMLDxpDataGridElement>;
          'dxp-data-grid-cell': LocalJSX.DxpDataGridCell & JSXBase.HTMLAttributes<HTMLDxpDataGridCellElement>;
          'dxp-data-grid-filter': LocalJSX.DxpDataGridFilter & JSXBase.HTMLAttributes<HTMLDxpDataGridFilterElement>;
          'dxp-data-grid-row': LocalJSX.DxpDataGridRow & JSXBase.HTMLAttributes<HTMLDxpDataGridRowElement>;
          'dxp-faceted-filter': LocalJSX.DxpFacetedFilter & JSXBase.HTMLAttributes<HTMLDxpFacetedFilterElement>;
          'dxp-faceted-filter-item': LocalJSX.DxpFacetedFilterItem & JSXBase.HTMLAttributes<HTMLDxpFacetedFilterItemElement>;
          'dxp-feedback': LocalJSX.DxpFeedback & JSXBase.HTMLAttributes<HTMLDxpFeedbackElement>;
          'dxp-feedback-display': LocalJSX.DxpFeedbackDisplay & JSXBase.HTMLAttributes<HTMLDxpFeedbackDisplayElement>;
          'dxp-feedback-item': LocalJSX.DxpFeedbackItem & JSXBase.HTMLAttributes<HTMLDxpFeedbackItemElement>;
          'dxp-flex-layout': LocalJSX.DxpFlexLayout & JSXBase.HTMLAttributes<HTMLDxpFlexLayoutElement>;
          'dxp-flex-layout-item': LocalJSX.DxpFlexLayoutItem & JSXBase.HTMLAttributes<HTMLDxpFlexLayoutItemElement>;
          'dxp-flipbox': LocalJSX.DxpFlipbox & JSXBase.HTMLAttributes<HTMLDxpFlipboxElement>;
          'dxp-footer': LocalJSX.DxpFooter & JSXBase.HTMLAttributes<HTMLDxpFooterElement>;
          'dxp-form': LocalJSX.DxpForm & JSXBase.HTMLAttributes<HTMLDxpFormElement>;
          'dxp-grid-pagination': LocalJSX.DxpGridPagination & JSXBase.HTMLAttributes<HTMLDxpGridPaginationElement>;
          'dxp-head': LocalJSX.DxpHead & JSXBase.HTMLAttributes<HTMLDxpHeadElement>;
          'dxp-header': LocalJSX.DxpHeader & JSXBase.HTMLAttributes<HTMLDxpHeaderElement>;
          'dxp-header-rich': LocalJSX.DxpHeaderRich & JSXBase.HTMLAttributes<HTMLDxpHeaderRichElement>;
          'dxp-image': LocalJSX.DxpImage & JSXBase.HTMLAttributes<HTMLDxpImageElement>;
          'dxp-image-carousel': LocalJSX.DxpImageCarousel & JSXBase.HTMLAttributes<HTMLDxpImageCarouselElement>;
          'dxp-image-grid': LocalJSX.DxpImageGrid & JSXBase.HTMLAttributes<HTMLDxpImageGridElement>;
          'dxp-image-slide': LocalJSX.DxpImageSlide & JSXBase.HTMLAttributes<HTMLDxpImageSlideElement>;
          'dxp-in-language': LocalJSX.DxpInLanguage & JSXBase.HTMLAttributes<HTMLDxpInLanguageElement>;
          'dxp-in-page-nav': LocalJSX.DxpInPageNav & JSXBase.HTMLAttributes<HTMLDxpInPageNavElement>;
          'dxp-in-page-nav-item': LocalJSX.DxpInPageNavItem & JSXBase.HTMLAttributes<HTMLDxpInPageNavItemElement>;
          'dxp-input': LocalJSX.DxpInput & JSXBase.HTMLAttributes<HTMLDxpInputElement>;
          'dxp-input-password': LocalJSX.DxpInputPassword & JSXBase.HTMLAttributes<HTMLDxpInputPasswordElement>;
          'dxp-language-item': LocalJSX.DxpLanguageItem & JSXBase.HTMLAttributes<HTMLDxpLanguageItemElement>;
          'dxp-language-selector': LocalJSX.DxpLanguageSelector & JSXBase.HTMLAttributes<HTMLDxpLanguageSelectorElement>;
          'dxp-line': LocalJSX.DxpLine & JSXBase.HTMLAttributes<HTMLDxpLineElement>;
          'dxp-location-search-banner': LocalJSX.DxpLocationSearchBanner & JSXBase.HTMLAttributes<HTMLDxpLocationSearchBannerElement>;
          'dxp-location-selector': LocalJSX.DxpLocationSelector & JSXBase.HTMLAttributes<HTMLDxpLocationSelectorElement>;
          'dxp-logo': LocalJSX.DxpLogo & JSXBase.HTMLAttributes<HTMLDxpLogoElement>;
          'dxp-message': LocalJSX.DxpMessage & JSXBase.HTMLAttributes<HTMLDxpMessageElement>;
          'dxp-message-list': LocalJSX.DxpMessageList & JSXBase.HTMLAttributes<HTMLDxpMessageListElement>;
          'dxp-message-text': LocalJSX.DxpMessageText & JSXBase.HTMLAttributes<HTMLDxpMessageTextElement>;
          'dxp-modal': LocalJSX.DxpModal & JSXBase.HTMLAttributes<HTMLDxpModalElement>;
          'dxp-nav': LocalJSX.DxpNav & JSXBase.HTMLAttributes<HTMLDxpNavElement>;
          'dxp-nav-group': LocalJSX.DxpNavGroup & JSXBase.HTMLAttributes<HTMLDxpNavGroupElement>;
          'dxp-nav-item': LocalJSX.DxpNavItem & JSXBase.HTMLAttributes<HTMLDxpNavItemElement>;
          'dxp-nav-item-content': LocalJSX.DxpNavItemContent & JSXBase.HTMLAttributes<HTMLDxpNavItemContentElement>;
          'dxp-nav-menu': LocalJSX.DxpNavMenu & JSXBase.HTMLAttributes<HTMLDxpNavMenuElement>;
          'dxp-nav-sub-item': LocalJSX.DxpNavSubItem & JSXBase.HTMLAttributes<HTMLDxpNavSubItemElement>;
          'dxp-navigation': LocalJSX.DxpNavigation & JSXBase.HTMLAttributes<HTMLDxpNavigationElement>;
          'dxp-navigation-banner': LocalJSX.DxpNavigationBanner & JSXBase.HTMLAttributes<HTMLDxpNavigationBannerElement>;
          'dxp-overlay': LocalJSX.DxpOverlay & JSXBase.HTMLAttributes<HTMLDxpOverlayElement>;
          'dxp-page-header': LocalJSX.DxpPageHeader & JSXBase.HTMLAttributes<HTMLDxpPageHeaderElement>;
          'dxp-pagination': LocalJSX.DxpPagination & JSXBase.HTMLAttributes<HTMLDxpPaginationElement>;
          'dxp-panel-menu': LocalJSX.DxpPanelMenu & JSXBase.HTMLAttributes<HTMLDxpPanelMenuElement>;
          'dxp-panel-sub-menu': LocalJSX.DxpPanelSubMenu & JSXBase.HTMLAttributes<HTMLDxpPanelSubMenuElement>;
          'dxp-pills': LocalJSX.DxpPills & JSXBase.HTMLAttributes<HTMLDxpPillsElement>;
          'dxp-progressbar': LocalJSX.DxpProgressbar & JSXBase.HTMLAttributes<HTMLDxpProgressbarElement>;
          'dxp-progressspinner': LocalJSX.DxpProgressspinner & JSXBase.HTMLAttributes<HTMLDxpProgressspinnerElement>;
          'dxp-pull-quote': LocalJSX.DxpPullQuote & JSXBase.HTMLAttributes<HTMLDxpPullQuoteElement>;
          'dxp-radio-button': LocalJSX.DxpRadioButton & JSXBase.HTMLAttributes<HTMLDxpRadioButtonElement>;
          'dxp-radio-group': LocalJSX.DxpRadioGroup & JSXBase.HTMLAttributes<HTMLDxpRadioGroupElement>;
          'dxp-range-slider': LocalJSX.DxpRangeSlider & JSXBase.HTMLAttributes<HTMLDxpRangeSliderElement>;
          'dxp-region': LocalJSX.DxpRegion & JSXBase.HTMLAttributes<HTMLDxpRegionElement>;
          'dxp-region-selector': LocalJSX.DxpRegionSelector & JSXBase.HTMLAttributes<HTMLDxpRegionSelectorElement>;
          'dxp-search': LocalJSX.DxpSearch & JSXBase.HTMLAttributes<HTMLDxpSearchElement>;
          'dxp-search-result': LocalJSX.DxpSearchResult & JSXBase.HTMLAttributes<HTMLDxpSearchResultElement>;
          'dxp-searchbox': LocalJSX.DxpSearchbox & JSXBase.HTMLAttributes<HTMLDxpSearchboxElement>;
          'dxp-select': LocalJSX.DxpSelect & JSXBase.HTMLAttributes<HTMLDxpSelectElement>;
          'dxp-selector-menu': LocalJSX.DxpSelectorMenu & JSXBase.HTMLAttributes<HTMLDxpSelectorMenuElement>;
          'dxp-shape': LocalJSX.DxpShape & JSXBase.HTMLAttributes<HTMLDxpShapeElement>;
          'dxp-sidebar-menu': LocalJSX.DxpSidebarMenu & JSXBase.HTMLAttributes<HTMLDxpSidebarMenuElement>;
          'dxp-sidebar-menu-group': LocalJSX.DxpSidebarMenuGroup & JSXBase.HTMLAttributes<HTMLDxpSidebarMenuGroupElement>;
          'dxp-sidebar-menu-item': LocalJSX.DxpSidebarMenuItem & JSXBase.HTMLAttributes<HTMLDxpSidebarMenuItemElement>;
          'dxp-site-list': LocalJSX.DxpSiteList & JSXBase.HTMLAttributes<HTMLDxpSiteListElement>;
          'dxp-site-map': LocalJSX.DxpSiteMap & JSXBase.HTMLAttributes<HTMLDxpSiteMapElement>;
          'dxp-site-map-group': LocalJSX.DxpSiteMapGroup & JSXBase.HTMLAttributes<HTMLDxpSiteMapGroupElement>;
          'dxp-site-map-group-item': LocalJSX.DxpSiteMapGroupItem & JSXBase.HTMLAttributes<HTMLDxpSiteMapGroupItemElement>;
          'dxp-site-map-list': LocalJSX.DxpSiteMapList & JSXBase.HTMLAttributes<HTMLDxpSiteMapListElement>;
          'dxp-site-map-list-item': LocalJSX.DxpSiteMapListItem & JSXBase.HTMLAttributes<HTMLDxpSiteMapListItemElement>;
          'dxp-social-links': LocalJSX.DxpSocialLinks & JSXBase.HTMLAttributes<HTMLDxpSocialLinksElement>;
          'dxp-social-links-item': LocalJSX.DxpSocialLinksItem & JSXBase.HTMLAttributes<HTMLDxpSocialLinksItemElement>;
          'dxp-step': LocalJSX.DxpStep & JSXBase.HTMLAttributes<HTMLDxpStepElement>;
          'dxp-step-tracker': LocalJSX.DxpStepTracker & JSXBase.HTMLAttributes<HTMLDxpStepTrackerElement>;
          'dxp-sticky-footer': LocalJSX.DxpStickyFooter & JSXBase.HTMLAttributes<HTMLDxpStickyFooterElement>;
          'dxp-sticky-footer-cta': LocalJSX.DxpStickyFooterCta & JSXBase.HTMLAttributes<HTMLDxpStickyFooterCtaElement>;
          'dxp-tab-item': LocalJSX.DxpTabItem & JSXBase.HTMLAttributes<HTMLDxpTabItemElement>;
          'dxp-tab-list': LocalJSX.DxpTabList & JSXBase.HTMLAttributes<HTMLDxpTabListElement>;
          'dxp-table': LocalJSX.DxpTable & JSXBase.HTMLAttributes<HTMLDxpTableElement>;
          'dxp-tabs': LocalJSX.DxpTabs & JSXBase.HTMLAttributes<HTMLDxpTabsElement>;
          'dxp-tag-input': LocalJSX.DxpTagInput & JSXBase.HTMLAttributes<HTMLDxpTagInputElement>;
          'dxp-tbl-row': LocalJSX.DxpTblRow & JSXBase.HTMLAttributes<HTMLDxpTblRowElement>;
          'dxp-textarea': LocalJSX.DxpTextarea & JSXBase.HTMLAttributes<HTMLDxpTextareaElement>;
          'dxp-tile': LocalJSX.DxpTile & JSXBase.HTMLAttributes<HTMLDxpTileElement>;
          'dxp-tile-grid': LocalJSX.DxpTileGrid & JSXBase.HTMLAttributes<HTMLDxpTileGridElement>;
          'dxp-timer': LocalJSX.DxpTimer & JSXBase.HTMLAttributes<HTMLDxpTimerElement>;
          'dxp-toggle-switch': LocalJSX.DxpToggleSwitch & JSXBase.HTMLAttributes<HTMLDxpToggleSwitchElement>;
          'dxp-tooltip': LocalJSX.DxpTooltip & JSXBase.HTMLAttributes<HTMLDxpTooltipElement>;
          'dxp-twitter-banner': LocalJSX.DxpTwitterBanner & JSXBase.HTMLAttributes<HTMLDxpTwitterBannerElement>;
          'dxp-vcard': LocalJSX.DxpVcard & JSXBase.HTMLAttributes<HTMLDxpVcardElement>;
          'dxp-video': LocalJSX.DxpVideo & JSXBase.HTMLAttributes<HTMLDxpVideoElement>;
        }
      }
    }


